# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: liqi.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class GamePlayerState(betterproto.Enum):
    NULL = 0
    AUTH = 1
    SYNCING = 2
    READY = 3


@dataclass(eq=False, repr=False)
class NotifyCaptcha(betterproto.Message):
    check_id: int = betterproto.uint32_field(1)
    start_time: int = betterproto.uint32_field(2)
    random_str: str = betterproto.string_field(3)
    type: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class NotifyRoomGameStart(betterproto.Message):
    game_url: str = betterproto.string_field(1)
    connect_token: str = betterproto.string_field(2)
    game_uuid: str = betterproto.string_field(3)
    location: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class NotifyMatchGameStart(betterproto.Message):
    game_url: str = betterproto.string_field(1)
    connect_token: str = betterproto.string_field(2)
    game_uuid: str = betterproto.string_field(3)
    match_mode_id: int = betterproto.uint32_field(4)
    location: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class NotifyRoomPlayerReady(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    ready: bool = betterproto.bool_field(2)
    account_list: "NotifyRoomPlayerReadyAccountReadyState" = betterproto.message_field(
        3
    )
    seq: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class NotifyRoomPlayerReadyAccountReadyState(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    ready: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class NotifyRoomPlayerDressing(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    dressing: bool = betterproto.bool_field(2)
    account_list: "NotifyRoomPlayerDressingAccountDressingState" = (
        betterproto.message_field(3)
    )
    seq: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class NotifyRoomPlayerDressingAccountDressingState(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    dressing: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class NotifyRoomPlayerUpdate(betterproto.Message):
    update_list: List["PlayerBaseView"] = betterproto.message_field(1)
    remove_list: List[int] = betterproto.uint32_field(2)
    owner_id: int = betterproto.uint32_field(3)
    robot_count: int = betterproto.uint32_field(4)
    player_list: List["PlayerBaseView"] = betterproto.message_field(5)
    seq: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class NotifyRoomKickOut(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class NotifyFriendStateChange(betterproto.Message):
    target_id: int = betterproto.uint32_field(1)
    active_state: "AccountActiveState" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class NotifyFriendViewChange(betterproto.Message):
    target_id: int = betterproto.uint32_field(1)
    base: "PlayerBaseView" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class NotifyFriendChange(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    type: int = betterproto.uint32_field(2)
    friend: "Friend" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class NotifyNewFriendApply(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    apply_time: int = betterproto.uint32_field(2)
    removed_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class NotifyClientMessage(betterproto.Message):
    sender: "PlayerBaseView" = betterproto.message_field(1)
    type: int = betterproto.uint32_field(2)
    content: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class NotifyAccountUpdate(betterproto.Message):
    update: "AccountUpdate" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NotifyAnotherLogin(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class NotifyAccountLogout(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class NotifyAnnouncementUpdate(betterproto.Message):
    update_list: List["NotifyAnnouncementUpdateAnnouncementUpdate"] = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class NotifyAnnouncementUpdateAnnouncementUpdate(betterproto.Message):
    lang: str = betterproto.string_field(1)
    platform: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class NotifyNewMail(betterproto.Message):
    mail: "Mail" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NotifyDeleteMail(betterproto.Message):
    mail_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class NotifyReviveCoinUpdate(betterproto.Message):
    has_gained: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class NotifyDailyTaskUpdate(betterproto.Message):
    progresses: List["TaskProgress"] = betterproto.message_field(1)
    max_daily_task_count: int = betterproto.uint32_field(2)
    refresh_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class NotifyActivityTaskUpdate(betterproto.Message):
    progresses: List["TaskProgress"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NotifyActivityPeriodTaskUpdate(betterproto.Message):
    progresses: List["TaskProgress"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NotifyAccountRandomTaskUpdate(betterproto.Message):
    progresses: List["TaskProgress"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NotifyActivitySegmentTaskUpdate(betterproto.Message):
    progresses: List["SegmentTaskProgress"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NotifyActivityUpdate(betterproto.Message):
    list: List["NotifyActivityUpdateFeedActivityData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NotifyActivityUpdateFeedActivityData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    feed_count: int = betterproto.uint32_field(2)
    friend_receive_data: "NotifyActivityUpdateFeedActivityDataCountWithTimeData" = (
        betterproto.message_field(3)
    )
    friend_send_data: "NotifyActivityUpdateFeedActivityDataCountWithTimeData" = (
        betterproto.message_field(4)
    )
    gift_inbox: List["NotifyActivityUpdateFeedActivityDataGiftBoxData"] = (
        betterproto.message_field(5)
    )


@dataclass(eq=False, repr=False)
class NotifyActivityUpdateFeedActivityDataCountWithTimeData(betterproto.Message):
    count: int = betterproto.uint32_field(1)
    last_update_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class NotifyActivityUpdateFeedActivityDataGiftBoxData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    item_id: int = betterproto.uint32_field(2)
    count: int = betterproto.uint32_field(3)
    from_account_id: int = betterproto.uint32_field(4)
    time: int = betterproto.uint32_field(5)
    received: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class NotifyAccountChallengeTaskUpdate(betterproto.Message):
    progresses: List["TaskProgress"] = betterproto.message_field(1)
    level: int = betterproto.uint32_field(2)
    refresh_count: int = betterproto.uint32_field(3)
    match_count: int = betterproto.uint32_field(4)
    ticket_id: int = betterproto.uint32_field(5)
    rewarded_season: List[int] = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class NotifyNewComment(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class NotifyRollingNotice(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class NotifyMaintainNotice(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class NotifyGiftSendRefresh(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class NotifyShopUpdate(betterproto.Message):
    shop_info: "ShopInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NotifyIntervalUpdate(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class NotifyVipLevelChange(betterproto.Message):
    gift_limit: int = betterproto.uint32_field(1)
    friend_max_count: int = betterproto.uint32_field(2)
    zhp_free_refresh_limit: int = betterproto.uint32_field(3)
    zhp_cost_refresh_limit: int = betterproto.uint32_field(4)
    buddy_bonus: float = betterproto.float_field(5)
    record_collect_limit: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class NotifyServerSetting(betterproto.Message):
    settings: "ServerSettings" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NotifyPayResult(betterproto.Message):
    pay_result: int = betterproto.uint32_field(1)
    order_id: str = betterproto.string_field(2)
    goods_id: int = betterproto.uint32_field(3)
    new_month_ticket: int = betterproto.uint32_field(4)
    resource_modify: List["NotifyPayResultResourceModify"] = betterproto.message_field(
        5
    )


@dataclass(eq=False, repr=False)
class NotifyPayResultResourceModify(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    final: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class NotifyCustomContestAccountMsg(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    account_id: int = betterproto.uint32_field(2)
    sender: str = betterproto.string_field(3)
    content: str = betterproto.string_field(4)
    verified: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class NotifyCustomContestSystemMsg(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    type: int = betterproto.uint32_field(2)
    uuid: str = betterproto.string_field(3)
    game_start: "CustomizedContestGameStart" = betterproto.message_field(4)
    game_end: "CustomizedContestGameEnd" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class NotifyMatchTimeout(betterproto.Message):
    sid: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class NotifyMatchFailed(betterproto.Message):
    sid: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class NotifyCustomContestState(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    state: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class NotifyActivityChange(betterproto.Message):
    new_activities: List["Activity"] = betterproto.message_field(1)
    end_activities: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class NotifyAfkResult(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    ban_end_time: int = betterproto.uint32_field(2)
    game_uuid: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class NotifyLoginQueueFinished(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class NotifyGameFinishRewardV2(betterproto.Message):
    mode_id: int = betterproto.uint32_field(1)
    level_change: "NotifyGameFinishRewardV2LevelChange" = betterproto.message_field(2)
    match_chest: "NotifyGameFinishRewardV2MatchChest" = betterproto.message_field(3)
    main_character: "NotifyGameFinishRewardV2MainCharacter" = betterproto.message_field(
        4
    )
    character_gift: "NotifyGameFinishRewardV2CharacterGift" = betterproto.message_field(
        5
    )


@dataclass(eq=False, repr=False)
class NotifyGameFinishRewardV2LevelChange(betterproto.Message):
    origin: "AccountLevel" = betterproto.message_field(1)
    final: "AccountLevel" = betterproto.message_field(2)
    type: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class NotifyGameFinishRewardV2MatchChest(betterproto.Message):
    chest_id: int = betterproto.uint32_field(1)
    origin: int = betterproto.uint32_field(2)
    final: int = betterproto.uint32_field(3)
    is_graded: bool = betterproto.bool_field(4)
    rewards: List["RewardSlot"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class NotifyGameFinishRewardV2MainCharacter(betterproto.Message):
    level: int = betterproto.uint32_field(1)
    exp: int = betterproto.uint32_field(2)
    add: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class NotifyGameFinishRewardV2CharacterGift(betterproto.Message):
    origin: int = betterproto.uint32_field(1)
    final: int = betterproto.uint32_field(2)
    add: int = betterproto.uint32_field(3)
    is_graded: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class NotifyActivityRewardV2(betterproto.Message):
    activity_reward: List["NotifyActivityRewardV2ActivityReward"] = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class NotifyActivityRewardV2ActivityReward(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    rewards: List["RewardSlot"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class NotifyActivityPointV2(betterproto.Message):
    activity_points: List["NotifyActivityPointV2ActivityPoint"] = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class NotifyActivityPointV2ActivityPoint(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    point: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class NotifyLeaderboardPointV2(betterproto.Message):
    leaderboard_points: List["NotifyLeaderboardPointV2LeaderboardPoint"] = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class NotifyLeaderboardPointV2LeaderboardPoint(betterproto.Message):
    leaderboard_id: int = betterproto.uint32_field(1)
    point: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class Error(betterproto.Message):
    code: int = betterproto.uint32_field(1)
    u32_params: List[int] = betterproto.uint32_field(2)
    str_params: List[str] = betterproto.string_field(3)
    json_param: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class Wrapper(betterproto.Message):
    name: str = betterproto.string_field(1)
    data: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class NetworkEndpoint(betterproto.Message):
    family: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)
    port: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqCommon(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ResCommon(betterproto.Message):
    error: "Error" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ResAccountUpdate(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    update: "AccountUpdate" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AntiAddiction(betterproto.Message):
    online_duration: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AccountMahjongStatistic(betterproto.Message):
    final_position_counts: List[int] = betterproto.uint32_field(1)
    recent_round: "AccountMahjongStatisticRoundSummary" = betterproto.message_field(2)
    recent_hu: "AccountMahjongStatisticHuSummary" = betterproto.message_field(3)
    highest_hu: "AccountMahjongStatisticHighestHuRecord" = betterproto.message_field(4)
    recent_20_hu_summary: "AccountMahjongStatisticLiqi20Summary" = (
        betterproto.message_field(6)
    )
    recent_10_hu_summary: "AccountMahjongStatisticLiQi10Summary" = (
        betterproto.message_field(7)
    )
    recent_10_game_result: List["AccountMahjongStatisticGameResult"] = (
        betterproto.message_field(8)
    )


@dataclass(eq=False, repr=False)
class AccountMahjongStatisticRoundSummary(betterproto.Message):
    total_count: int = betterproto.uint32_field(1)
    rong_count: int = betterproto.uint32_field(2)
    zimo_count: int = betterproto.uint32_field(3)
    fangchong_count: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AccountMahjongStatisticHuSummary(betterproto.Message):
    total_count: int = betterproto.uint32_field(1)
    dora_round_count: int = betterproto.uint32_field(2)
    total_fan: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AccountMahjongStatisticHighestHuRecord(betterproto.Message):
    fanshu: int = betterproto.uint32_field(1)
    doranum: int = betterproto.uint32_field(2)
    title: str = betterproto.string_field(3)
    hands: List[str] = betterproto.string_field(4)
    ming: List[str] = betterproto.string_field(5)
    hupai: str = betterproto.string_field(6)
    title_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class AccountMahjongStatisticLiqi20Summary(betterproto.Message):
    total_count: int = betterproto.uint32_field(1)
    total_lidora_count: int = betterproto.uint32_field(2)
    average_hu_point: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AccountMahjongStatisticLiQi10Summary(betterproto.Message):
    total_xuanshang: int = betterproto.uint32_field(1)
    total_fanshu: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AccountMahjongStatisticGameResult(betterproto.Message):
    rank: int = betterproto.uint32_field(1)
    final_point: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class AccountStatisticData(betterproto.Message):
    mahjong_category: int = betterproto.uint32_field(1)
    game_category: int = betterproto.uint32_field(2)
    statistic: "AccountMahjongStatistic" = betterproto.message_field(3)
    game_type: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AccountLevel(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    score: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ViewSlot(betterproto.Message):
    slot: int = betterproto.uint32_field(1)
    item_id: int = betterproto.uint32_field(2)
    type: int = betterproto.uint32_field(3)
    item_id_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class Account(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    nickname: str = betterproto.string_field(2)
    login_time: int = betterproto.uint32_field(3)
    logout_time: int = betterproto.uint32_field(4)
    room_id: int = betterproto.uint32_field(5)
    anti_addiction: "AntiAddiction" = betterproto.message_field(6)
    title: int = betterproto.uint32_field(7)
    signature: str = betterproto.string_field(8)
    email: str = betterproto.string_field(9)
    email_verify: int = betterproto.uint32_field(10)
    gold: int = betterproto.uint32_field(11)
    diamond: int = betterproto.uint32_field(12)
    avatar_id: int = betterproto.uint32_field(13)
    vip: int = betterproto.uint32_field(14)
    birthday: int = betterproto.int32_field(15)
    phone: str = betterproto.string_field(16)
    phone_verify: int = betterproto.uint32_field(17)
    platform_diamond: List["AccountPlatformDiamond"] = betterproto.message_field(18)
    level: "AccountLevel" = betterproto.message_field(21)
    level3: "AccountLevel" = betterproto.message_field(22)
    avatar_frame: int = betterproto.uint32_field(23)
    skin_ticket: int = betterproto.uint32_field(24)
    platform_skin_ticket: List["AccountPlatformSkinTicket"] = betterproto.message_field(
        25
    )
    verified: int = betterproto.uint32_field(26)
    challenge_levels: List["AccountChallengeLevel"] = betterproto.message_field(27)
    achievement_count: List["AccountAchievementCount"] = betterproto.message_field(28)
    frozen_state: int = betterproto.uint32_field(29)
    loading_image: List[int] = betterproto.uint32_field(30)


@dataclass(eq=False, repr=False)
class AccountPlatformDiamond(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AccountPlatformSkinTicket(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AccountChallengeLevel(betterproto.Message):
    season: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    rank: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AccountAchievementCount(betterproto.Message):
    rare: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AccountOwnerData(betterproto.Message):
    unlock_characters: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AccountUpdate(betterproto.Message):
    numerical: List["AccountUpdateNumericalUpdate"] = betterproto.message_field(1)
    character: "AccountUpdateCharacterUpdate" = betterproto.message_field(2)
    bag: "BagUpdate" = betterproto.message_field(3)
    achievement: "AccountUpdateAchievementUpdate" = betterproto.message_field(4)
    shilian: "AccountShiLian" = betterproto.message_field(5)
    daily_task: "AccountUpdateDailyTaskUpdate" = betterproto.message_field(6)
    title: "AccountUpdateTitleUpdate" = betterproto.message_field(7)
    new_recharged_list: List[int] = betterproto.uint32_field(8)
    activity_task: "AccountUpdateTaskUpdate" = betterproto.message_field(9)
    activity_flip_task: "AccountUpdateTaskUpdate" = betterproto.message_field(10)
    activity_period_task: "AccountUpdateTaskUpdate" = betterproto.message_field(11)
    activity_random_task: "AccountUpdateTaskUpdate" = betterproto.message_field(12)
    challenge: "AccountUpdateAccountChallengeUpdate" = betterproto.message_field(13)
    ab_match: "AccountUpdateAccountAbMatchUpdate" = betterproto.message_field(14)
    activity: "AccountActivityUpdate" = betterproto.message_field(15)
    activity_segment_task: "AccountUpdateSegmentTaskUpdate" = betterproto.message_field(
        16
    )
    month_ticket: "AccountUpdateMonthTicketUpdate" = betterproto.message_field(17)


@dataclass(eq=False, repr=False)
class AccountUpdateNumericalUpdate(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    final: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AccountUpdateCharacterUpdate(betterproto.Message):
    characters: List["Character"] = betterproto.message_field(2)
    skins: List[int] = betterproto.uint32_field(3)
    finished_endings: List[int] = betterproto.uint32_field(4)
    rewarded_endings: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class AccountUpdateAchievementUpdate(betterproto.Message):
    progresses: List["AchievementProgress"] = betterproto.message_field(1)
    rewarded_group: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AccountUpdateDailyTaskUpdate(betterproto.Message):
    progresses: List["TaskProgress"] = betterproto.message_field(1)
    task_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AccountUpdateTitleUpdate(betterproto.Message):
    new_titles: List[int] = betterproto.uint32_field(1)
    remove_titles: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AccountUpdateTaskUpdate(betterproto.Message):
    progresses: List["TaskProgress"] = betterproto.message_field(1)
    task_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AccountUpdateAccountChallengeUpdate(betterproto.Message):
    progresses: List["TaskProgress"] = betterproto.message_field(1)
    level: int = betterproto.uint32_field(2)
    refresh_count: int = betterproto.uint32_field(3)
    match_count: int = betterproto.uint32_field(4)
    ticket_id: int = betterproto.uint32_field(5)
    task_list: List[int] = betterproto.uint32_field(6)
    rewarded_season: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class AccountUpdateAccountAbMatchUpdate(betterproto.Message):
    match_id: int = betterproto.uint32_field(1)
    match_count: int = betterproto.uint32_field(2)
    buy_in_count: int = betterproto.uint32_field(3)
    point: int = betterproto.uint32_field(4)
    rewarded: bool = betterproto.bool_field(5)
    match_max_point: List["AccountUpdateAccountAbMatchUpdateMatchPoint"] = (
        betterproto.message_field(6)
    )
    quit: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class AccountUpdateAccountAbMatchUpdateMatchPoint(betterproto.Message):
    match_id: int = betterproto.uint32_field(1)
    point: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AccountUpdateSegmentTaskUpdate(betterproto.Message):
    progresses: List["SegmentTaskProgress"] = betterproto.message_field(1)
    task_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AccountUpdateMonthTicketUpdate(betterproto.Message):
    end_time: int = betterproto.uint32_field(1)
    last_pay_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GameMetaData(betterproto.Message):
    room_id: int = betterproto.uint32_field(1)
    mode_id: int = betterproto.uint32_field(2)
    contest_uid: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AccountPlayingGame(betterproto.Message):
    game_uuid: str = betterproto.string_field(1)
    category: int = betterproto.uint32_field(2)
    meta: "GameMetaData" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AccountCacheView(betterproto.Message):
    cache_version: int = betterproto.uint32_field(1)
    account_id: int = betterproto.uint32_field(2)
    nickname: str = betterproto.string_field(3)
    login_time: int = betterproto.uint32_field(4)
    logout_time: int = betterproto.uint32_field(5)
    is_online: bool = betterproto.bool_field(6)
    room_id: int = betterproto.uint32_field(7)
    title: int = betterproto.uint32_field(8)
    avatar_id: int = betterproto.uint32_field(9)
    vip: int = betterproto.uint32_field(10)
    level: "AccountLevel" = betterproto.message_field(11)
    playing_game: "AccountPlayingGame" = betterproto.message_field(12)
    level3: "AccountLevel" = betterproto.message_field(13)
    avatar_frame: int = betterproto.uint32_field(14)
    verified: int = betterproto.uint32_field(15)
    ban_deadline: int = betterproto.uint32_field(16)
    comment_ban: int = betterproto.uint32_field(17)
    ban_state: int = betterproto.uint32_field(18)


@dataclass(eq=False, repr=False)
class PlayerBaseView(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    avatar_id: int = betterproto.uint32_field(2)
    title: int = betterproto.uint32_field(3)
    nickname: str = betterproto.string_field(4)
    level: "AccountLevel" = betterproto.message_field(5)
    level3: "AccountLevel" = betterproto.message_field(6)
    avatar_frame: int = betterproto.uint32_field(7)
    verified: int = betterproto.uint32_field(8)
    is_banned: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class PlayerGameView(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    avatar_id: int = betterproto.uint32_field(2)
    title: int = betterproto.uint32_field(3)
    nickname: str = betterproto.string_field(4)
    level: "AccountLevel" = betterproto.message_field(5)
    character: "Character" = betterproto.message_field(6)
    level3: "AccountLevel" = betterproto.message_field(7)
    avatar_frame: int = betterproto.uint32_field(8)
    verified: int = betterproto.uint32_field(9)
    views: List["ViewSlot"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class GameSetting(betterproto.Message):
    emoji_switch: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GameMode(betterproto.Message):
    mode: int = betterproto.uint32_field(1)
    ai: bool = betterproto.bool_field(4)
    extendinfo: str = betterproto.string_field(5)
    detail_rule: "GameDetailRule" = betterproto.message_field(6)
    testing_environment: "GameTestingEnvironmentSet" = betterproto.message_field(7)
    game_setting: "GameSetting" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class GameTestingEnvironmentSet(betterproto.Message):
    paixing: int = betterproto.uint32_field(1)
    left_count: int = betterproto.uint32_field(2)
    field_spell_var: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GameDetailRule(betterproto.Message):
    time_fixed: int = betterproto.uint32_field(1)
    time_add: int = betterproto.uint32_field(2)
    dora_count: int = betterproto.uint32_field(3)
    shiduan: int = betterproto.uint32_field(4)
    init_point: int = betterproto.uint32_field(5)
    fandian: int = betterproto.uint32_field(6)
    can_jifei: bool = betterproto.bool_field(7)
    tianbian_value: int = betterproto.uint32_field(8)
    liqibang_value: int = betterproto.uint32_field(9)
    changbang_value: int = betterproto.uint32_field(10)
    noting_fafu_1: int = betterproto.uint32_field(11)
    noting_fafu_2: int = betterproto.uint32_field(12)
    noting_fafu_3: int = betterproto.uint32_field(13)
    have_liujumanguan: bool = betterproto.bool_field(14)
    have_qieshangmanguan: bool = betterproto.bool_field(15)
    have_biao_dora: bool = betterproto.bool_field(16)
    have_gang_biao_dora: bool = betterproto.bool_field(17)
    ming_dora_immediately_open: bool = betterproto.bool_field(18)
    have_li_dora: bool = betterproto.bool_field(19)
    have_gang_li_dora: bool = betterproto.bool_field(20)
    have_sifenglianda: bool = betterproto.bool_field(21)
    have_sigangsanle: bool = betterproto.bool_field(22)
    have_sijializhi: bool = betterproto.bool_field(23)
    have_jiuzhongjiupai: bool = betterproto.bool_field(24)
    have_sanjiahele: bool = betterproto.bool_field(25)
    have_toutiao: bool = betterproto.bool_field(26)
    have_helelianzhuang: bool = betterproto.bool_field(27)
    have_helezhongju: bool = betterproto.bool_field(28)
    have_tingpailianzhuang: bool = betterproto.bool_field(29)
    have_tingpaizhongju: bool = betterproto.bool_field(30)
    have_yifa: bool = betterproto.bool_field(31)
    have_nanruxiru: bool = betterproto.bool_field(32)
    jingsuanyuandian: int = betterproto.uint32_field(33)
    shunweima_2: int = betterproto.int32_field(34)
    shunweima_3: int = betterproto.int32_field(35)
    shunweima_4: int = betterproto.int32_field(36)
    bianjietishi: bool = betterproto.bool_field(37)
    ai_level: int = betterproto.uint32_field(38)
    have_zimosun: bool = betterproto.bool_field(39)
    disable_multi_yukaman: bool = betterproto.bool_field(40)
    fanfu: int = betterproto.uint32_field(41)
    guyi_mode: int = betterproto.uint32_field(42)
    dora3_mode: int = betterproto.uint32_field(43)
    begin_open_mode: int = betterproto.uint32_field(44)
    jiuchao_mode: int = betterproto.uint32_field(45)
    muyu_mode: int = betterproto.uint32_field(46)
    open_hand: int = betterproto.uint32_field(47)
    xuezhandaodi: int = betterproto.uint32_field(48)
    huansanzhang: int = betterproto.uint32_field(49)
    chuanma: int = betterproto.uint32_field(50)
    reveal_discard: int = betterproto.uint32_field(51)
    field_spell_mode: int = betterproto.uint32_field(52)
    zhanxing: int = betterproto.uint32_field(53)
    tianming_mode: int = betterproto.uint32_field(54)
    disable_leijiyiman: bool = betterproto.bool_field(60)
    disable_double_yakuman: int = betterproto.uint32_field(62)
    disable_composite_yakuman: int = betterproto.uint32_field(63)
    enable_shiti: int = betterproto.uint32_field(64)
    enable_nontsumo_liqi: int = betterproto.uint32_field(65)
    disable_double_wind_four_fu: int = betterproto.uint32_field(66)
    disable_angang_guoshi: int = betterproto.uint32_field(67)
    enable_renhe: int = betterproto.uint32_field(68)
    enable_baopai_extend_settings: int = betterproto.uint32_field(69)
    yongchang_mode: int = betterproto.uint32_field(70)
    hunzhiyiji_mode: int = betterproto.uint32_field(71)


@dataclass(eq=False, repr=False)
class Room(betterproto.Message):
    room_id: int = betterproto.uint32_field(1)
    owner_id: int = betterproto.uint32_field(2)
    mode: "GameMode" = betterproto.message_field(3)
    max_player_count: int = betterproto.uint32_field(4)
    persons: List["PlayerGameView"] = betterproto.message_field(5)
    ready_list: List[int] = betterproto.uint32_field(6)
    is_playing: bool = betterproto.bool_field(7)
    public_live: bool = betterproto.bool_field(8)
    robot_count: int = betterproto.uint32_field(9)
    tournament_id: int = betterproto.uint32_field(10)
    seq: int = betterproto.uint32_field(11)
    pre_rule: str = betterproto.string_field(12)


@dataclass(eq=False, repr=False)
class GameEndResult(betterproto.Message):
    players: List["GameEndResultPlayerItem"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GameEndResultPlayerItem(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    total_point: int = betterproto.int32_field(2)
    part_point_1: int = betterproto.int32_field(3)
    part_point_2: int = betterproto.int32_field(4)
    grading_score: int = betterproto.int32_field(5)
    gold: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class GameConnectInfo(betterproto.Message):
    connect_token: str = betterproto.string_field(2)
    game_uuid: str = betterproto.string_field(3)
    location: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ItemGainRecord(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ItemGainRecords(betterproto.Message):
    record_time: int = betterproto.uint32_field(1)
    limit_source_id: int = betterproto.uint32_field(2)
    records: List["ItemGainRecord"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class FakeRandomRecords(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    special_item_id: int = betterproto.uint32_field(2)
    gain_count: int = betterproto.uint32_field(3)
    gain_history: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class Item(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    stack: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class Bag(betterproto.Message):
    items: List["Item"] = betterproto.message_field(1)
    daily_gain_record: List["ItemGainRecords"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BagUpdate(betterproto.Message):
    update_items: List["Item"] = betterproto.message_field(1)
    update_daily_gain_record: List["ItemGainRecords"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RewardSlot(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class OpenResult(betterproto.Message):
    reward: "RewardSlot" = betterproto.message_field(1)
    replace: "RewardSlot" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RewardPlusResult(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    exchange: "RewardPlusResultExchange" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class RewardPlusResultExchange(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    exchange: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ExecuteReward(betterproto.Message):
    reward: "RewardSlot" = betterproto.message_field(1)
    replace: "RewardSlot" = betterproto.message_field(2)
    replace_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ExecuteResult(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class I18NContext(betterproto.Message):
    lang: str = betterproto.string_field(1)
    context: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Mail(betterproto.Message):
    mail_id: int = betterproto.uint32_field(1)
    state: int = betterproto.uint32_field(2)
    take_attachment: bool = betterproto.bool_field(3)
    title: str = betterproto.string_field(4)
    content: str = betterproto.string_field(5)
    attachments: List["RewardSlot"] = betterproto.message_field(6)
    create_time: int = betterproto.uint32_field(7)
    expire_time: int = betterproto.uint32_field(8)
    reference_id: int = betterproto.uint32_field(9)
    title_i18_n: List["I18NContext"] = betterproto.message_field(10)
    content_i18_n: List["I18NContext"] = betterproto.message_field(11)
    template_id: int = betterproto.uint32_field(12)


@dataclass(eq=False, repr=False)
class AchievementProgress(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    counter: int = betterproto.uint32_field(2)
    achieved: bool = betterproto.bool_field(3)
    rewarded: bool = betterproto.bool_field(4)
    achieved_time: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class AccountStatisticByGameMode(betterproto.Message):
    mode: int = betterproto.uint32_field(1)
    game_count_sum: int = betterproto.uint32_field(2)
    game_final_position: List[int] = betterproto.uint32_field(3)
    fly_count: int = betterproto.uint32_field(4)
    gold_earn_sum: float = betterproto.float_field(5)
    round_count_sum: int = betterproto.uint32_field(6)
    dadian_sum: float = betterproto.float_field(7)
    round_end: List["AccountStatisticByGameModeRoundEndData"] = (
        betterproto.message_field(8)
    )
    ming_count_sum: int = betterproto.uint32_field(9)
    liqi_count_sum: int = betterproto.uint32_field(10)
    xun_count_sum: int = betterproto.uint32_field(11)
    highest_lianzhuang: int = betterproto.uint32_field(12)
    score_earn_sum: int = betterproto.uint32_field(13)
    rank_score: List["AccountStatisticByGameModeRankScore"] = betterproto.message_field(
        14
    )


@dataclass(eq=False, repr=False)
class AccountStatisticByGameModeRoundEndData(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    sum: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AccountStatisticByGameModeRankScore(betterproto.Message):
    rank: int = betterproto.uint32_field(1)
    score_sum: int = betterproto.int32_field(2)
    count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AccountStatisticByFan(betterproto.Message):
    fan_id: int = betterproto.uint32_field(1)
    sum: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AccountFanAchieved(betterproto.Message):
    mahjong_category: int = betterproto.uint32_field(1)
    fan: List["AccountStatisticByFan"] = betterproto.message_field(2)
    liujumanguan: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AccountDetailStatistic(betterproto.Message):
    game_mode: List["AccountStatisticByGameMode"] = betterproto.message_field(1)
    fan: List["AccountStatisticByFan"] = betterproto.message_field(2)
    liujumanguan: int = betterproto.uint32_field(3)
    fan_achieved: List["AccountFanAchieved"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class AccountDetailStatisticByCategory(betterproto.Message):
    category: int = betterproto.uint32_field(1)
    detail_statistic: "AccountDetailStatistic" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AccountDetailStatisticV2(betterproto.Message):
    friend_room_statistic: "AccountDetailStatistic" = betterproto.message_field(1)
    rank_statistic: "AccountDetailStatisticV2RankStatistic" = betterproto.message_field(
        2
    )
    customized_contest_statistic: "AccountDetailStatisticV2CustomizedContestStatistic" = betterproto.message_field(
        3
    )
    leisure_match_statistic: "AccountDetailStatistic" = betterproto.message_field(4)
    challenge_match_statistic: "AccountDetailStatisticV2ChallengeStatistic" = (
        betterproto.message_field(5)
    )
    activity_match_statistic: "AccountDetailStatistic" = betterproto.message_field(6)
    ab_match_statistic: "AccountDetailStatistic" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class AccountDetailStatisticV2RankStatistic(betterproto.Message):
    total_statistic: "AccountDetailStatisticV2RankStatisticRankData" = (
        betterproto.message_field(1)
    )
    month_statistic: "AccountDetailStatisticV2RankStatisticRankData" = (
        betterproto.message_field(2)
    )
    month_refresh_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AccountDetailStatisticV2RankStatisticRankData(betterproto.Message):
    all_level_statistic: "AccountDetailStatistic" = betterproto.message_field(1)
    level_data_list: List[
        "AccountDetailStatisticV2RankStatisticRankDataRankLevelData"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AccountDetailStatisticV2RankStatisticRankDataRankLevelData(betterproto.Message):
    rank_level: int = betterproto.uint32_field(1)
    statistic: "AccountDetailStatistic" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AccountDetailStatisticV2CustomizedContestStatistic(betterproto.Message):
    total_statistic: "AccountDetailStatistic" = betterproto.message_field(1)
    month_statistic: "AccountDetailStatistic" = betterproto.message_field(2)
    month_refresh_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AccountDetailStatisticV2ChallengeStatistic(betterproto.Message):
    all_season: "AccountDetailStatistic" = betterproto.message_field(1)
    season_data_list: List["AccountDetailStatisticV2ChallengeStatisticSeasonData"] = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class AccountDetailStatisticV2ChallengeStatisticSeasonData(betterproto.Message):
    season_id: int = betterproto.uint32_field(1)
    statistic: "AccountDetailStatistic" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AccountShiLian(betterproto.Message):
    step: int = betterproto.uint32_field(1)
    state: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ClientDeviceInfo(betterproto.Message):
    platform: str = betterproto.string_field(1)
    hardware: str = betterproto.string_field(2)
    os: str = betterproto.string_field(3)
    os_version: str = betterproto.string_field(4)
    is_browser: bool = betterproto.bool_field(5)
    software: str = betterproto.string_field(6)
    sale_platform: str = betterproto.string_field(7)
    hardware_vendor: str = betterproto.string_field(8)
    model_number: str = betterproto.string_field(9)
    screen_width: int = betterproto.uint32_field(10)
    screen_height: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class ClientVersionInfo(betterproto.Message):
    resource: str = betterproto.string_field(1)
    package: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Announcement(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    title: str = betterproto.string_field(2)
    content: str = betterproto.string_field(3)
    header_image: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class TaskProgress(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    counter: int = betterproto.uint32_field(2)
    achieved: bool = betterproto.bool_field(3)
    rewarded: bool = betterproto.bool_field(4)
    failed: bool = betterproto.bool_field(5)
    rewarded_time: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GameConfig(betterproto.Message):
    category: int = betterproto.uint32_field(1)
    mode: "GameMode" = betterproto.message_field(2)
    meta: "GameMetaData" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class RpgState(betterproto.Message):
    player_damaged: int = betterproto.uint32_field(1)
    monster_damaged: int = betterproto.uint32_field(2)
    monster_seq: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class RpgActivity(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    last_show_uuid: str = betterproto.string_field(5)
    last_played_uuid: str = betterproto.string_field(6)
    current_state: "RpgState" = betterproto.message_field(7)
    last_show_state: "RpgState" = betterproto.message_field(8)
    received_rewards: List[int] = betterproto.uint32_field(9)
    last_show_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class ActivityArenaData(betterproto.Message):
    win_count: int = betterproto.uint32_field(1)
    lose_count: int = betterproto.uint32_field(2)
    activity_id: int = betterproto.uint32_field(3)
    enter_time: int = betterproto.uint32_field(4)
    daily_enter_count: int = betterproto.uint32_field(5)
    daily_enter_time: int = betterproto.uint32_field(6)
    max_win_count: int = betterproto.uint32_field(7)
    total_win_count: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class FeedActivityData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    feed_count: int = betterproto.uint32_field(2)
    friend_receive_data: "FeedActivityDataCountWithTimeData" = (
        betterproto.message_field(3)
    )
    friend_send_data: "FeedActivityDataCountWithTimeData" = betterproto.message_field(4)
    gift_inbox: List["FeedActivityDataGiftBoxData"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class FeedActivityDataCountWithTimeData(betterproto.Message):
    count: int = betterproto.uint32_field(1)
    last_update_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FeedActivityDataGiftBoxData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    item_id: int = betterproto.uint32_field(2)
    count: int = betterproto.uint32_field(3)
    from_account_id: int = betterproto.uint32_field(4)
    time: int = betterproto.uint32_field(5)
    received: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class SegmentTaskProgress(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    counter: int = betterproto.uint32_field(2)
    achieved: bool = betterproto.bool_field(3)
    rewarded: bool = betterproto.bool_field(4)
    failed: bool = betterproto.bool_field(5)
    reward_count: int = betterproto.uint32_field(6)
    achieved_count: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class MineActivityData(betterproto.Message):
    dig_point: List["Point"] = betterproto.message_field(1)
    map: List["MineReward"] = betterproto.message_field(2)
    id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AccountActivityUpdate(betterproto.Message):
    mine_data: List["MineActivityData"] = betterproto.message_field(1)
    rpg_data: List["RpgActivity"] = betterproto.message_field(2)
    feed_data: List["ActivityFeedData"] = betterproto.message_field(3)
    spot_data: List["ActivitySpotData"] = betterproto.message_field(4)
    friend_gift_data: List["ActivityFriendGiftData"] = betterproto.message_field(5)
    upgrade_data: List["ActivityUpgradeData"] = betterproto.message_field(6)
    gacha_data: List["ActivityGachaUpdateData"] = betterproto.message_field(7)
    simulation_data: List["ActivitySimulationData"] = betterproto.message_field(8)
    combining_data: List["ActivityCombiningLqData"] = betterproto.message_field(9)
    village_data: List["ActivityVillageData"] = betterproto.message_field(10)
    festival_data: List["ActivityFestivalData"] = betterproto.message_field(11)
    island_data: List["ActivityIslandData"] = betterproto.message_field(12)
    amulet_data: List["ActivityAmuletData"] = betterproto.message_field(13)
    story_data: List["ActivityStoryData"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class ActivityCombiningWorkbench(betterproto.Message):
    craft_id: int = betterproto.uint32_field(1)
    pos: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivityCombiningMenuData(betterproto.Message):
    menu_group: int = betterproto.uint32_field(1)
    generated: List["ActivityCombiningMenuDataMenuRequire"] = betterproto.message_field(
        2
    )


@dataclass(eq=False, repr=False)
class ActivityCombiningMenuDataMenuRequire(betterproto.Message):
    level: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivityCombiningOrderData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    pos: int = betterproto.uint32_field(2)
    craft_id: int = betterproto.uint32_field(3)
    unlock_day: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ActivityCombiningLqData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    workbench: List["ActivityCombiningWorkbench"] = betterproto.message_field(2)
    orders: List["ActivityCombiningOrderData"] = betterproto.message_field(3)
    recycle_bin: "ActivityCombiningWorkbench" = betterproto.message_field(4)
    unlocked_craft: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ActivityCombiningPoolData(betterproto.Message):
    group: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivityCombiningData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    workbench: List["ActivityCombiningWorkbench"] = betterproto.message_field(2)
    orders: List["ActivityCombiningOrderData"] = betterproto.message_field(3)
    recycle_bin: "ActivityCombiningWorkbench" = betterproto.message_field(4)
    menu: "ActivityCombiningMenuData" = betterproto.message_field(5)
    current_order_id: int = betterproto.uint32_field(6)
    bonus: "ActivityCombiningDataBonusData" = betterproto.message_field(7)
    unlocked_craft: List[int] = betterproto.uint32_field(8)
    craft_pool: List["ActivityCombiningPoolData"] = betterproto.message_field(9)
    order_pool: List["ActivityCombiningPoolData"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class ActivityCombiningDataBonusData(betterproto.Message):
    count: int = betterproto.uint32_field(1)
    update_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class VillageReward(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class VillageBuildingData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    reward: List["VillageReward"] = betterproto.message_field(3)
    workers: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class VillageTripData(betterproto.Message):
    start_round: int = betterproto.uint32_field(1)
    dest_id: int = betterproto.uint32_field(2)
    reward: List["VillageReward"] = betterproto.message_field(3)
    level: int = betterproto.uint32_field(4)
    info: "VillageTargetInfo" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class VillageTaskData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    completed_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class VillageTargetInfo(betterproto.Message):
    nickname: str = betterproto.string_field(1)
    avatar: int = betterproto.uint32_field(2)
    avatar_frame: int = betterproto.uint32_field(3)
    title: int = betterproto.uint32_field(4)
    verified: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ActivityVillageData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    buildings: List["VillageBuildingData"] = betterproto.message_field(2)
    trip: List["VillageTripData"] = betterproto.message_field(3)
    tasks: List["VillageTaskData"] = betterproto.message_field(6)
    round: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class TimeCounterData(betterproto.Message):
    count: int = betterproto.uint32_field(1)
    update_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SignedTimeCounterData(betterproto.Message):
    count: int = betterproto.int32_field(1)
    update_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FestivalProposalData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    proposal_id: int = betterproto.uint32_field(2)
    pos: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ActivityFestivalData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    proposal_list: List["FestivalProposalData"] = betterproto.message_field(3)
    event_list: List[int] = betterproto.uint32_field(4)
    buy_record: "SignedTimeCounterData" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class IslandBagItemData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    pos: List[int] = betterproto.uint32_field(2)
    rotate: int = betterproto.uint32_field(3)
    goods_id: int = betterproto.uint32_field(4)
    price: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class IslandBagData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    matrix: str = betterproto.string_field(2)
    items: List["IslandBagItemData"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class IslandGoodsData(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    count: int = betterproto.int32_field(2)
    update_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class IslandZoneData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    currency_used: "SignedTimeCounterData" = betterproto.message_field(2)
    goods_records: List["IslandGoodsData"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ActivityIslandData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    zone: int = betterproto.uint32_field(2)
    bags: List["IslandBagData"] = betterproto.message_field(3)
    zones: List["IslandZoneData"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class AmuletEffectData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    uid: int = betterproto.uint32_field(2)
    store: List[int] = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class AmuletBuffData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    store: List[int] = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class AmuletGameShopGoods(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    sold: bool = betterproto.bool_field(2)
    goods_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AmuletActivityTingInfo(betterproto.Message):
    tile: str = betterproto.string_field(1)
    fan: int = betterproto.uint64_field(2)
    ting_tile: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class AmuletShowDesktopTileData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    pos: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AmuletGameOperation(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    gang: List["AmuletGameOperationGangTiles"] = betterproto.message_field(2)
    effect_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AmuletGameOperationGangTiles(betterproto.Message):
    tiles: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AmuletGameShopData(betterproto.Message):
    goods: List["AmuletGameShopGoods"] = betterproto.message_field(1)
    effect_list: List[int] = betterproto.uint32_field(2)
    shop_refresh_count: int = betterproto.uint32_field(3)
    refresh_price: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AmuletGameUpdateData(betterproto.Message):
    tile_replace: List["AmuletTile"] = betterproto.message_field(1)
    tian_dora: List[str] = betterproto.string_field(2)
    dora: List[int] = betterproto.uint32_field(4)
    hands: List[int] = betterproto.uint32_field(7)
    ming: List["AmuletMingInfo"] = betterproto.message_field(8)
    effect_list: List["AmuletEffectData"] = betterproto.message_field(9)
    buff_list: List["AmuletEffectData"] = betterproto.message_field(10)
    point: str = betterproto.string_field(13)
    coin: int = betterproto.uint32_field(14)
    stage: int = betterproto.uint32_field(22)
    desktop_remain: int = betterproto.uint32_field(26)
    show_desktop_tiles: List["AmuletShowDesktopTileData"] = betterproto.message_field(
        28
    )
    ting_list: List["AmuletActivityTingInfo"] = betterproto.message_field(30)
    next_operation: List["AmuletGameOperation"] = betterproto.message_field(31)
    used_desktop: List[int] = betterproto.uint32_field(34)
    highest_hu: "ActivityAmuletHuRecord" = betterproto.message_field(35)
    records: "ActivityAmuletRecord" = betterproto.message_field(36)


@dataclass(eq=False, repr=False)
class AmuletGameRecordData(betterproto.Message):
    key: int = betterproto.uint32_field(1)
    int_value: int = betterproto.int32_field(2)
    str_value: str = betterproto.string_field(3)
    int_arr_value: List[int] = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class AmuletGameData(betterproto.Message):
    pool: List["AmuletTile"] = betterproto.message_field(1)
    tile_replace: List["AmuletTile"] = betterproto.message_field(2)
    tian_dora: List[str] = betterproto.string_field(3)
    mountain: List[int] = betterproto.uint32_field(4)
    dora: List[int] = betterproto.uint32_field(5)
    hands: List[int] = betterproto.uint32_field(7)
    ming: List["AmuletMingInfo"] = betterproto.message_field(8)
    effect_list: List["AmuletEffectData"] = betterproto.message_field(9)
    buff_list: List["AmuletBuffData"] = betterproto.message_field(10)
    level: int = betterproto.uint32_field(11)
    point: str = betterproto.string_field(13)
    coin: int = betterproto.uint32_field(14)
    shop: "AmuletGameShopData" = betterproto.message_field(16)
    used: List[int] = betterproto.uint32_field(20)
    boss_buff: List[int] = betterproto.uint32_field(21)
    stage: int = betterproto.uint32_field(22)
    desktop: List[int] = betterproto.uint32_field(24)
    show_desktop: List[int] = betterproto.uint32_field(25)
    desktop_remain: int = betterproto.uint32_field(26)
    free_effect_list: List[int] = betterproto.uint32_field(27)
    show_desktop_tiles: List["AmuletShowDesktopTileData"] = betterproto.message_field(
        28
    )
    change_tile_count: int = betterproto.uint32_field(29)
    ting_list: List["AmuletActivityTingInfo"] = betterproto.message_field(30)
    next_operation: List["AmuletGameOperation"] = betterproto.message_field(31)
    shop_buff_list: List["AmuletBuffData"] = betterproto.message_field(32)
    remain_change_tile_count: int = betterproto.int32_field(33)
    used_desktop: List[int] = betterproto.uint32_field(34)
    after_gang: int = betterproto.uint32_field(35)
    record_data: List["AmuletGameRecordData"] = betterproto.message_field(36)
    skill_buff_list: List["AmuletBuffData"] = betterproto.message_field(37)
    max_effect_count: int = betterproto.uint32_field(38)
    highest_hu: "ActivityAmuletHuRecord" = betterproto.message_field(39)
    total_consumed_coin: int = betterproto.uint32_field(40)
    boss_buff_id: List[int] = betterproto.uint32_field(41)


@dataclass(eq=False, repr=False)
class ActivityAmuletUpdateData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    game_update: "AmuletGameUpdateData" = betterproto.message_field(2)
    game_empty: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class AmuletSkillData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivityAmuletUpgradeData(betterproto.Message):
    skill: List["AmuletSkillData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ActivityAmuletRecord(betterproto.Message):
    effect_gain_count: int = betterproto.uint32_field(1)
    hu_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivityAmuletHuRecord(betterproto.Message):
    point: str = betterproto.string_field(1)
    pai: str = betterproto.string_field(2)
    fan: int = betterproto.uint64_field(3)
    base: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class ActivityAmuletIllustratedBookData(betterproto.Message):
    effect_collection: List[int] = betterproto.uint32_field(1)
    highest_hu: "ActivityAmuletHuRecord" = betterproto.message_field(2)
    highest_level: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ActivityAmuletData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    game: "AmuletGameData" = betterproto.message_field(2)
    version: int = betterproto.uint32_field(3)
    upgrade: "ActivityAmuletUpgradeData" = betterproto.message_field(4)
    illustrated_book: "ActivityAmuletIllustratedBookData" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ActivityFeedData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    feed_count: int = betterproto.uint32_field(2)
    friend_receive_data: "ActivityFeedDataCountWithTimeData" = (
        betterproto.message_field(3)
    )
    friend_send_data: "ActivityFeedDataCountWithTimeData" = betterproto.message_field(4)
    gift_inbox: List["ActivityFeedDataGiftBoxData"] = betterproto.message_field(5)
    max_inbox_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ActivityFeedDataCountWithTimeData(betterproto.Message):
    count: int = betterproto.uint32_field(1)
    last_update_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivityFeedDataGiftBoxData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    item_id: int = betterproto.uint32_field(2)
    count: int = betterproto.uint32_field(3)
    from_account_id: int = betterproto.uint32_field(4)
    time: int = betterproto.uint32_field(5)
    received: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class UnlockedStoryData(betterproto.Message):
    story_id: int = betterproto.uint32_field(1)
    finished_ending: List[int] = betterproto.uint32_field(2)
    rewarded_ending: List[int] = betterproto.uint32_field(3)
    finish_rewarded: int = betterproto.uint32_field(4)
    all_finish_rewarded: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ActivityStoryData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    unlocked_story: List["UnlockedStoryData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ActivityFriendGiftData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    max_inbox_id: int = betterproto.uint32_field(2)
    receive_data: "ActivityFriendGiftDataCountWithTimeData" = betterproto.message_field(
        3
    )
    send_data: "ActivityFriendGiftDataCountWithTimeData" = betterproto.message_field(4)
    gift_inbox: List["ActivityFriendGiftDataGiftBoxData"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ActivityFriendGiftDataCountWithTimeData(betterproto.Message):
    count: int = betterproto.uint32_field(1)
    last_update_time: int = betterproto.uint32_field(2)
    send_friend_id: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ActivityFriendGiftDataGiftBoxData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    item_id: int = betterproto.uint32_field(2)
    count: int = betterproto.uint32_field(3)
    from_account_id: int = betterproto.uint32_field(4)
    time: int = betterproto.uint32_field(5)
    received: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ActivityUpgradeData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    groups: List["ActivityUpgradeDataLevelGroup"] = betterproto.message_field(2)
    received_level: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ActivityUpgradeDataLevelGroup(betterproto.Message):
    group_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GachaRecord(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivityGachaData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    gained: List["GachaRecord"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ActivityGachaUpdateData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    gained: List["GachaRecord"] = betterproto.message_field(2)
    remain_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ActivitySimulationGameRecordMessage(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    args: List[int] = betterproto.uint32_field(2)
    xun: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ActivitySimulationGameRecord(betterproto.Message):
    round: int = betterproto.uint32_field(1)
    seats: List[int] = betterproto.uint32_field(2)
    uuid: str = betterproto.string_field(3)
    start_time: int = betterproto.uint32_field(4)
    scores: List[int] = betterproto.int32_field(5)
    messages: List["ActivitySimulationGameRecordMessage"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class ActivitySimulationDailyContest(betterproto.Message):
    day: int = betterproto.uint32_field(1)
    characters: List[int] = betterproto.uint32_field(2)
    records: List["ActivitySimulationGameRecord"] = betterproto.message_field(3)
    round: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ActivitySimulationTrainRecord(betterproto.Message):
    time: int = betterproto.uint32_field(1)
    modify_stats: List[int] = betterproto.int32_field(2)
    final_stats: List[int] = betterproto.uint32_field(3)
    type: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ActivitySimulationData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    stats: List[int] = betterproto.uint32_field(2)
    stamina_update_time: int = betterproto.uint32_field(3)
    daily_contest: List["ActivitySimulationDailyContest"] = betterproto.message_field(4)
    train_records: List["ActivitySimulationTrainRecord"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ActivitySpotData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    spots: List["ActivitySpotDataSpotData"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ActivitySpotDataSpotData(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    rewarded: int = betterproto.uint32_field(2)
    unlocked_ending: List[int] = betterproto.uint32_field(3)
    unlocked: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AccountActiveState(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    login_time: int = betterproto.uint32_field(2)
    logout_time: int = betterproto.uint32_field(3)
    is_online: bool = betterproto.bool_field(4)
    playing: "AccountPlayingGame" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class Friend(betterproto.Message):
    base: "PlayerBaseView" = betterproto.message_field(1)
    state: "AccountActiveState" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Point(betterproto.Message):
    x: int = betterproto.uint32_field(1)
    y: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MineReward(betterproto.Message):
    point: "Point" = betterproto.message_field(1)
    reward_id: int = betterproto.uint32_field(2)
    received: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class GameLiveUnit(betterproto.Message):
    timestamp: int = betterproto.uint32_field(1)
    action_category: int = betterproto.uint32_field(2)
    action_data: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class GameLiveSegment(betterproto.Message):
    actions: List["GameLiveUnit"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GameLiveSegmentUri(betterproto.Message):
    segment_id: int = betterproto.uint32_field(1)
    segment_uri: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GameLiveHead(betterproto.Message):
    uuid: str = betterproto.string_field(1)
    start_time: int = betterproto.uint32_field(2)
    game_config: "GameConfig" = betterproto.message_field(3)
    players: List["PlayerGameView"] = betterproto.message_field(4)
    seat_list: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class GameNewRoundState(betterproto.Message):
    seat_states: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GameEndAction(betterproto.Message):
    state: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GameNoopAction(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CommentItem(betterproto.Message):
    comment_id: int = betterproto.uint32_field(1)
    timestamp: int = betterproto.uint32_field(2)
    commenter: "PlayerBaseView" = betterproto.message_field(3)
    content: str = betterproto.string_field(4)
    is_banned: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class RollingNotice(betterproto.Message):
    content: str = betterproto.string_field(2)
    start_time: int = betterproto.uint32_field(3)
    end_time: int = betterproto.uint32_field(4)
    repeat_interval: int = betterproto.uint32_field(5)
    repeat_time: List[int] = betterproto.uint32_field(7)
    repeat_type: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class MaintainNotice(betterproto.Message):
    maintain_time: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class BillingGoods(betterproto.Message):
    id: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    desc: str = betterproto.string_field(3)
    icon: str = betterproto.string_field(4)
    resource_id: int = betterproto.uint32_field(5)
    resource_count: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class BillShortcut(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    deal_price: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BillingProduct(betterproto.Message):
    goods: "BillingGoods" = betterproto.message_field(1)
    currency_code: str = betterproto.string_field(2)
    currency_price: int = betterproto.uint32_field(3)
    sort_weight: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class Character(betterproto.Message):
    charid: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    exp: int = betterproto.uint32_field(3)
    views: List["ViewSlot"] = betterproto.message_field(4)
    skin: int = betterproto.uint32_field(5)
    is_upgraded: bool = betterproto.bool_field(6)
    extra_emoji: List[int] = betterproto.uint32_field(7)
    rewarded_level: List[int] = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class BuyRecord(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ZhpShop(betterproto.Message):
    goods: List[int] = betterproto.uint32_field(1)
    buy_records: List["BuyRecord"] = betterproto.message_field(2)
    free_refresh: "ZhpShopRefreshCount" = betterproto.message_field(3)
    cost_refresh: "ZhpShopRefreshCount" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ZhpShopRefreshCount(betterproto.Message):
    count: int = betterproto.uint32_field(1)
    limit: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MonthTicketInfo(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    end_time: int = betterproto.uint32_field(2)
    last_pay_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ShopInfo(betterproto.Message):
    zhp: "ZhpShop" = betterproto.message_field(1)
    buy_records: List["BuyRecord"] = betterproto.message_field(2)
    last_refresh_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ChangeNicknameRecord(betterproto.Message):
    from_: str = betterproto.string_field(1)
    to: str = betterproto.string_field(2)
    time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ServerSettings(betterproto.Message):
    payment_setting: "PaymentSetting" = betterproto.message_field(3)
    payment_setting_v2: "PaymentSettingV2" = betterproto.message_field(4)
    nickname_setting: "NicknameSetting" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class NicknameSetting(betterproto.Message):
    enable: int = betterproto.uint32_field(1)
    nicknames: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PaymentSettingV2(betterproto.Message):
    open_payment: int = betterproto.uint32_field(1)
    payment_platforms: List["PaymentSettingV2PaymentSettingUnit"] = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class PaymentSettingV2PaymentMaintain(betterproto.Message):
    start_time: int = betterproto.uint32_field(1)
    end_time: int = betterproto.uint32_field(2)
    goods_click_action: int = betterproto.uint32_field(3)
    goods_click_text: str = betterproto.string_field(4)
    enabled_channel: List[str] = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class PaymentSettingV2PaymentSettingUnit(betterproto.Message):
    platform: str = betterproto.string_field(1)
    is_show: bool = betterproto.bool_field(2)
    goods_click_action: int = betterproto.uint32_field(3)
    goods_click_text: str = betterproto.string_field(4)
    maintain: "PaymentSettingV2PaymentMaintain" = betterproto.message_field(5)
    enable_for_frozen_account: bool = betterproto.bool_field(6)
    extra_data: str = betterproto.string_field(7)
    enabled_channel: List[str] = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class PaymentSetting(betterproto.Message):
    open_payment: int = betterproto.uint32_field(1)
    payment_info_show_type: int = betterproto.uint32_field(2)
    payment_info: str = betterproto.string_field(3)
    wechat: "PaymentSettingWechatData" = betterproto.message_field(4)
    alipay: "PaymentSettingAlipayData" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class PaymentSettingWechatData(betterproto.Message):
    disable_create: bool = betterproto.bool_field(1)
    payment_source_platform: int = betterproto.uint32_field(2)
    enable_credit: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class PaymentSettingAlipayData(betterproto.Message):
    disable_create: bool = betterproto.bool_field(1)
    payment_source_platform: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AccountSetting(betterproto.Message):
    key: int = betterproto.uint32_field(1)
    value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ChestData(betterproto.Message):
    chest_id: int = betterproto.uint32_field(1)
    total_open_count: int = betterproto.uint32_field(2)
    consume_count: int = betterproto.uint32_field(3)
    face_black_count: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ChestDataV2(betterproto.Message):
    chest_id: int = betterproto.uint32_field(1)
    total_open_count: int = betterproto.uint32_field(2)
    face_black_count: int = betterproto.uint32_field(3)
    ticket_face_black_count: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class FaithData(betterproto.Message):
    faith_id: int = betterproto.uint32_field(1)
    total_open_count: int = betterproto.uint32_field(2)
    consume_count: int = betterproto.uint32_field(3)
    modify_count: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class CustomizedContestBase(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    contest_id: int = betterproto.uint32_field(2)
    contest_name: str = betterproto.string_field(3)
    state: int = betterproto.uint32_field(4)
    creator_id: int = betterproto.uint32_field(5)
    create_time: int = betterproto.uint32_field(6)
    start_time: int = betterproto.uint32_field(7)
    finish_time: int = betterproto.uint32_field(8)
    open: bool = betterproto.bool_field(9)
    contest_type: int = betterproto.uint32_field(10)
    public_notice: str = betterproto.string_field(11)
    check_state: int = betterproto.uint32_field(12)
    checking_name: str = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class CustomizedContestExtend(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    public_notice: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CustomizedContestAbstract(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    contest_id: int = betterproto.uint32_field(2)
    contest_name: str = betterproto.string_field(3)
    state: int = betterproto.uint32_field(4)
    creator_id: int = betterproto.uint32_field(5)
    create_time: int = betterproto.uint32_field(6)
    start_time: int = betterproto.uint32_field(7)
    finish_time: int = betterproto.uint32_field(8)
    open: bool = betterproto.bool_field(9)
    public_notice: str = betterproto.string_field(10)
    contest_type: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class CustomizedContestDetail(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    contest_id: int = betterproto.uint32_field(2)
    contest_name: str = betterproto.string_field(3)
    state: int = betterproto.uint32_field(4)
    creator_id: int = betterproto.uint32_field(5)
    create_time: int = betterproto.uint32_field(6)
    start_time: int = betterproto.uint32_field(7)
    finish_time: int = betterproto.uint32_field(8)
    open: bool = betterproto.bool_field(9)
    rank_rule: int = betterproto.uint32_field(10)
    game_mode: "GameMode" = betterproto.message_field(11)
    private_notice: str = betterproto.string_field(12)
    observer_switch: int = betterproto.uint32_field(13)
    emoji_switch: int = betterproto.uint32_field(14)
    contest_type: int = betterproto.uint32_field(15)
    disable_broadcast: int = betterproto.uint32_field(16)
    signup_start_time: int = betterproto.uint32_field(17)
    signup_end_time: int = betterproto.uint32_field(18)
    signup_type: int = betterproto.uint32_field(19)
    auto_match: int = betterproto.uint32_field(20)


@dataclass(eq=False, repr=False)
class CustomizedContestPlayerReport(betterproto.Message):
    rank_rule: int = betterproto.uint32_field(1)
    rank: int = betterproto.uint32_field(2)
    point: int = betterproto.int32_field(3)
    game_ranks: List[int] = betterproto.uint32_field(4)
    total_game_count: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class RecordGame(betterproto.Message):
    uuid: str = betterproto.string_field(1)
    start_time: int = betterproto.uint32_field(2)
    end_time: int = betterproto.uint32_field(3)
    config: "GameConfig" = betterproto.message_field(5)
    accounts: List["RecordGameAccountInfo"] = betterproto.message_field(11)
    result: "GameEndResult" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class RecordGameAccountInfo(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    seat: int = betterproto.uint32_field(2)
    nickname: str = betterproto.string_field(3)
    avatar_id: int = betterproto.uint32_field(4)
    character: "Character" = betterproto.message_field(5)
    title: int = betterproto.uint32_field(6)
    level: "AccountLevel" = betterproto.message_field(7)
    level3: "AccountLevel" = betterproto.message_field(8)
    avatar_frame: int = betterproto.uint32_field(9)
    verified: int = betterproto.uint32_field(10)
    views: List["ViewSlot"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class RecordListEntry(betterproto.Message):
    version: int = betterproto.uint32_field(1)
    uuid: str = betterproto.string_field(2)
    start_time: int = betterproto.uint32_field(3)
    end_time: int = betterproto.uint32_field(4)
    tag: int = betterproto.uint32_field(5)
    subtag: int = betterproto.uint32_field(6)
    players: List["RecordPlayerResult"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class RecordPlayerResult(betterproto.Message):
    rank: int = betterproto.uint32_field(1)
    account_id: int = betterproto.uint32_field(2)
    nickname: str = betterproto.string_field(3)
    level: "AccountLevel" = betterproto.message_field(4)
    level3: "AccountLevel" = betterproto.message_field(5)
    pt: int = betterproto.int32_field(7)
    point: int = betterproto.int32_field(8)
    max_hu_type: int = betterproto.uint32_field(9)
    action_liqi: int = betterproto.uint32_field(10)
    action_rong: int = betterproto.uint32_field(11)
    action_zimo: int = betterproto.uint32_field(12)
    action_chong: int = betterproto.uint32_field(13)
    verified: int = betterproto.uint32_field(14)


@dataclass(eq=False, repr=False)
class CustomizedContestGameStart(betterproto.Message):
    players: List["CustomizedContestGameStartItem"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CustomizedContestGameStartItem(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    nickname: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CustomizedContestGameEnd(betterproto.Message):
    players: List["CustomizedContestGameEndItem"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CustomizedContestGameEndItem(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    nickname: str = betterproto.string_field(2)
    total_point: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class Activity(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    start_time: int = betterproto.uint32_field(2)
    end_time: int = betterproto.uint32_field(3)
    type: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ExchangeRecord(betterproto.Message):
    exchange_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivityAccumulatedPointData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    point: int = betterproto.int32_field(2)
    gained_reward_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ActivityRankPointData(betterproto.Message):
    leaderboard_id: int = betterproto.uint32_field(1)
    point: int = betterproto.int32_field(2)
    gained_reward: bool = betterproto.bool_field(3)
    gainable_time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GameRoundHuData(betterproto.Message):
    hupai: "GameRoundHuDataHuPai" = betterproto.message_field(1)
    fans: List["GameRoundHuDataFan"] = betterproto.message_field(2)
    score: int = betterproto.uint32_field(3)
    xun: int = betterproto.uint32_field(4)
    title_id: int = betterproto.uint32_field(5)
    fan_sum: int = betterproto.uint32_field(6)
    fu_sum: int = betterproto.uint32_field(7)
    yakuman_count: int = betterproto.uint32_field(8)
    biao_dora_count: int = betterproto.uint32_field(9)
    red_dora_count: int = betterproto.uint32_field(10)
    li_dora_count: int = betterproto.uint32_field(11)
    babei_count: int = betterproto.uint32_field(12)
    xuan_shang_count: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class GameRoundHuDataHuPai(betterproto.Message):
    tile: str = betterproto.string_field(1)
    seat: int = betterproto.uint32_field(2)
    liqi: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GameRoundHuDataFan(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    fan: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GameRoundPlayerResult(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    hands: List[str] = betterproto.string_field(2)
    ming: List[str] = betterproto.string_field(3)
    liqi_type: int = betterproto.uint32_field(4)
    is_fulu: bool = betterproto.bool_field(5)
    is_liujumanguan: bool = betterproto.bool_field(6)
    lian_zhuang: int = betterproto.uint32_field(7)
    hu: "GameRoundHuData" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class GameRoundPlayer(betterproto.Message):
    score: int = betterproto.int32_field(1)
    rank: int = betterproto.uint32_field(2)
    result: "GameRoundPlayerResult" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GameRoundSnapshot(betterproto.Message):
    ju: int = betterproto.uint32_field(1)
    ben: int = betterproto.uint32_field(2)
    players: List["GameRoundPlayer"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GameFinalSnapshot(betterproto.Message):
    uuid: str = betterproto.string_field(1)
    state: int = betterproto.uint32_field(2)
    category: int = betterproto.uint32_field(3)
    mode: "GameMode" = betterproto.message_field(4)
    meta: "GameMetaData" = betterproto.message_field(5)
    calculate_param: "GameFinalSnapshotCalculateParam" = betterproto.message_field(6)
    create_time: int = betterproto.uint32_field(7)
    start_time: int = betterproto.uint32_field(8)
    finish_time: int = betterproto.uint32_field(9)
    seats: List["GameFinalSnapshotGameSeat"] = betterproto.message_field(10)
    rounds: List["GameRoundSnapshot"] = betterproto.message_field(11)
    account_views: List["PlayerGameView"] = betterproto.message_field(12)
    final_players: List["GameFinalSnapshotFinalPlayer"] = betterproto.message_field(13)
    afk_info: List["GameFinalSnapshotAfkInfo"] = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class GameFinalSnapshotCalculateParam(betterproto.Message):
    init_point: int = betterproto.uint32_field(1)
    jingsuanyuandian: int = betterproto.uint32_field(2)
    rank_points: List[int] = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class GameFinalSnapshotGameSeat(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    account_id: int = betterproto.uint32_field(2)
    notify_endpoint: "NetworkEndpoint" = betterproto.message_field(3)
    client_address: str = betterproto.string_field(4)
    is_connected: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class GameFinalSnapshotFinalPlayer(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    total_point: int = betterproto.int32_field(2)
    part_point_1: int = betterproto.int32_field(3)
    part_point_2: int = betterproto.int32_field(4)
    grading_score: int = betterproto.int32_field(5)
    gold: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class GameFinalSnapshotAfkInfo(betterproto.Message):
    deal_tile_count: int = betterproto.uint32_field(1)
    moqie_count: int = betterproto.uint32_field(2)
    seat: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class RecordCollectedData(betterproto.Message):
    uuid: str = betterproto.string_field(1)
    remarks: str = betterproto.string_field(2)
    start_time: int = betterproto.uint32_field(3)
    end_time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ContestDetailRule(betterproto.Message):
    init_point: int = betterproto.uint32_field(5)
    fandian: int = betterproto.uint32_field(6)
    can_jifei: bool = betterproto.bool_field(7)
    tianbian_value: int = betterproto.uint32_field(8)
    liqibang_value: int = betterproto.uint32_field(9)
    changbang_value: int = betterproto.uint32_field(10)
    noting_fafu_1: int = betterproto.uint32_field(11)
    noting_fafu_2: int = betterproto.uint32_field(12)
    noting_fafu_3: int = betterproto.uint32_field(13)
    have_liujumanguan: bool = betterproto.bool_field(14)
    have_qieshangmanguan: bool = betterproto.bool_field(15)
    have_biao_dora: bool = betterproto.bool_field(16)
    have_gang_biao_dora: bool = betterproto.bool_field(17)
    ming_dora_immediately_open: bool = betterproto.bool_field(18)
    have_li_dora: bool = betterproto.bool_field(19)
    have_gang_li_dora: bool = betterproto.bool_field(20)
    have_sifenglianda: bool = betterproto.bool_field(21)
    have_sigangsanle: bool = betterproto.bool_field(22)
    have_sijializhi: bool = betterproto.bool_field(23)
    have_jiuzhongjiupai: bool = betterproto.bool_field(24)
    have_sanjiahele: bool = betterproto.bool_field(25)
    have_toutiao: bool = betterproto.bool_field(26)
    have_helelianzhuang: bool = betterproto.bool_field(27)
    have_helezhongju: bool = betterproto.bool_field(28)
    have_tingpailianzhuang: bool = betterproto.bool_field(29)
    have_tingpaizhongju: bool = betterproto.bool_field(30)
    have_yifa: bool = betterproto.bool_field(31)
    have_nanruxiru: bool = betterproto.bool_field(32)
    jingsuanyuandian: int = betterproto.uint32_field(33)
    shunweima_2: int = betterproto.int32_field(34)
    shunweima_3: int = betterproto.int32_field(35)
    shunweima_4: int = betterproto.int32_field(36)
    bianjietishi: bool = betterproto.bool_field(37)
    ai_level: int = betterproto.uint32_field(38)
    have_zimosun: bool = betterproto.bool_field(39)
    disable_multi_yukaman: bool = betterproto.bool_field(40)
    guyi_mode: int = betterproto.uint32_field(41)
    disable_leijiyiman: bool = betterproto.bool_field(42)
    dora3_mode: int = betterproto.uint32_field(43)
    xuezhandaodi: int = betterproto.uint32_field(44)
    huansanzhang: int = betterproto.uint32_field(45)
    chuanma: int = betterproto.uint32_field(46)
    disable_double_yakuman: int = betterproto.uint32_field(62)
    disable_composite_yakuman: int = betterproto.uint32_field(63)
    enable_shiti: int = betterproto.uint32_field(64)
    enable_nontsumo_liqi: int = betterproto.uint32_field(65)
    disable_double_wind_four_fu: int = betterproto.uint32_field(66)
    disable_angang_guoshi: int = betterproto.uint32_field(67)
    enable_renhe: int = betterproto.uint32_field(68)
    enable_baopai_extend_settings: int = betterproto.uint32_field(69)
    fanfu: int = betterproto.uint32_field(70)


@dataclass(eq=False, repr=False)
class ContestDetailRuleV2(betterproto.Message):
    game_rule: "ContestDetailRule" = betterproto.message_field(1)
    extra_rule: "ContestDetailRuleV2ExtraRule" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ContestDetailRuleV2ExtraRule(betterproto.Message):
    required_level: int = betterproto.uint32_field(1)
    max_game_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GameRuleSetting(betterproto.Message):
    round_type: int = betterproto.uint32_field(1)
    shiduan: bool = betterproto.bool_field(2)
    dora_count: int = betterproto.uint32_field(3)
    thinking_type: int = betterproto.uint32_field(4)
    use_detail_rule: bool = betterproto.bool_field(5)
    detail_rule_v2: "ContestDetailRuleV2" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class RecordTingPaiInfo(betterproto.Message):
    tile: str = betterproto.string_field(1)
    haveyi: bool = betterproto.bool_field(2)
    yiman: bool = betterproto.bool_field(3)
    count: int = betterproto.uint32_field(4)
    fu: int = betterproto.uint32_field(5)
    biao_dora_count: int = betterproto.uint32_field(6)
    yiman_zimo: bool = betterproto.bool_field(7)
    count_zimo: int = betterproto.uint32_field(8)
    fu_zimo: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class RecordNoTilePlayerInfo(betterproto.Message):
    tingpai: bool = betterproto.bool_field(3)
    hand: List[str] = betterproto.string_field(4)
    tings: List["RecordTingPaiInfo"] = betterproto.message_field(5)
    liuman: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class RecordHuleInfo(betterproto.Message):
    hand: List[str] = betterproto.string_field(1)
    ming: List[str] = betterproto.string_field(2)
    hu_tile: str = betterproto.string_field(3)
    seat: int = betterproto.uint32_field(4)
    zimo: bool = betterproto.bool_field(5)
    qinjia: bool = betterproto.bool_field(6)
    liqi: bool = betterproto.bool_field(7)
    doras: List[str] = betterproto.string_field(8)
    li_doras: List[str] = betterproto.string_field(9)
    yiman: bool = betterproto.bool_field(10)
    count: int = betterproto.uint32_field(11)
    fans: List["RecordHuleInfoRecordFanInfo"] = betterproto.message_field(12)
    fu: int = betterproto.uint32_field(13)
    point_zimo_qin: int = betterproto.uint32_field(14)
    point_zimo_xian: int = betterproto.uint32_field(15)
    title_id: int = betterproto.uint32_field(16)
    point_sum: int = betterproto.uint32_field(17)
    dadian: int = betterproto.uint32_field(18)
    is_jue_zhang: bool = betterproto.bool_field(19)
    xun: int = betterproto.uint32_field(20)
    ting_type: int = betterproto.uint32_field(21)
    ting_mian: int = betterproto.uint32_field(22)


@dataclass(eq=False, repr=False)
class RecordHuleInfoRecordFanInfo(betterproto.Message):
    val: int = betterproto.uint32_field(1)
    id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RecordHulesInfo(betterproto.Message):
    seat: int = betterproto.int32_field(1)
    hules: List["RecordHuleInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RecordLiujuInfo(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RecordNoTileInfo(betterproto.Message):
    liujumanguan: bool = betterproto.bool_field(1)
    players: List["RecordNoTilePlayerInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RecordLiqiInfo(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    score: int = betterproto.uint32_field(2)
    is_w: bool = betterproto.bool_field(3)
    is_zhen_ting: bool = betterproto.bool_field(4)
    xun: int = betterproto.uint32_field(5)
    is_success: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class RecordGangInfo(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    type: int = betterproto.uint32_field(2)
    pai: str = betterproto.string_field(3)
    is_dora: bool = betterproto.bool_field(4)
    xun: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class RecordBaBeiInfo(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    is_zi_mo: bool = betterproto.bool_field(2)
    is_chong: bool = betterproto.bool_field(3)
    is_bei: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class RecordPeiPaiInfo(betterproto.Message):
    dora_count: int = betterproto.uint32_field(1)
    r_dora_count: int = betterproto.uint32_field(2)
    bei_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class RecordRoundInfo(betterproto.Message):
    name: str = betterproto.string_field(1)
    chang: int = betterproto.uint32_field(2)
    ju: int = betterproto.uint32_field(3)
    ben: int = betterproto.uint32_field(4)
    scores: List[int] = betterproto.uint32_field(5)
    liqi_infos: List["RecordLiqiInfo"] = betterproto.message_field(7)
    gang_infos: List["RecordGangInfo"] = betterproto.message_field(8)
    peipai_infos: List["RecordPeiPaiInfo"] = betterproto.message_field(9)
    babai_infos: List["RecordBaBeiInfo"] = betterproto.message_field(10)
    hules_info: "RecordHulesInfo" = betterproto.message_field(11)
    liuju_info: "RecordLiujuInfo" = betterproto.message_field(12)
    no_tile_info: "RecordNoTileInfo" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class RecordAnalysisedData(betterproto.Message):
    round_infos: List["RecordRoundInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class VoteData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    vote: int = betterproto.uint32_field(2)
    count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ActivityBuffData(betterproto.Message):
    buff_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class AccountResourceSnapshot(betterproto.Message):
    bag_item: List["AccountResourceSnapshotBagItemSnapshot"] = (
        betterproto.message_field(1)
    )
    currency: List["AccountResourceSnapshotCurrencySnapshot"] = (
        betterproto.message_field(2)
    )
    title: "AccountResourceSnapshotTitleSnapshot" = betterproto.message_field(3)
    used_title: "AccountResourceSnapshotUsedTitleSnapshot" = betterproto.message_field(
        4
    )
    currency_convert: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class AccountResourceSnapshotBagItemSnapshot(betterproto.Message):
    resource_id: int = betterproto.uint32_field(1)
    resource_count: int = betterproto.uint32_field(2)
    resource_version: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AccountResourceSnapshotCurrencySnapshot(betterproto.Message):
    currency_id: int = betterproto.uint32_field(1)
    currency_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AccountResourceSnapshotTitleSnapshot(betterproto.Message):
    title_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AccountResourceSnapshotUsedTitleSnapshot(betterproto.Message):
    title_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AccountCharacterSnapshot(betterproto.Message):
    created_characters: List[int] = betterproto.uint32_field(1)
    removed_characters: List["Character"] = betterproto.message_field(2)
    modified_characters: List["Character"] = betterproto.message_field(3)
    main_character: "AccountCharacterSnapshotMainCharacterSnapshot" = (
        betterproto.message_field(4)
    )
    skins: "AccountCharacterSnapshotSkinsSnapshot" = betterproto.message_field(5)
    hidden_characters: "AccountCharacterSnapshotHiddenCharacter" = (
        betterproto.message_field(6)
    )


@dataclass(eq=False, repr=False)
class AccountCharacterSnapshotMainCharacterSnapshot(betterproto.Message):
    character_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AccountCharacterSnapshotSkinsSnapshot(betterproto.Message):
    skin_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AccountCharacterSnapshotHiddenCharacter(betterproto.Message):
    hidden_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AccountMailRecord(betterproto.Message):
    created_mails: List[int] = betterproto.uint32_field(1)
    removed_mails: List["AccountMailRecordMailSnapshot"] = betterproto.message_field(2)
    modified_mails: List["AccountMailRecordMailSnapshot"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AccountMailRecordMailSnapshot(betterproto.Message):
    mail_id: int = betterproto.uint32_field(1)
    reference_id: int = betterproto.uint32_field(2)
    create_time: int = betterproto.uint32_field(3)
    expire_time: int = betterproto.uint32_field(4)
    take_attachment: int = betterproto.uint32_field(5)
    attachments: List["RewardSlot"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class AccountAchievementSnapshot(betterproto.Message):
    achievements: List["AchievementProgress"] = betterproto.message_field(1)
    rewarded_group: "AccountAchievementSnapshotRewardedGroupSnapshot" = (
        betterproto.message_field(2)
    )
    version: "AccountAchievementSnapshotAchievementVersion" = betterproto.message_field(
        3
    )


@dataclass(eq=False, repr=False)
class AccountAchievementSnapshotRewardedGroupSnapshot(betterproto.Message):
    rewarded_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AccountAchievementSnapshotAchievementVersion(betterproto.Message):
    version: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AccountMiscSnapshot(betterproto.Message):
    faith_data: "FaithData" = betterproto.message_field(1)
    vip_reward_gained: "AccountMiscSnapshotAccountVipRewardSnapshot" = (
        betterproto.message_field(2)
    )
    vip: "AccountMiscSnapshotAccountVip" = betterproto.message_field(3)
    shop_info: "ShopInfo" = betterproto.message_field(4)
    month_ticket: "AccountMiscSnapshotAccountMonthTicketSnapshot" = (
        betterproto.message_field(5)
    )
    recharged: "AccountMiscSnapshotAccountRechargeInfo" = betterproto.message_field(6)
    month_ticket_v2: "AccountMiscSnapshotAccountMonthTicketSnapshotV2" = (
        betterproto.message_field(7)
    )


@dataclass(eq=False, repr=False)
class AccountMiscSnapshotAccountVipRewardSnapshot(betterproto.Message):
    rewarded: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AccountMiscSnapshotMonthTicketInfo(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    end_time: int = betterproto.uint32_field(2)
    last_pay_time: int = betterproto.uint32_field(3)
    record_start_time: int = betterproto.uint32_field(4)
    history: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class AccountMiscSnapshotAccountMonthTicketSnapshot(betterproto.Message):
    tickets: List["AccountMiscSnapshotMonthTicketInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AccountMiscSnapshotAccountVip(betterproto.Message):
    vip: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AccountMiscSnapshotAccountRechargeInfo(betterproto.Message):
    records: List["AccountMiscSnapshotAccountRechargeInfoRechargeRecord"] = (
        betterproto.message_field(1)
    )
    has_data: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AccountMiscSnapshotAccountRechargeInfoRechargeRecord(betterproto.Message):
    level: int = betterproto.uint32_field(1)
    recharge_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AccountMiscSnapshotAccountMonthTicketSnapshotV2(betterproto.Message):
    end_time: int = betterproto.uint32_field(1)
    last_pay_time: int = betterproto.uint32_field(2)
    record_start_time: int = betterproto.uint32_field(3)
    history: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AccountGiftCodeRecord(betterproto.Message):
    used_gift_code: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class AccSn(betterproto.Message):
    resource: "AccountResourceSnapshot" = betterproto.message_field(1)
    character: "AccountCharacterSnapshot" = betterproto.message_field(2)
    mail: "AccountMailRecord" = betterproto.message_field(3)
    achievement: "AccountAchievementSnapshot" = betterproto.message_field(4)
    misc: "AccountMiscSnapshot" = betterproto.message_field(5)
    gift_code: "AccountGiftCodeRecord" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class AccSnDa(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    time: int = betterproto.uint32_field(2)
    snapshot: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class TransparentData(betterproto.Message):
    method: str = betterproto.string_field(1)
    data: bytes = betterproto.bytes_field(2)
    session: str = betterproto.string_field(3)
    remote: "NetworkEndpoint" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class AmuletTile(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    tile: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AmuletFan(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    val: int = betterproto.int32_field(2)
    count: int = betterproto.uint32_field(3)
    yiman: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class AmuletReplace(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    tile: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AmuletMingInfo(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    tile_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AmuletActivityHookEffect(betterproto.Message):
    add_dora: List[int] = betterproto.uint32_field(1)
    add_tian_dora: List[str] = betterproto.string_field(3)
    add_effect: List[int] = betterproto.uint32_field(4)
    remove_effect: List[int] = betterproto.uint32_field(5)
    add_buff: List[int] = betterproto.uint32_field(6)
    remove_buff: List[int] = betterproto.uint32_field(7)
    add_coin: int = betterproto.int32_field(9)
    tile_replace: List["AmuletReplace"] = betterproto.message_field(11)
    add_fan: int = betterproto.int64_field(12)
    add_base: int = betterproto.int64_field(13)
    modify_fan: List["AmuletFan"] = betterproto.message_field(14)
    id: int = betterproto.uint32_field(15)
    modify_dora: bool = betterproto.bool_field(16)
    uid: int = betterproto.uint32_field(17)
    add_show_tile: List[int] = betterproto.uint32_field(18)
    add_dora_count: int = betterproto.int32_field(19)


@dataclass(eq=False, repr=False)
class AmuletHuleInfo(betterproto.Message):
    tile: int = betterproto.uint32_field(1)
    fan_list: List["AmuletFan"] = betterproto.message_field(2)
    fan: int = betterproto.uint64_field(3)
    point: str = betterproto.string_field(4)
    base: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class AmuletHuleOperateResult(betterproto.Message):
    hu_final: "AmuletHuleInfo" = betterproto.message_field(2)
    hu_base: "AmuletHuleInfo" = betterproto.message_field(3)
    hook_effect: List["AmuletActivityHookEffect"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class AmuletGangOperateResult(betterproto.Message):
    new_dora: List[int] = betterproto.uint32_field(4)
    hook_effect: List["AmuletActivityHookEffect"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class AmuletDealTileResult(betterproto.Message):
    tile: int = betterproto.uint32_field(1)
    hook_effect: List["AmuletActivityHookEffect"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class AmuletRoundResult(betterproto.Message):
    hu_result: "AmuletHuleOperateResult" = betterproto.message_field(2)
    deal_result: "AmuletDealTileResult" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class AmuletUpgradeResult(betterproto.Message):
    remain_rounds: List["AmuletRoundResult"] = betterproto.message_field(1)
    point_coin: int = betterproto.uint32_field(2)
    level_coin: int = betterproto.uint32_field(3)
    shop: "AmuletGameShopData" = betterproto.message_field(4)
    hook_effect: List["AmuletActivityHookEffect"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class QuestionnaireReward(betterproto.Message):
    resource_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class QuestionnaireDetail(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    version_id: int = betterproto.uint32_field(2)
    effective_time_start: int = betterproto.uint32_field(3)
    effective_time_end: int = betterproto.uint32_field(4)
    rewards: List["QuestionnaireReward"] = betterproto.message_field(5)
    banner_title: str = betterproto.string_field(6)
    title: str = betterproto.string_field(7)
    announcement_title: str = betterproto.string_field(8)
    announcement_content: str = betterproto.string_field(9)
    final_text: str = betterproto.string_field(10)
    questions: List["QuestionnaireQuestion"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class QuestionnaireQuestion(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    title: str = betterproto.string_field(2)
    describe: str = betterproto.string_field(3)
    type: str = betterproto.string_field(4)
    sub_type: str = betterproto.string_field(5)
    options: List["QuestionnaireQuestionQuestionOption"] = betterproto.message_field(6)
    option_random_sort: bool = betterproto.bool_field(7)
    require: bool = betterproto.bool_field(8)
    max_choice: int = betterproto.uint32_field(9)
    next_question: List["QuestionnaireQuestionNextQuestionData"] = (
        betterproto.message_field(10)
    )
    matrix_row: List[str] = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class QuestionnaireQuestionQuestionOption(betterproto.Message):
    label: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)
    allow_input: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class QuestionnaireQuestionNextQuestionData(betterproto.Message):
    target_question_id: int = betterproto.uint32_field(1)
    conditions: List[
        "QuestionnaireQuestionNextQuestionDataQuestionconditionWrapper"
    ] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class QuestionnaireQuestionNextQuestionDataQuestionCondition(betterproto.Message):
    question_id: int = betterproto.uint32_field(1)
    op: str = betterproto.string_field(2)
    values: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class QuestionnaireQuestionNextQuestionDataQuestionconditionWrapper(
    betterproto.Message
):
    conditions: List["QuestionnaireQuestionNextQuestionDataQuestionCondition"] = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QuestionnaireBrief(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    version_id: int = betterproto.uint32_field(2)
    effective_time_start: int = betterproto.uint32_field(3)
    effective_time_end: int = betterproto.uint32_field(4)
    rewards: List["QuestionnaireReward"] = betterproto.message_field(5)
    banner_title: str = betterproto.string_field(6)
    title: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class ResConnectionInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    client_endpoint: "NetworkEndpoint" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResFetchQueueInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    remain: int = betterproto.uint32_field(2)
    rank: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqOpenidCheck(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqSignupAccount(betterproto.Message):
    account: str = betterproto.string_field(1)
    password: str = betterproto.string_field(2)
    code: str = betterproto.string_field(3)
    type: int = betterproto.uint32_field(4)
    device: "ClientDeviceInfo" = betterproto.message_field(5)
    client_version_string: str = betterproto.string_field(6)
    tag: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class ResSignupAccount(betterproto.Message):
    error: "Error" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReqLogin(betterproto.Message):
    account: str = betterproto.string_field(1)
    password: str = betterproto.string_field(2)
    reconnect: bool = betterproto.bool_field(3)
    device: "ClientDeviceInfo" = betterproto.message_field(4)
    random_key: str = betterproto.string_field(5)
    client_version: "ClientVersionInfo" = betterproto.message_field(6)
    gen_access_token: bool = betterproto.bool_field(7)
    currency_platforms: List[int] = betterproto.uint32_field(8)
    type: int = betterproto.uint32_field(9)
    version: int = betterproto.uint32_field(10)
    client_version_string: str = betterproto.string_field(11)
    tag: str = betterproto.string_field(12)


@dataclass(eq=False, repr=False)
class ResLogin(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    account_id: int = betterproto.uint32_field(2)
    account: "Account" = betterproto.message_field(3)
    game_info: "GameConnectInfo" = betterproto.message_field(4)
    has_unread_announcement: bool = betterproto.bool_field(5)
    access_token: str = betterproto.string_field(6)
    signup_time: int = betterproto.uint32_field(7)
    is_id_card_authed: bool = betterproto.bool_field(8)
    country: str = betterproto.string_field(9)
    logined_version: List[int] = betterproto.uint32_field(10)
    rewarded_version: List[int] = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class ReqEmailLogin(betterproto.Message):
    email: str = betterproto.string_field(1)
    password: str = betterproto.string_field(2)
    reconnect: bool = betterproto.bool_field(3)
    device: "ClientDeviceInfo" = betterproto.message_field(4)
    random_key: str = betterproto.string_field(5)
    client_version: str = betterproto.string_field(6)
    gen_access_token: bool = betterproto.bool_field(7)
    currency_platforms: List[int] = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class ReqBindAccount(betterproto.Message):
    account: str = betterproto.string_field(1)
    password: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreatePhoneVerifyCode(betterproto.Message):
    phone: str = betterproto.string_field(1)
    usage: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateEmailVerifyCode(betterproto.Message):
    email: str = betterproto.string_field(1)
    usage: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqVerifyCodeForSecure(betterproto.Message):
    code: str = betterproto.string_field(1)
    operation: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResVerfiyCodeForSecure(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    secure_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqBindPhoneNumber(betterproto.Message):
    code: str = betterproto.string_field(1)
    phone: str = betterproto.string_field(2)
    password: str = betterproto.string_field(3)
    multi_bind_version: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class ReqUnbindPhoneNumber(betterproto.Message):
    code: str = betterproto.string_field(1)
    phone: str = betterproto.string_field(2)
    password: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ResFetchPhoneLoginBind(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    phone_login: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqCreatePhoneLoginBind(betterproto.Message):
    password: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ReqBindEmail(betterproto.Message):
    email: str = betterproto.string_field(1)
    code: str = betterproto.string_field(2)
    password: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ReqModifyPassword(betterproto.Message):
    new_password: str = betterproto.string_field(1)
    old_password: str = betterproto.string_field(2)
    secure_token: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ReqOauth2Auth(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    code: str = betterproto.string_field(2)
    uid: str = betterproto.string_field(3)
    client_version_string: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ResOauth2Auth(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    access_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqOauth2Check(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    access_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ResOauth2Check(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    has_account: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ReqOauth2Signup(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    access_token: str = betterproto.string_field(2)
    email: str = betterproto.string_field(3)
    advertise_str: str = betterproto.string_field(4)
    device: "ClientDeviceInfo" = betterproto.message_field(5)
    client_version: "ClientVersionInfo" = betterproto.message_field(6)
    client_version_string: str = betterproto.string_field(7)
    tag: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class ResOauth2Signup(betterproto.Message):
    error: "Error" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReqOauth2Login(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    access_token: str = betterproto.string_field(2)
    reconnect: bool = betterproto.bool_field(3)
    device: "ClientDeviceInfo" = betterproto.message_field(4)
    random_key: str = betterproto.string_field(5)
    client_version: "ClientVersionInfo" = betterproto.message_field(6)
    gen_access_token: bool = betterproto.bool_field(7)
    currency_platforms: List[int] = betterproto.uint32_field(8)
    version: int = betterproto.uint32_field(9)
    client_version_string: str = betterproto.string_field(10)
    tag: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class ReqDmmPreLogin(betterproto.Message):
    finish_url: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResDmmPreLogin(betterproto.Message):
    error: "Error" = betterproto.message_field(2)
    parameter: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ReqLogout(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ResLogout(betterproto.Message):
    error: "Error" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReqHeatBeat(betterproto.Message):
    no_operation_counter: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqLoginBeat(betterproto.Message):
    contract: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ReqJoinMatchQueue(betterproto.Message):
    match_mode: int = betterproto.uint32_field(1)
    client_version_string: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCancelMatchQueue(betterproto.Message):
    match_mode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqAccountInfo(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResAccountInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    account: "Account" = betterproto.message_field(2)
    room: "Room" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ReqCreateNickname(betterproto.Message):
    nickname: str = betterproto.string_field(1)
    advertise_str: str = betterproto.string_field(2)
    tag: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ReqModifyNickname(betterproto.Message):
    nickname: str = betterproto.string_field(1)
    use_item_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqModifyBirthday(betterproto.Message):
    birthday: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class ResSelfRoom(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    room: "Room" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResFetchGamingInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    game_info: "GameConnectInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateRoom(betterproto.Message):
    player_count: int = betterproto.uint32_field(1)
    mode: "GameMode" = betterproto.message_field(2)
    public_live: bool = betterproto.bool_field(3)
    client_version_string: str = betterproto.string_field(4)
    pre_rule: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class ResCreateRoom(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    room: "Room" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqJoinRoom(betterproto.Message):
    room_id: int = betterproto.uint32_field(1)
    client_version_string: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ResJoinRoom(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    room: "Room" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqRoomReady(betterproto.Message):
    ready: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class ReqRoomDressing(betterproto.Message):
    dressing: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class ReqRoomStart(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ReqRoomKick(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqModifyRoom(betterproto.Message):
    robot_count: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqChangeAvatar(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqAccountStatisticInfo(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResAccountStatisticInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    statistic_data: List["AccountStatisticData"] = betterproto.message_field(2)
    detail_data: "AccountDetailStatisticV2" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ResAccountChallengeRankInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    season_info: List["ResAccountChallengeRankInfoChallengeRank"] = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class ResAccountChallengeRankInfoChallengeRank(betterproto.Message):
    season: int = betterproto.uint32_field(1)
    rank: int = betterproto.uint32_field(2)
    level: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResAccountCharacterInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(2)
    unlock_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqShopPurchase(betterproto.Message):
    type: str = betterproto.string_field(1)
    id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResShopPurchase(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    update: "AccountUpdate" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqGameRecord(betterproto.Message):
    game_uuid: str = betterproto.string_field(1)
    client_version_string: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ResGameRecord(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    head: "RecordGame" = betterproto.message_field(3)
    data: bytes = betterproto.bytes_field(4)
    data_url: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class ReqGameRecordList(betterproto.Message):
    start: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    type: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResGameRecordList(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    total_count: int = betterproto.uint32_field(2)
    record_list: List["RecordGame"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ReqGameRecordListV2(betterproto.Message):
    tag: int = betterproto.uint32_field(1)
    begin_time: int = betterproto.uint32_field(2)
    end_time: int = betterproto.uint32_field(3)
    ranks: List[int] = betterproto.uint32_field(4)
    modes: List[int] = betterproto.uint32_field(5)
    max_hu_type: int = betterproto.uint32_field(6)
    level_mode: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ResGameRecordListV2(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    iterator: str = betterproto.string_field(2)
    iterator_expire: int = betterproto.uint32_field(3)
    actual_begin_time: int = betterproto.uint32_field(4)
    actual_end_time: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ReqNextGameRecordList(betterproto.Message):
    iterator: str = betterproto.string_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResNextGameRecordList(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    next: bool = betterproto.bool_field(2)
    entries: List["RecordListEntry"] = betterproto.message_field(3)
    iterator_expire: int = betterproto.uint32_field(4)
    next_end_time: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ResCollectedGameRecordList(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    record_list: List["RecordCollectedData"] = betterproto.message_field(2)
    record_collect_limit: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqGameRecordsDetail(betterproto.Message):
    uuid_list: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResGameRecordsDetail(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    record_list: List["RecordGame"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqGameRecordsDetailV2(betterproto.Message):
    uuid_list: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResGameRecordsDetailV2(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    entries: List["RecordListEntry"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqAddCollectedGameRecord(betterproto.Message):
    uuid: str = betterproto.string_field(1)
    remarks: str = betterproto.string_field(2)
    start_time: int = betterproto.uint32_field(3)
    end_time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ResAddCollectedGameRecord(betterproto.Message):
    error: "Error" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReqRemoveCollectedGameRecord(betterproto.Message):
    uuid: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResRemoveCollectedGameRecord(betterproto.Message):
    error: "Error" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReqChangeCollectedGameRecordRemarks(betterproto.Message):
    uuid: str = betterproto.string_field(1)
    remarks: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ResChangeCollectedGameRecordRemarks(betterproto.Message):
    error: "Error" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReqLevelLeaderboard(betterproto.Message):
    type: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResLevelLeaderboard(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    items: List["ResLevelLeaderboardItem"] = betterproto.message_field(2)
    self_rank: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResLevelLeaderboardItem(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    level: "AccountLevel" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqChallangeLeaderboard(betterproto.Message):
    season: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResChallengeLeaderboard(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    items: List["ResChallengeLeaderboardItem"] = betterproto.message_field(2)
    self_rank: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResChallengeLeaderboardItem(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    nickname: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ReqMutiChallengeLevel(betterproto.Message):
    account_id_list: List[int] = betterproto.uint32_field(1)
    season: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResMutiChallengeLevel(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    items: List["ResMutiChallengeLevelItem"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResMutiChallengeLevelItem(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqMultiAccountId(betterproto.Message):
    account_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResMultiAccountBrief(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    players: List["PlayerBaseView"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResFriendList(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    friends: List["Friend"] = betterproto.message_field(2)
    friend_max_count: int = betterproto.uint32_field(3)
    friend_count: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ResFriendApplyList(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    applies: List["ResFriendApplyListFriendApply"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResFriendApplyListFriendApply(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    apply_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqApplyFriend(betterproto.Message):
    target_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqHandleFriendApply(betterproto.Message):
    target_id: int = betterproto.uint32_field(1)
    method: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqRemoveFriend(betterproto.Message):
    target_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqSearchAccountByPattern(betterproto.Message):
    search_next: bool = betterproto.bool_field(1)
    pattern: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ResSearchAccountByPattern(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    is_finished: bool = betterproto.bool_field(2)
    match_accounts: List[int] = betterproto.uint32_field(3)
    decode_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ReqAccountList(betterproto.Message):
    account_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResAccountStates(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    states: List["AccountActiveState"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqSearchAccountById(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResSearchAccountById(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    player: "PlayerBaseView" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResBagInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    bag: "Bag" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqUseBagItem(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqOpenManualItem(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    select_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqOpenRandomRewardItem(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResOpenRandomRewardItem(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    results: List["OpenResult"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqOpenAllRewardItem(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResOpenAllRewardItem(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    results: List["OpenResult"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqComposeShard(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqFetchAnnouncement(betterproto.Message):
    lang: str = betterproto.string_field(1)
    platform: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ResAnnouncement(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    announcements: List["Announcement"] = betterproto.message_field(2)
    sort: List[int] = betterproto.uint32_field(3)
    read_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ResMailInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    mails: List["Mail"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqReadMail(betterproto.Message):
    mail_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqDeleteMail(betterproto.Message):
    mail_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqTakeAttachment(betterproto.Message):
    mail_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqReceiveAchievementGroupReward(betterproto.Message):
    group_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResReceiveAchievementGroupReward(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    execute_reward: List["ExecuteReward"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqReceiveAchievementReward(betterproto.Message):
    achievement_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResReceiveAchievementReward(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    execute_reward: List["ExecuteReward"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResFetchAchievementRate(betterproto.Message):
    error: "Error" = betterproto.message_field(2)
    rate: List["ResFetchAchievementRateAchievementRate"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ResFetchAchievementRateAchievementRate(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    rate: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResAchievement(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    progresses: List["AchievementProgress"] = betterproto.message_field(2)
    rewarded_group: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResTitleList(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    title_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqUseTitle(betterproto.Message):
    title: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqBuyShiLian(betterproto.Message):
    type: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqUpdateClientValue(betterproto.Message):
    key: int = betterproto.uint32_field(1)
    value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResClientValue(betterproto.Message):
    error: "Error" = betterproto.message_field(3)
    datas: List["ResClientValueValue"] = betterproto.message_field(1)
    recharged_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResClientValueValue(betterproto.Message):
    key: int = betterproto.uint32_field(1)
    value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqClientMessage(betterproto.Message):
    timestamp: int = betterproto.uint32_field(1)
    message: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCurrentMatchInfo(betterproto.Message):
    mode_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResCurrentMatchInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    matches: List["ResCurrentMatchInfoCurrentMatchInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResCurrentMatchInfoCurrentMatchInfo(betterproto.Message):
    mode_id: int = betterproto.uint32_field(1)
    playing_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqUserComplain(betterproto.Message):
    target_id: int = betterproto.uint32_field(1)
    type: int = betterproto.uint32_field(2)
    content: str = betterproto.string_field(3)
    game_uuid: str = betterproto.string_field(4)
    round_info: "ReqUserComplainGameRoundInfo" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ReqUserComplainGameRoundInfo(betterproto.Message):
    chang: int = betterproto.uint32_field(1)
    ju: int = betterproto.uint32_field(2)
    ben: int = betterproto.uint32_field(3)
    seat: int = betterproto.uint32_field(4)
    xun: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ReqReadAnnouncement(betterproto.Message):
    announcement_id: int = betterproto.uint32_field(1)
    announcement_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResReviveCoinInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    has_gained: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ResDailyTask(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    progresses: List["TaskProgress"] = betterproto.message_field(2)
    has_refresh_count: bool = betterproto.bool_field(3)
    max_daily_task_count: int = betterproto.uint32_field(4)
    refresh_count: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ReqRefreshDailyTask(betterproto.Message):
    task_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResRefreshDailyTask(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    progress: "TaskProgress" = betterproto.message_field(2)
    refresh_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqUseGiftCode(betterproto.Message):
    code: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResUseGiftCode(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    rewards: List["RewardSlot"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class ResUseSpecialGiftCode(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    rewards: List["ExecuteReward"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqSendClientMessage(betterproto.Message):
    target_id: int = betterproto.uint32_field(1)
    type: int = betterproto.uint32_field(2)
    content: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ReqGameLiveInfo(betterproto.Message):
    game_uuid: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResGameLiveInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    left_start_seconds: int = betterproto.uint32_field(2)
    live_head: "GameLiveHead" = betterproto.message_field(3)
    segments: List["GameLiveSegmentUri"] = betterproto.message_field(4)
    now_millisecond: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ReqGameLiveLeftSegment(betterproto.Message):
    game_uuid: str = betterproto.string_field(1)
    last_segment_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResGameLiveLeftSegment(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    live_state: int = betterproto.uint32_field(2)
    segments: List["GameLiveSegmentUri"] = betterproto.message_field(4)
    now_millisecond: int = betterproto.uint32_field(5)
    segment_end_millisecond: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ReqGameLiveList(betterproto.Message):
    filter_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResGameLiveList(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    live_list: List["GameLiveHead"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResCommentSetting(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    comment_allow: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqUpdateCommentSetting(betterproto.Message):
    comment_allow: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqFetchCommentList(betterproto.Message):
    target_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResFetchCommentList(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    comment_allow: int = betterproto.uint32_field(2)
    comment_id_list: List[int] = betterproto.uint32_field(3)
    last_read_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ReqFetchCommentContent(betterproto.Message):
    target_id: int = betterproto.uint32_field(1)
    comment_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResFetchCommentContent(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    comments: List["CommentItem"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqLeaveComment(betterproto.Message):
    target_id: int = betterproto.uint32_field(1)
    content: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqDeleteComment(betterproto.Message):
    target_id: int = betterproto.uint32_field(1)
    delete_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqUpdateReadComment(betterproto.Message):
    read_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResFetchRollingNotice(betterproto.Message):
    error: "Error" = betterproto.message_field(2)
    notice: "RollingNotice" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ResFetchMaintainNotice(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    notice: "MaintainNotice" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqFetchRollingNotice(betterproto.Message):
    lang: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResServerTime(betterproto.Message):
    server_time: int = betterproto.uint32_field(1)
    error: "Error" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqPlatformBillingProducts(betterproto.Message):
    shelves_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResPlatformBillingProducts(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    products: List["BillingProduct"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateBillingOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    payment_platform: int = betterproto.uint32_field(2)
    client_type: int = betterproto.uint32_field(3)
    account_id: int = betterproto.uint32_field(4)
    client_version_string: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class ResCreateBillingOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqSolveGooglePlayOrder(betterproto.Message):
    inapp_purchase_data: str = betterproto.string_field(2)
    inapp_data_signature: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ReqSolveGooglePlayOrderV3(betterproto.Message):
    order_id: str = betterproto.string_field(1)
    transaction_id: str = betterproto.string_field(2)
    token: str = betterproto.string_field(3)
    account_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ReqCancelGooglePlayOrder(betterproto.Message):
    order_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ReqCreateWechatNativeOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    account_ip: str = betterproto.string_field(4)
    client_version_string: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class ResCreateWechatNativeOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    qrcode_buffer: str = betterproto.string_field(2)
    order_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ReqCreateWechatAppOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    account_ip: str = betterproto.string_field(4)
    client_version_string: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class ResCreateWechatAppOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    call_wechat_app_param: "ResCreateWechatAppOrderCallWechatAppParam" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class ResCreateWechatAppOrderCallWechatAppParam(betterproto.Message):
    appid: str = betterproto.string_field(1)
    partnerid: str = betterproto.string_field(2)
    prepayid: str = betterproto.string_field(3)
    package: str = betterproto.string_field(4)
    noncestr: str = betterproto.string_field(5)
    timestamp: str = betterproto.string_field(6)
    sign: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class ReqCreateAlipayOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    alipay_trade_type: str = betterproto.string_field(4)
    return_url: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateAlipayOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    alipay_url: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateAlipayScanOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    client_version_string: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ResCreateAlipayScanOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    qrcode_buffer: str = betterproto.string_field(2)
    order_id: str = betterproto.string_field(3)
    qr_code: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ReqCreateAlipayAppOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    client_version_string: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ResCreateAlipayAppOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    alipay_url: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateJpCreditCardOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateJpCreditCardOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateJpPaypalOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateJpPaypalOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateJpAuOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateJpAuOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateJpDocomoOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateJpDocomoOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateJpWebMoneyOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateJpWebMoneyOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateJpSoftbankOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateJpSoftbankOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateJpPayPayOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateJpPayPayOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqFetchJpCommonCreditCardOrder(betterproto.Message):
    order_id: str = betterproto.string_field(1)
    account_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResFetchJpCommonCreditCardOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReqCreateJpgmoOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateJpgmoOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateYostarOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    order_type: int = betterproto.uint32_field(4)
    client_version_string: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class ResCreateYostarOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateEnPaypalOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateEnPaypalOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateEnjcbOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateEnjcbOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateEnMasterCardOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateEnMasterCardOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateEnVisaOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateEnVisaOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateEnAlipayOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateEnAlipayOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateKrPaypalOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateKrPaypalOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateKrjcbOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateKrjcbOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateKrMasterCardOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateKrMasterCardOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateKrVisaOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateKrVisaOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateKrAlipayOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    return_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateKrAlipayOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateDmmOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    account_id: int = betterproto.uint32_field(2)
    client_type: int = betterproto.uint32_field(3)
    client_version_string: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ResCreateDmmOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)
    transaction_id: str = betterproto.string_field(3)
    dmm_user_id: str = betterproto.string_field(4)
    token: str = betterproto.string_field(5)
    callback_url: str = betterproto.string_field(6)
    request_time: str = betterproto.string_field(9)
    dmm_app_id: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class ReqCreateIapOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    access_token: str = betterproto.string_field(4)
    debt_order_id: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateIapOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqVerificationIapOrder(betterproto.Message):
    order_id: str = betterproto.string_field(1)
    transaction_id: str = betterproto.string_field(2)
    receipt_data: str = betterproto.string_field(3)
    account_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ResVerificationIapOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReqCreateSteamOrder(betterproto.Message):
    language: str = betterproto.string_field(1)
    account_id: int = betterproto.uint32_field(2)
    client_type: int = betterproto.uint32_field(3)
    goods_id: int = betterproto.uint32_field(4)
    steam_id: str = betterproto.string_field(5)
    debt_order_id: str = betterproto.string_field(6)
    client_version_string: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class ResCreateSteamOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)
    platform_order_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ReqVerifySteamOrder(betterproto.Message):
    order_id: str = betterproto.string_field(1)
    account_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateMyCardOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    debt_order_id: str = betterproto.string_field(4)
    client_version_string: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class ResCreateMyCardOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    auth_code: str = betterproto.string_field(2)
    order_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ReqVerifyMyCardOrder(betterproto.Message):
    order_id: str = betterproto.string_field(1)
    account_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqCreatePaypalOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    debt_order_id: str = betterproto.string_field(4)
    client_version_string: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class ResCreatePaypalOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)
    url: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ReqCreateXsollaOrder(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    client_type: int = betterproto.uint32_field(2)
    account_id: int = betterproto.uint32_field(3)
    payment_method: int = betterproto.uint32_field(4)
    debt_order_id: str = betterproto.string_field(5)
    client_version_string: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ResCreateXsollaOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    order_id: str = betterproto.string_field(2)
    url: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ReqDeliverAa32Order(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    nsa_id: str = betterproto.string_field(2)
    nsa_token: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ReqOpenChest(betterproto.Message):
    chest_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    use_ticket: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ResOpenChest(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    results: List["OpenResult"] = betterproto.message_field(2)
    total_open_count: int = betterproto.uint32_field(3)
    faith_count: int = betterproto.uint32_field(4)
    chest_replace_up: List["ResOpenChestChestReplaceCountData"] = (
        betterproto.message_field(5)
    )


@dataclass(eq=False, repr=False)
class ResOpenChestChestReplaceCountData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqBuyFromChestShop(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResBuyFromChestShop(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    chest_id: int = betterproto.uint32_field(2)
    consume_count: int = betterproto.uint32_field(3)
    faith_count: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class ResDailySignInInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    sign_in_days: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqDoActivitySignIn(betterproto.Message):
    activity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResDoActivitySignIn(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    rewards: List["ResDoActivitySignInRewardData"] = betterproto.message_field(2)
    sign_in_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResDoActivitySignInRewardData(betterproto.Message):
    resource_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResCharacterInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    characters: List["Character"] = betterproto.message_field(2)
    skins: List[int] = betterproto.uint32_field(3)
    main_character_id: int = betterproto.uint32_field(4)
    send_gift_count: int = betterproto.uint32_field(5)
    send_gift_limit: int = betterproto.uint32_field(6)
    finished_endings: List[int] = betterproto.uint32_field(7)
    rewarded_endings: List[int] = betterproto.uint32_field(8)
    character_sort: List[int] = betterproto.uint32_field(9)
    hidden_characters: List[int] = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class ReqUpdateCharacterSort(betterproto.Message):
    sort: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqChangeMainCharacter(betterproto.Message):
    character_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqChangeCharacterSkin(betterproto.Message):
    character_id: int = betterproto.uint32_field(1)
    skin: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqChangeCharacterView(betterproto.Message):
    character_id: int = betterproto.uint32_field(1)
    slot: int = betterproto.uint32_field(2)
    item_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqSetHiddenCharacter(betterproto.Message):
    chara_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResSetHiddenCharacter(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    hidden_characters: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqSendGiftToCharacter(betterproto.Message):
    character_id: int = betterproto.uint32_field(1)
    gifts: List["ReqSendGiftToCharacterGift"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqSendGiftToCharacterGift(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResSendGiftToCharacter(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    level: int = betterproto.uint32_field(2)
    exp: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqSellItem(betterproto.Message):
    sells: List["ReqSellItemItem"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReqSellItemItem(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResCommonView(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    slots: List["ResCommonViewSlot"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResCommonViewSlot(betterproto.Message):
    slot: int = betterproto.uint32_field(1)
    value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqChangeCommonView(betterproto.Message):
    slot: int = betterproto.uint32_field(1)
    value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqSaveCommonViews(betterproto.Message):
    views: List["ViewSlot"] = betterproto.message_field(1)
    save_index: int = betterproto.uint32_field(2)
    is_use: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqCommonViews(betterproto.Message):
    index: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResCommonViews(betterproto.Message):
    error: "Error" = betterproto.message_field(2)
    views: List["ViewSlot"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ResAllcommonViews(betterproto.Message):
    views: List["ResAllcommonViewsViews"] = betterproto.message_field(1)
    use: int = betterproto.uint32_field(2)
    error: "Error" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ResAllcommonViewsViews(betterproto.Message):
    values: List["ViewSlot"] = betterproto.message_field(1)
    index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqUseCommonView(betterproto.Message):
    index: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqUpgradeCharacter(betterproto.Message):
    character_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResUpgradeCharacter(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    character: "Character" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqFinishedEnding(betterproto.Message):
    character_id: int = betterproto.uint32_field(1)
    story_id: int = betterproto.uint32_field(2)
    ending_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqGmCommand(betterproto.Message):
    command: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResShopInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    shop_info: "ShopInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqBuyFromShop(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    ver_price: List["ReqBuyFromShopItem"] = betterproto.message_field(3)
    ver_goods: List["ReqBuyFromShopItem"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ReqBuyFromShopItem(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResBuyFromShop(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    rewards: List["RewardSlot"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqBuyFromZhp(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqPayMonthTicket(betterproto.Message):
    ticket_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResPayMonthTicket(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    resource_id: int = betterproto.uint32_field(2)
    resource_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqReshZhpShop(betterproto.Message):
    free_refresh: int = betterproto.uint32_field(1)
    cost_refresh: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResRefreshZhpShop(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    zhp: "ZhpShop" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResMonthTicketInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(2)
    month_ticket_info: "MonthTicketInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReqExchangeCurrency(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResServerSettings(betterproto.Message):
    error: "Error" = betterproto.message_field(2)
    settings: "ServerSettings" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ResAccountSettings(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    settings: List["AccountSetting"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqUpdateAccountSettings(betterproto.Message):
    setting: "AccountSetting" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ResModNicknameTime(betterproto.Message):
    error: "Error" = betterproto.message_field(2)
    last_mod_time: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResMisc(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    recharged_list: List[int] = betterproto.uint32_field(2)
    faiths: List["ResMiscMiscFaithData"] = betterproto.message_field(3)
    verified_hidden: int = betterproto.uint32_field(4)
    verified_value: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ResMiscMiscFaithData(betterproto.Message):
    faith_id: int = betterproto.uint32_field(1)
    count: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class ReqModifySignature(betterproto.Message):
    signature: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResIdCardInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    is_authed: bool = betterproto.bool_field(2)
    country: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ReqUpdateIdCardInfo(betterproto.Message):
    fullname: str = betterproto.string_field(1)
    card_no: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ResVipReward(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    gained_vip_levels: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResFetchRefundOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    orders: List["ResFetchRefundOrderOrderInfo"] = betterproto.message_field(2)
    clear_deadline: int = betterproto.uint32_field(3)
    message: List["I18NContext"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ResFetchRefundOrderOrderInfo(betterproto.Message):
    success_time: int = betterproto.uint32_field(1)
    goods_id: int = betterproto.uint32_field(2)
    cleared: int = betterproto.uint32_field(3)
    order_id: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ReqGainVipReward(betterproto.Message):
    vip_level: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqFetchCustomizedContestList(betterproto.Message):
    start: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    lang: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ResFetchCustomizedContestList(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    contests: List["CustomizedContestBase"] = betterproto.message_field(2)
    follow_contests: List["CustomizedContestBase"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ReqFetchCustomizedContestAuthInfo(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResFetchCustomizedContestAuthInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    observer_level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqEnterCustomizedContest(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    lang: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ResEnterCustomizedContest(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    detail_info: "CustomizedContestDetail" = betterproto.message_field(2)
    player_report: "CustomizedContestPlayerReport" = betterproto.message_field(3)
    is_followed: bool = betterproto.bool_field(4)
    state: int = betterproto.uint32_field(5)
    is_admin: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class ReqFetchCustomizedContestOnlineInfo(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResFetchCustomizedContestOnlineInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    online_player: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqFetchCustomizedContestByContestId(betterproto.Message):
    contest_id: int = betterproto.uint32_field(1)
    lang: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ResFetchCustomizedContestByContestId(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    contest_info: "CustomizedContestAbstract" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqSignupCustomizedContest(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    client_version_string: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ResSignupCustomizedContest(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    state: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqStartCustomizedContest(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    client_version_string: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqStopCustomizedContest(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqJoinCustomizedContestChatRoom(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResJoinCustomizedContestChatRoom(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqSayChatMessage(betterproto.Message):
    content: str = betterproto.string_field(1)
    unique_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqFetchCustomizedContestGameLiveList(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResFetchCustomizedContestGameLiveList(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    live_list: List["GameLiveHead"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqFetchCustomizedContestGameRecords(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    last_index: int = betterproto.uint32_field(2)
    season_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResFetchCustomizedContestGameRecords(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    next_index: int = betterproto.uint32_field(2)
    record_list: List["RecordGame"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ReqTargetCustomizedContest(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResActivityList(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    activities: List["Activity"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResAccountActivityData(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    exchange_records: List["ExchangeRecord"] = betterproto.message_field(2)
    task_progress_list: List["TaskProgress"] = betterproto.message_field(3)
    accumulated_point_list: List["ActivityAccumulatedPointData"] = (
        betterproto.message_field(4)
    )
    rank_data_list: List["ActivityRankPointData"] = betterproto.message_field(5)
    flip_task_progress_list: List["TaskProgress"] = betterproto.message_field(6)
    sign_in_data: List["ResAccountActivityDataActivitySignInData"] = (
        betterproto.message_field(7)
    )
    richman_data: List["ResAccountActivityDataActivityRichmanData"] = (
        betterproto.message_field(8)
    )
    period_task_progress_list: List["TaskProgress"] = betterproto.message_field(9)
    random_task_progress_list: List["TaskProgress"] = betterproto.message_field(10)
    chest_up_data: List["ResAccountActivityDataChestUpData"] = (
        betterproto.message_field(11)
    )
    sns_data: "ResAccountActivityDataActivitySnsData" = betterproto.message_field(12)
    mine_data: List["MineActivityData"] = betterproto.message_field(13)
    rpg_data: List["RpgActivity"] = betterproto.message_field(14)
    arena_data: List["ActivityArenaData"] = betterproto.message_field(15)
    feed_data: List["FeedActivityData"] = betterproto.message_field(16)
    segment_task_progress_list: List["SegmentTaskProgress"] = betterproto.message_field(
        17
    )
    vote_records: List["VoteData"] = betterproto.message_field(18)
    spot_data: List["ActivitySpotData"] = betterproto.message_field(19)
    friend_gift_data: List["ActivityFriendGiftData"] = betterproto.message_field(20)
    upgrade_data: List["ActivityUpgradeData"] = betterproto.message_field(21)
    gacha_data: List["ActivityGachaUpdateData"] = betterproto.message_field(22)
    simulation_data: List["ActivitySimulationData"] = betterproto.message_field(23)
    combining_data: List["ActivityCombiningLqData"] = betterproto.message_field(24)
    village_data: List["ActivityVillageData"] = betterproto.message_field(25)
    festival_data: List["ActivityFestivalData"] = betterproto.message_field(26)
    island_data: List["ActivityIslandData"] = betterproto.message_field(27)
    amulet_data: List["ActivityAmuletData"] = betterproto.message_field(28)
    story_data: List["ActivityStoryData"] = betterproto.message_field(29)


@dataclass(eq=False, repr=False)
class ResAccountActivityDataActivitySignInData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    sign_in_count: int = betterproto.uint32_field(2)
    last_sign_in_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResAccountActivityDataBuffData(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    remain: int = betterproto.uint32_field(2)
    effect: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResAccountActivityDataActivityRichmanData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    location: int = betterproto.uint32_field(2)
    finished_count: int = betterproto.uint32_field(3)
    chest_position: int = betterproto.uint32_field(4)
    bank_save: int = betterproto.uint32_field(5)
    exp: int = betterproto.uint32_field(6)
    buff: List["ResAccountActivityDataBuffData"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class ResAccountActivityDataChestUpData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResAccountActivityDataActivitySnsData(betterproto.Message):
    blog: List["SnsBlog"] = betterproto.message_field(1)
    liked_id: List[int] = betterproto.uint32_field(2)
    reply: List["SnsReply"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class SnsBlog(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    read_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SnsReply(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    reply_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqExchangeActivityItem(betterproto.Message):
    exchange_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResExchangeActivityItem(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    execute_reward: List["ExecuteReward"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqCompleteActivityTask(betterproto.Message):
    task_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqCompleteActivityTaskBatch(betterproto.Message):
    task_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqCompletePeriodActivityTaskBatch(betterproto.Message):
    task_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqReceiveActivityFlipTask(betterproto.Message):
    task_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResReceiveActivityFlipTask(betterproto.Message):
    count: int = betterproto.uint32_field(1)
    error: "Error" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqCompleteSegmentTaskReward(betterproto.Message):
    task_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResCompleteSegmentTaskReward(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    rewards: List["ExecuteReward"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqFetchActivityFlipInfo(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResFetchActivityFlipInfo(betterproto.Message):
    rewards: List[int] = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    error: "Error" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ReqGainAccumulatedPointActivityReward(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    reward_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqGainMultiPointActivityReward(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    reward_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqFetchRankPointLeaderboard(betterproto.Message):
    leaderboard_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResFetchRankPointLeaderboard(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    items: List["ResFetchRankPointLeaderboardItem"] = betterproto.message_field(2)
    last_refresh_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResFetchRankPointLeaderboardItem(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    rank: int = betterproto.uint32_field(2)
    view: "PlayerBaseView" = betterproto.message_field(3)
    point: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ReqGainRankPointReward(betterproto.Message):
    leaderboard_id: int = betterproto.uint32_field(1)
    activity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqRichmanNextMove(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResRichmanNextMove(betterproto.Message):
    paths: List["ResRichmanNextMovePathData"] = betterproto.message_field(1)
    dice: int = betterproto.uint32_field(2)
    location: int = betterproto.uint32_field(3)
    finished_count: int = betterproto.uint32_field(4)
    step: int = betterproto.uint32_field(5)
    buff: List["ResRichmanNextMoveBuffData"] = betterproto.message_field(6)
    bank_save: int = betterproto.uint32_field(7)
    chest_position: int = betterproto.uint32_field(8)
    exp: int = betterproto.uint32_field(9)
    bank_save_add: int = betterproto.uint32_field(10)
    error: "Error" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class ResRichmanNextMoveRewardData(betterproto.Message):
    resource_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    origin_count: int = betterproto.uint32_field(3)
    type: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ResRichmanNextMovePathData(betterproto.Message):
    location: int = betterproto.uint32_field(1)
    rewards: List["ResRichmanNextMoveRewardData"] = betterproto.message_field(2)
    events: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResRichmanNextMoveBuffData(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    remain: int = betterproto.uint32_field(2)
    effect: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqRichmanSpecialMove(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    step: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqRichmanChestInfo(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResRichmanChestInfo(betterproto.Message):
    items: List["ResRichmanChestInfoItemData"] = betterproto.message_field(1)
    error: "Error" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResRichmanChestInfoItemData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateGameObserveAuth(betterproto.Message):
    game_uuid: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResCreateGameObserveAuth(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    token: str = betterproto.string_field(2)
    location: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ReqRefreshGameObserveAuth(betterproto.Message):
    token: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResRefreshGameObserveAuth(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    ttl: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResActivityBuff(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    buff_list: List["ActivityBuffData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqUpgradeActivityBuff(betterproto.Message):
    buff_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqUpgradeActivityLevel(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    group: int = betterproto.uint32_field(2)
    count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResUpgradeActivityLevel(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    rewards: List["ExecuteReward"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqReceiveUpgradeActivityReward(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResReceiveUpgradeActivityReward(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    rewards: List["ExecuteReward"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqReceiveAllActivityGift(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResReceiveAllActivityGift(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    rewards: List["ExecuteReward"] = betterproto.message_field(2)
    receive_gift: List["ResReceiveAllActivityGiftReceiveRewards"] = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class ResReceiveAllActivityGiftReceiveRewards(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    from_account_id: int = betterproto.uint32_field(2)
    item_id: int = betterproto.uint32_field(3)
    count: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ResUpgradeChallenge(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    task_progress: List["TaskProgress"] = betterproto.message_field(2)
    refresh_count: int = betterproto.uint32_field(3)
    level: int = betterproto.uint32_field(4)
    match_count: int = betterproto.uint32_field(5)
    ticket_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ResRefreshChallenge(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    task_progress: List["TaskProgress"] = betterproto.message_field(2)
    refresh_count: int = betterproto.uint32_field(3)
    level: int = betterproto.uint32_field(4)
    match_count: int = betterproto.uint32_field(5)
    ticket_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ResFetchChallengeInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    task_progress: List["TaskProgress"] = betterproto.message_field(2)
    refresh_count: int = betterproto.uint32_field(3)
    level: int = betterproto.uint32_field(4)
    match_count: int = betterproto.uint32_field(5)
    ticket_id: int = betterproto.uint32_field(6)
    rewarded_season: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class ReqForceCompleteChallengeTask(betterproto.Message):
    task_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResFetchAbMatch(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    match_id: int = betterproto.uint32_field(2)
    match_count: int = betterproto.uint32_field(3)
    buy_in_count: int = betterproto.uint32_field(4)
    point: int = betterproto.uint32_field(5)
    rewarded: bool = betterproto.bool_field(6)
    match_max_point: List["ResFetchAbMatchMatchPoint"] = betterproto.message_field(7)
    quit: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class ResFetchAbMatchMatchPoint(betterproto.Message):
    match_id: int = betterproto.uint32_field(1)
    point: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqStartUnifiedMatch(betterproto.Message):
    match_sid: str = betterproto.string_field(1)
    client_version_string: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCancelUnifiedMatch(betterproto.Message):
    match_sid: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResChallengeSeasonInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(2)
    challenge_season_list: List["ResChallengeSeasonInfoChallengeInfo"] = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class ResChallengeSeasonInfoChallengeInfo(betterproto.Message):
    season_id: int = betterproto.uint32_field(1)
    start_time: int = betterproto.uint32_field(2)
    end_time: int = betterproto.uint32_field(3)
    state: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ReqReceiveChallengeRankReward(betterproto.Message):
    season_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResReceiveChallengeRankReward(betterproto.Message):
    error: "Error" = betterproto.message_field(2)
    rewards: List["ResReceiveChallengeRankRewardReward"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ResReceiveChallengeRankRewardReward(betterproto.Message):
    resource_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqBuyInAbMatch(betterproto.Message):
    match_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqGamePointRank(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResGamePointRank(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    rank: List["ResGamePointRankRankInfo"] = betterproto.message_field(2)
    self_rank: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResGamePointRankRankInfo(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    point: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResFetchSelfGamePointRank(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    self_rate: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqReadSns(betterproto.Message):
    id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResReadSns(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    sns_content: "SnsBlog" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqReplySns(betterproto.Message):
    id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResReplySns(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    sns_reply: "SnsReply" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqLikeSns(betterproto.Message):
    id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResLikeSns(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    is_liked: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqDigMine(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    point: "Point" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResDigMine(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    map: List["MineReward"] = betterproto.message_field(2)
    reward: List["RewardSlot"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ReqFetchLastPrivacy(betterproto.Message):
    type: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResFetchLastPrivacy(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    privacy: List["ResFetchLastPrivacyPrivacyInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResFetchLastPrivacyPrivacyInfo(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    version: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCheckPrivacy(betterproto.Message):
    device_type: str = betterproto.string_field(1)
    versions: List["ReqCheckPrivacyVersions"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqCheckPrivacyVersions(betterproto.Message):
    version: str = betterproto.string_field(1)
    type: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqResponseCaptcha(betterproto.Message):
    check_id: int = betterproto.uint32_field(1)
    check_time: int = betterproto.uint32_field(2)
    result: str = betterproto.string_field(3)
    client_version_string: str = betterproto.string_field(4)
    type: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ReqFetchRpgBattleHistory(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResFetchRpgBattleHistory(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    battle_result: List["ResFetchRpgBattleHistoryBattleResult"] = (
        betterproto.message_field(2)
    )
    start_state: "RpgState" = betterproto.message_field(3)
    current_state: "RpgState" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ResFetchRpgBattleHistoryBattleResult(betterproto.Message):
    uuid: str = betterproto.string_field(14)
    chang: int = betterproto.uint32_field(1)
    ju: int = betterproto.uint32_field(2)
    ben: int = betterproto.uint32_field(3)
    target: int = betterproto.uint32_field(4)
    damage: int = betterproto.uint32_field(5)
    heal: int = betterproto.uint32_field(6)
    monster_seq: int = betterproto.uint32_field(7)
    chain_atk: int = betterproto.uint32_field(8)
    killed: int = betterproto.uint32_field(9)
    is_luk: int = betterproto.uint32_field(10)
    is_dex: int = betterproto.uint32_field(11)
    is_extra: int = betterproto.uint32_field(12)
    reward: str = betterproto.string_field(13)
    points: int = betterproto.uint32_field(15)
    is_zimo: int = betterproto.uint32_field(16)


@dataclass(eq=False, repr=False)
class ResFetchRpgBattleHistoryV2(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    battle_result: List["ResFetchRpgBattleHistoryV2BattleResultV2"] = (
        betterproto.message_field(2)
    )
    start_state: "RpgState" = betterproto.message_field(3)
    current_state: "RpgState" = betterproto.message_field(4)
    recent_battle_result: List["ResFetchRpgBattleHistoryV2BattleResultV2"] = (
        betterproto.message_field(5)
    )


@dataclass(eq=False, repr=False)
class ResFetchRpgBattleHistoryV2BattleResultV2(betterproto.Message):
    uuid: str = betterproto.string_field(14)
    chang: int = betterproto.uint32_field(1)
    ju: int = betterproto.uint32_field(2)
    ben: int = betterproto.uint32_field(3)
    damage: int = betterproto.uint32_field(5)
    monster_seq: int = betterproto.uint32_field(7)
    killed: int = betterproto.uint32_field(9)
    buff: List["ActivityBuffData"] = betterproto.message_field(10)
    points: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class ReqBuyArenaTicket(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqArenaReward(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqEnterArena(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResArenaReward(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    items: List["ResArenaRewardRewardItem"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResArenaRewardRewardItem(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqReceiveRpgRewards(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqReceiveRpgReward(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    monster_seq: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResReceiveRpgRewards(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    items: List["ResReceiveRpgRewardsRewardItem"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResReceiveRpgRewardsRewardItem(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqFetchObToken(betterproto.Message):
    uuid: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResFetchObToken(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    token: str = betterproto.string_field(2)
    create_time: int = betterproto.uint32_field(3)
    delay: int = betterproto.uint32_field(4)
    start_time: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ReqReceiveCharacterRewards(betterproto.Message):
    character_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResReceiveCharacterRewards(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    items: List["ResReceiveCharacterRewardsRewardItem"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResReceiveCharacterRewardsRewardItem(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqFeedActivityFeed(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResFeedActivityFeed(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    items: List["ResFeedActivityFeedRewardItem"] = betterproto.message_field(2)
    feed_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResFeedActivityFeedRewardItem(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqSendActivityGiftToFriend(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    item_id: int = betterproto.uint32_field(2)
    target_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResSendActivityGiftToFriend(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    send_gift_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqReceiveActivityGift(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqFetchFriendGiftActivityData(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    account_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResFetchFriendGiftActivityData(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    list: List["ResFetchFriendGiftActivityDataFriendData"] = betterproto.message_field(
        2
    )


@dataclass(eq=False, repr=False)
class ResFetchFriendGiftActivityDataItemCountData(betterproto.Message):
    item: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResFetchFriendGiftActivityDataFriendData(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    items: List["ResFetchFriendGiftActivityDataItemCountData"] = (
        betterproto.message_field(2)
    )
    receive_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqOpenPreChestItem(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    pool_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResOpenPreChestItem(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    results: List["OpenResult"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqFetchVoteActivity(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResFetchVoteActivity(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    vote_rank: List[int] = betterproto.uint32_field(2)
    update_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqVoteActivity(betterproto.Message):
    vote: int = betterproto.uint32_field(1)
    activity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResVoteActivity(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    vote_records: List["VoteData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqUnlockActivitySpot(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqUnlockActivitySpotEnding(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    ending_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqReceiveActivitySpotReward(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResReceiveActivitySpotReward(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    items: List["ResReceiveActivitySpotRewardRewardItem"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResReceiveActivitySpotRewardRewardItem(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqLogReport(betterproto.Message):
    success: int = betterproto.uint32_field(1)
    failed: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqBindOauth2(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqFetchOauth2(betterproto.Message):
    type: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResFetchOauth2(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    openid: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ResDeleteAccount(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    delete_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqSetLoadingImage(betterproto.Message):
    images: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResFetchShopInterval(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: List["ResFetchShopIntervalShopInterval"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResFetchShopIntervalShopInterval(betterproto.Message):
    group_id: int = betterproto.uint32_field(1)
    interval: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResFetchActivityInterval(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result: List["ResFetchActivityIntervalActivityInterval"] = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class ResFetchActivityIntervalActivityInterval(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    interval: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResFetchrecentFriend(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    account_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqOpenGacha(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResOpenGacha(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result_list: List[int] = betterproto.uint32_field(2)
    reward_items: List["ExecuteReward"] = betterproto.message_field(3)
    sp_reward_items: List["ExecuteReward"] = betterproto.message_field(4)
    remain_count: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ReqTaskRequest(betterproto.Message):
    params: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqSimulationActivityTrain(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResSimulationActivityTrain(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    result_type: int = betterproto.uint32_field(2)
    final_stats: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ReqFetchSimulationGameRecord(betterproto.Message):
    game_uuid: str = betterproto.string_field(1)
    activity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResFetchSimulationGameRecord(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    messages: List["ActivitySimulationGameRecordMessage"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqStartSimulationActivityGame(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResStartSimulationActivityGame(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    records: List["ActivitySimulationGameRecord"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqFetchSimulationGameRank(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    day: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResFetchSimulationGameRank(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    rank: List["ResFetchSimulationGameRankRankInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResFetchSimulationGameRankRankInfo(betterproto.Message):
    character: int = betterproto.uint32_field(1)
    score: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class ReqGenerateCombiningCraft(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    bin_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResGenerateCombiningCraft(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    pos: int = betterproto.uint32_field(2)
    craft_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqMoveCombiningCraft(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    from_: int = betterproto.uint32_field(2)
    to: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResMoveCombiningCraft(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    pos: int = betterproto.uint32_field(2)
    combined: int = betterproto.uint32_field(3)
    craft_id: int = betterproto.uint32_field(4)
    bonus: "ResMoveCombiningCraftBonusData" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ResMoveCombiningCraftBonusData(betterproto.Message):
    craft_id: int = betterproto.uint32_field(1)
    pos: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqCombiningRecycleCraft(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    pos: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResCombiningRecycleCraft(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    reward_items: List["ExecuteReward"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqRecoverCombiningRecycle(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResRecoverCombiningRecycle(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    craft_id: int = betterproto.uint32_field(2)
    pos: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqFinishCombiningOrder(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    craft_pos: int = betterproto.uint32_field(2)
    order_pos: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResFinishCombiningOrder(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    reward_items: List["ExecuteReward"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResFetchInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    server_time: "ResServerTime" = betterproto.message_field(2)
    server_setting: "ResServerSettings" = betterproto.message_field(3)
    client_value: "ResClientValue" = betterproto.message_field(4)
    friend_list: "ResFriendList" = betterproto.message_field(5)
    friend_apply_list: "ResFriendApplyList" = betterproto.message_field(6)
    recent_friend: "ResFetchrecentFriend" = betterproto.message_field(7)
    mail_info: "ResMailInfo" = betterproto.message_field(8)
    receive_coin_info: "ResReviveCoinInfo" = betterproto.message_field(9)
    title_list: "ResTitleList" = betterproto.message_field(10)
    bag_info: "ResBagInfo" = betterproto.message_field(11)
    shop_info: "ResShopInfo" = betterproto.message_field(12)
    shop_interval: "ResFetchShopInterval" = betterproto.message_field(13)
    activity_data: "ResAccountActivityData" = betterproto.message_field(14)
    activity_interval: "ResFetchActivityInterval" = betterproto.message_field(15)
    activity_buff: "ResActivityBuff" = betterproto.message_field(16)
    vip_reward: "ResVipReward" = betterproto.message_field(17)
    month_ticket_info: "ResMonthTicketInfo" = betterproto.message_field(18)
    achievement: "ResAchievement" = betterproto.message_field(19)
    comment_setting: "ResCommentSetting" = betterproto.message_field(20)
    account_settings: "ResAccountSettings" = betterproto.message_field(21)
    mod_nickname_time: "ResModNicknameTime" = betterproto.message_field(22)
    misc: "ResMisc" = betterproto.message_field(23)
    announcement: "ResAnnouncement" = betterproto.message_field(24)
    activity_list: "ResActivityList" = betterproto.message_field(26)
    character_info: "ResCharacterInfo" = betterproto.message_field(27)
    all_common_views: "ResAllcommonViews" = betterproto.message_field(28)
    collected_game_record_list: "ResCollectedGameRecordList" = (
        betterproto.message_field(29)
    )
    maintain_notice: "ResFetchMaintainNotice" = betterproto.message_field(30)


@dataclass(eq=False, repr=False)
class ReqUpgradeVillageBuilding(betterproto.Message):
    building_id: int = betterproto.uint32_field(1)
    activity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqReceiveVillageBuildingReward(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    building_id: int = betterproto.uint32_field(2)
    rewards: List["RewardSlot"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ResReceiveVillageBuildingReward(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    reward_items: List["ExecuteReward"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqStartVillageTrip(betterproto.Message):
    dest: int = betterproto.uint32_field(1)
    activity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqReceiveVillageTripReward(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    dest_id: int = betterproto.uint32_field(2)
    rewards: List["RewardSlot"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ResReceiveVillageTripReward(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    reward_items: List["ExecuteReward"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqCompleteVillageTask(betterproto.Message):
    task_id: int = betterproto.uint32_field(1)
    activity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResCompleteVillageTask(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    reward_items: List["ExecuteReward"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqGetFriendVillageData(betterproto.Message):
    account_list: List[int] = betterproto.uint32_field(1)
    activity_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResGetFriendVillageData(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    list: List["ResGetFriendVillageDataFriendVillageData"] = betterproto.message_field(
        2
    )


@dataclass(eq=False, repr=False)
class ResGetFriendVillageDataFriendVillageData(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqSetVillageWorker(betterproto.Message):
    building_id: int = betterproto.uint32_field(1)
    worker_pos: int = betterproto.uint32_field(2)
    activity_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResSetVillageWorker(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    building: "VillageBuildingData" = betterproto.message_field(2)
    update_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqNextRoundVillage(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResNextRoundVillage(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    activity_data: "ActivityVillageData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqResolveFestivalActivityProposal(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    id: int = betterproto.uint32_field(2)
    select: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResResolveFestivalActivityProposal(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    effected_buff: List[int] = betterproto.uint32_field(2)
    result: int = betterproto.uint32_field(3)
    reward_items: List["ExecuteResult"] = betterproto.message_field(4)
    level: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ReqResolveFestivalActivityEvent(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    id: int = betterproto.uint32_field(2)
    select: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResResolveFestivalActivityEvent(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    effected_buff: List[int] = betterproto.uint32_field(2)
    reward_items: List["ExecuteResult"] = betterproto.message_field(4)
    ending_id: int = betterproto.uint32_field(5)
    level: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ReqBuyFestivalProposal(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResBuyFestivalProposal(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    new_proposal: "FestivalProposalData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqIslandActivityMove(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    zone_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqIslandActivityBuy(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    items: List["ReqIslandActivityBuyBuyItems"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqIslandActivityBuyBuyItems(betterproto.Message):
    goods_id: int = betterproto.uint32_field(2)
    pos: List[int] = betterproto.uint32_field(3)
    rotate: int = betterproto.uint32_field(4)
    bag_id: int = betterproto.uint32_field(5)
    price: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ReqIslandActivitySell(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    items: List["ReqIslandActivitySellSellItem"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqIslandActivitySellSellItem(betterproto.Message):
    bag_id: int = betterproto.uint32_field(2)
    id: int = betterproto.uint32_field(3)
    price: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ReqIslandActivityTidyBag(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    bag_data: List["ReqIslandActivityTidyBagBagData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqIslandActivityTidyBagBagData(betterproto.Message):
    bag_id: int = betterproto.uint32_field(2)
    items: List["ReqIslandActivityTidyBagBagDataITemData"] = betterproto.message_field(
        3
    )
    drops: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ReqIslandActivityTidyBagBagDataITemData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    pos: List[int] = betterproto.uint32_field(2)
    rotate: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqIslandActivityUnlockBagGrid(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    bag_id: int = betterproto.uint32_field(2)
    pos: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ContestSetting(betterproto.Message):
    level_limit: List["ContestSettingLevelLimit"] = betterproto.message_field(1)
    game_limit: int = betterproto.uint32_field(2)
    system_broadcast: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ContestSettingLevelLimit(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    value: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateCustomizedContest(betterproto.Message):
    name: str = betterproto.string_field(1)
    open_show: int = betterproto.uint32_field(2)
    game_rule_setting: "GameMode" = betterproto.message_field(3)
    start_time: int = betterproto.uint32_field(4)
    end_time: int = betterproto.uint32_field(5)
    auto_match: int = betterproto.uint32_field(6)
    rank_rule: int = betterproto.uint32_field(7)
    contest_setting: "ContestSetting" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class ResCreateCustomizedContest(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    unique_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqFetchmanagerCustomizedContestList(betterproto.Message):
    lang: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResFetchManagerCustomizedContestList(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    contests: List["CustomizedContestBase"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqFetchManagerCustomizedContest(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResFetchManagerCustomizedContest(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    name: str = betterproto.string_field(2)
    open_show: int = betterproto.uint32_field(3)
    game_rule_setting: "GameMode" = betterproto.message_field(4)
    start_time: int = betterproto.uint32_field(5)
    end_time: int = betterproto.uint32_field(6)
    auto_match: int = betterproto.uint32_field(7)
    rank_rule: int = betterproto.uint32_field(8)
    check_state: int = betterproto.uint32_field(9)
    checking_name: str = betterproto.string_field(10)
    contest_setting: "ContestSetting" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class ReqUpdateManagerCustomizedContest(betterproto.Message):
    name: str = betterproto.string_field(1)
    open_show: int = betterproto.uint32_field(2)
    game_rule_setting: "GameMode" = betterproto.message_field(3)
    start_time: int = betterproto.uint32_field(4)
    end_time: int = betterproto.uint32_field(5)
    unique_id: int = betterproto.uint32_field(6)
    auto_match: int = betterproto.uint32_field(7)
    rank_rule: int = betterproto.uint32_field(8)
    contest_setting: "ContestSetting" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class ReqFetchContestPlayerRank(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    limit: int = betterproto.uint32_field(2)
    offset: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResFetchContestPlayerRank(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    total: int = betterproto.uint32_field(2)
    rank: List["ResFetchContestPlayerRankSeasonRank"] = betterproto.message_field(3)
    player_data: "ResFetchContestPlayerRankPlayerData" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ResFetchContestPlayerRankContestPlayerAccountData(betterproto.Message):
    total_game_count: int = betterproto.uint32_field(1)
    recent_games: List[
        "ResFetchContestPlayerRankContestPlayerAccountDataContestGameResult"
    ] = betterproto.message_field(2)
    highest_series_points: List[
        "ResFetchContestPlayerRankContestPlayerAccountDataContestSeriesGameResult"
    ] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ResFetchContestPlayerRankContestPlayerAccountDataContestGameResult(
    betterproto.Message
):
    rank: int = betterproto.uint32_field(1)
    total_point: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class ResFetchContestPlayerRankContestPlayerAccountDataContestSeriesGameResult(
    betterproto.Message
):
    key: int = betterproto.uint32_field(1)
    results: List[
        "ResFetchContestPlayerRankContestPlayerAccountDataContestGameResult"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResFetchContestPlayerRankSeasonRank(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    nickname: str = betterproto.string_field(2)
    data: "ResFetchContestPlayerRankContestPlayerAccountData" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class ResFetchContestPlayerRankPlayerData(betterproto.Message):
    rank: int = betterproto.uint32_field(1)
    data: "ResFetchContestPlayerRankContestPlayerAccountData" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class ReqFetchReadyPlayerList(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResFetchReadyPlayerList(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    list: List["ResFetchReadyPlayerListPlayer"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResFetchReadyPlayerListPlayer(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    nickname: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqCreateGamePlan(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    account_list: List[int] = betterproto.uint32_field(2)
    game_start_time: int = betterproto.uint32_field(3)
    shuffle_seats: int = betterproto.uint32_field(4)
    ai_level: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ResGenerateContestManagerLoginCode(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    code: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqAmuletActivityStartGame(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResAmuletActivityStartGame(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    game: "AmuletGameData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqAmuletActivityOperate(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    type: int = betterproto.uint32_field(2)
    tile: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResAmuletActivityOperate(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    hu_result: "AmuletHuleOperateResult" = betterproto.message_field(2)
    gang_result: "AmuletGangOperateResult" = betterproto.message_field(3)
    deal_result: "AmuletDealTileResult" = betterproto.message_field(4)
    upgrade_result: "AmuletUpgradeResult" = betterproto.message_field(5)
    upgraded: bool = betterproto.bool_field(6)
    failed: bool = betterproto.bool_field(7)
    game_update: "AmuletGameUpdateData" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class ReqAmuletActivityChangeHands(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    hands: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResAmuletActivityChangeHands(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    hands: List[int] = betterproto.uint32_field(2)
    remain_change_tile_count: int = betterproto.uint32_field(3)
    ting_list: List["AmuletActivityTingInfo"] = betterproto.message_field(4)
    effect_list: List["AmuletEffectData"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ReqAmuletActivityUpgrade(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResAmuletActivityUpgrade(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    game: "AmuletGameData" = betterproto.message_field(2)
    hook_effect: List["AmuletActivityHookEffect"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ReqAmuletActivitySelectPack(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResAmuletActivitySelectPack(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    effect_list: List["AmuletEffectData"] = betterproto.message_field(2)
    shop: "AmuletGameShopData" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ReqAmuletActivityBuy(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResAmuletActivityBuy(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    coin: int = betterproto.uint32_field(2)
    shop: "AmuletGameShopData" = betterproto.message_field(3)
    stage: int = betterproto.uint32_field(4)
    effect_list: List["AmuletEffectData"] = betterproto.message_field(5)
    total_consumed_coin: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ReqAmuletActivitySellEffect(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResAmuletActivitySellEffect(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    coin: int = betterproto.uint32_field(2)
    effect_list: List["AmuletEffectData"] = betterproto.message_field(3)
    game_update: "AmuletGameUpdateData" = betterproto.message_field(4)
    remain_change_tile_count: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ReqAmuletActivityEffectSort(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    sorted_id: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqAmuletActivityGiveup(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqAmuletActivityRefreshShop(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResAmuletActivityRefreshShop(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    shop: "AmuletGameShopData" = betterproto.message_field(2)
    coin: int = betterproto.uint32_field(3)
    effect_list: List["AmuletEffectData"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ReqAmuletActivitySelectFreeEffect(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    selected_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResAmuletActivitySelectFreeEffect(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    game_update: "AmuletGameUpdateData" = betterproto.message_field(3)
    remain_change_tile_count: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ReqAmuletActivityUpgradeShopBuff(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResAmuletActivityUpgradeShopBuff(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    game_update: "AmuletGameUpdateData" = betterproto.message_field(3)
    shop_buff_list: List["AmuletEffectData"] = betterproto.message_field(4)
    total_consumed_coin: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ReqAmuletActivityEndShopping(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ResAmuletActivityEndShopping(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    game_update: "AmuletGameUpdateData" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ReqAmuletActivitySetSkillLevel(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    skill: List["AmuletSkillData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResAmuletActivityMaintainInfo(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    mode: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqStoryActivityUnlock(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    story_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqStoryActivityUnlockEnding(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    story_id: int = betterproto.uint32_field(2)
    ending_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqStoryActivityReceiveEndingReward(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    story_id: int = betterproto.uint32_field(2)
    ending_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResStoryReward(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    reward_items: List["ExecuteReward"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqStoryActivityReceiveFinishReward(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    story_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqStoryActivityReceiveAllFinishReward(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    story_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReqStoryActivityUnlockEndingAndReceive(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    story_id: int = betterproto.uint32_field(2)
    ending_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ResStoryActivityUnlockEndingAndReceive(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    ending_reward: List["ExecuteReward"] = betterproto.message_field(2)
    finish_reward: List["ExecuteReward"] = betterproto.message_field(3)
    all_finish_reward: List["ExecuteReward"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ReqFetchActivityRank(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    account_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResFetchActivityRank(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    items: List["ResFetchActivityRankActivityRankItem"] = betterproto.message_field(4)
    self: "ResFetchActivityRankActivityRankItem" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ResFetchActivityRankActivityRankItem(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    score: int = betterproto.uint64_field(2)
    data: str = betterproto.string_field(3)
    rank: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ReqFetchQuestionnaireList(betterproto.Message):
    lang: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResFetchQuestionnaireList(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    list: List["QuestionnaireBrief"] = betterproto.message_field(2)
    finished_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ReqFetchQuestionnaireDetail(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    lang: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ResFetchQuestionnaireDetail(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    detail: "QuestionnaireDetail" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqSetVerifiedHidden(betterproto.Message):
    verified_hidden: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReqSubmitQuestionnaire(betterproto.Message):
    questionnaire_id: int = betterproto.uint32_field(1)
    questionnaire_version_id: int = betterproto.uint32_field(2)
    answers: List["ReqSubmitQuestionnaireQuestionnaireAnswer"] = (
        betterproto.message_field(3)
    )
    open_time: int = betterproto.uint32_field(4)
    finish_time: int = betterproto.uint32_field(5)
    client: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ReqSubmitQuestionnaireQuestionnaireAnswer(betterproto.Message):
    question_id: int = betterproto.uint32_field(1)
    values: List[
        "ReqSubmitQuestionnaireQuestionnaireAnswerQuestionnaireAnswerValue"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReqSubmitQuestionnaireQuestionnaireAnswerQuestionnaireAnswerValue(
    betterproto.Message
):
    value: str = betterproto.string_field(1)
    custom_input: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ReqAuthGame(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    token: str = betterproto.string_field(2)
    game_uuid: str = betterproto.string_field(3)
    session: str = betterproto.string_field(4)
    gift: str = betterproto.string_field(5)
    vs: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ResAuthGame(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    players: List["PlayerGameView"] = betterproto.message_field(2)
    seat_list: List[int] = betterproto.uint32_field(3)
    is_game_start: bool = betterproto.bool_field(4)
    game_config: "GameConfig" = betterproto.message_field(5)
    ready_id_list: List[int] = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GameRestore(betterproto.Message):
    snapshot: "GameSnapshot" = betterproto.message_field(1)
    actions: List["ActionPrototype"] = betterproto.message_field(2)
    passed_waiting_time: int = betterproto.uint32_field(3)
    game_state: int = betterproto.uint32_field(4)
    start_time: int = betterproto.uint32_field(5)
    last_pause_time_ms: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ResEnterGame(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    is_end: bool = betterproto.bool_field(2)
    step: int = betterproto.uint32_field(3)
    game_restore: "GameRestore" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ReqSyncGame(betterproto.Message):
    round_id: str = betterproto.string_field(1)
    step: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ResSyncGame(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    is_end: bool = betterproto.bool_field(2)
    step: int = betterproto.uint32_field(3)
    game_restore: "GameRestore" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ReqSelfOperation(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    index: int = betterproto.uint32_field(2)
    tile: str = betterproto.string_field(3)
    cancel_operation: bool = betterproto.bool_field(4)
    moqie: bool = betterproto.bool_field(5)
    timeuse: int = betterproto.uint32_field(6)
    tile_state: int = betterproto.int32_field(7)
    change_tiles: List[str] = betterproto.string_field(8)
    tile_states: List[int] = betterproto.int32_field(9)
    gap_type: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class ReqChiPengGang(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    index: int = betterproto.uint32_field(2)
    cancel_operation: bool = betterproto.bool_field(3)
    timeuse: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ReqBroadcastInGame(betterproto.Message):
    content: str = betterproto.string_field(1)
    except_self: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ReqGmCommandInGaming(betterproto.Message):
    json_data: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResGamePlayerState(betterproto.Message):
    error: "Error" = betterproto.message_field(1)
    state_list: List["GamePlayerState"] = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class ReqVoteGameEnd(betterproto.Message):
    yes: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class ResGameEndVote(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    vote_cd_end_time: int = betterproto.uint32_field(2)
    error: "Error" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ReqAuthObserve(betterproto.Message):
    token: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResStartObserve(betterproto.Message):
    head: "GameLiveHead" = betterproto.message_field(1)
    passed: "GameLiveSegment" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class NotifyNewGame(betterproto.Message):
    game_uuid: str = betterproto.string_field(1)
    player_list: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class NotifyPlayerLoadGameReady(betterproto.Message):
    ready_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class NotifyGameBroadcast(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    content: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class NotifyGameEndResult(betterproto.Message):
    result: "GameEndResult" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NotifyGameTerminate(betterproto.Message):
    reason: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class NotifyPlayerConnectionState(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    state: "GamePlayerState" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class NotifyAccountLevelChange(betterproto.Message):
    origin: "AccountLevel" = betterproto.message_field(1)
    final: "AccountLevel" = betterproto.message_field(2)
    type: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class NotifyGameFinishReward(betterproto.Message):
    mode_id: int = betterproto.uint32_field(1)
    level_change: "NotifyGameFinishRewardLevelChange" = betterproto.message_field(2)
    match_chest: "NotifyGameFinishRewardMatchChest" = betterproto.message_field(3)
    main_character: "NotifyGameFinishRewardMainCharacter" = betterproto.message_field(4)
    character_gift: "NotifyGameFinishRewardCharacterGift" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class NotifyGameFinishRewardLevelChange(betterproto.Message):
    origin: "AccountLevel" = betterproto.message_field(1)
    final: "AccountLevel" = betterproto.message_field(2)
    type: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class NotifyGameFinishRewardMatchChest(betterproto.Message):
    chest_id: int = betterproto.uint32_field(1)
    origin: int = betterproto.uint32_field(2)
    final: int = betterproto.uint32_field(3)
    is_graded: bool = betterproto.bool_field(4)
    rewards: List["RewardSlot"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class NotifyGameFinishRewardMainCharacter(betterproto.Message):
    level: int = betterproto.uint32_field(1)
    exp: int = betterproto.uint32_field(2)
    add: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class NotifyGameFinishRewardCharacterGift(betterproto.Message):
    origin: int = betterproto.uint32_field(1)
    final: int = betterproto.uint32_field(2)
    add: int = betterproto.uint32_field(3)
    is_graded: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class NotifyActivityReward(betterproto.Message):
    activity_reward: List["NotifyActivityRewardActivityReward"] = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class NotifyActivityRewardActivityReward(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    rewards: List["RewardSlot"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class NotifyActivityPoint(betterproto.Message):
    activity_points: List["NotifyActivityPointActivityPoint"] = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class NotifyActivityPointActivityPoint(betterproto.Message):
    activity_id: int = betterproto.uint32_field(1)
    point: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class NotifyLeaderboardPoint(betterproto.Message):
    leaderboard_points: List["NotifyLeaderboardPointLeaderboardPoint"] = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class NotifyLeaderboardPointLeaderboardPoint(betterproto.Message):
    leaderboard_id: int = betterproto.uint32_field(1)
    point: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class NotifyGamePause(betterproto.Message):
    paused: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class NotifyEndGameVote(betterproto.Message):
    results: List["NotifyEndGameVoteVoteResult"] = betterproto.message_field(1)
    start_time: int = betterproto.uint32_field(2)
    duration_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class NotifyEndGameVoteVoteResult(betterproto.Message):
    account_id: int = betterproto.uint32_field(1)
    yes: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class NotifyObserveData(betterproto.Message):
    unit: "GameLiveUnit" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ActionMjStart(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class NewRoundOpenedTiles(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    tiles: List[str] = betterproto.string_field(2)
    count: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MuyuInfo(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)
    count_max: int = betterproto.uint32_field(3)
    id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class ChuanmaGang(betterproto.Message):
    old_scores: List[int] = betterproto.int32_field(1)
    delta_scores: List[int] = betterproto.int32_field(2)
    scores: List[int] = betterproto.int32_field(3)
    gameend: "GameEnd" = betterproto.message_field(4)
    hules_history: List["HuleInfo"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class YongchangInfo(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    moqie_count: int = betterproto.uint32_field(2)
    moqie_bonus: int = betterproto.uint32_field(3)
    shouqie_count: int = betterproto.uint32_field(4)
    shouqie_bonus: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ActionNewCard(betterproto.Message):
    field_spell: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class RecordNewCard(betterproto.Message):
    field_spell: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ActionNewRound(betterproto.Message):
    chang: int = betterproto.uint32_field(1)
    ju: int = betterproto.uint32_field(2)
    ben: int = betterproto.uint32_field(3)
    tiles: List[str] = betterproto.string_field(4)
    dora: str = betterproto.string_field(5)
    scores: List[int] = betterproto.int32_field(6)
    operation: "OptionalOperationList" = betterproto.message_field(7)
    liqibang: int = betterproto.uint32_field(8)
    tingpais0: List["TingPaiDiscardInfo"] = betterproto.message_field(9)
    tingpais1: List["TingPaiInfo"] = betterproto.message_field(10)
    al: bool = betterproto.bool_field(11)
    md5: str = betterproto.string_field(12)
    left_tile_count: int = betterproto.uint32_field(13)
    doras: List[str] = betterproto.string_field(14)
    opens: List["NewRoundOpenedTiles"] = betterproto.message_field(15)
    muyu: "MuyuInfo" = betterproto.message_field(16)
    ju_count: int = betterproto.uint32_field(17)
    field_spell: int = betterproto.uint32_field(18)
    sha256: str = betterproto.string_field(19)
    yongchang: "YongchangInfo" = betterproto.message_field(20)
    salt_sha256: str = betterproto.string_field(21)


@dataclass(eq=False, repr=False)
class RecordNewRound(betterproto.Message):
    chang: int = betterproto.uint32_field(1)
    ju: int = betterproto.uint32_field(2)
    ben: int = betterproto.uint32_field(3)
    dora: str = betterproto.string_field(4)
    scores: List[int] = betterproto.int32_field(5)
    liqibang: int = betterproto.uint32_field(6)
    tiles0: List[str] = betterproto.string_field(7)
    tiles1: List[str] = betterproto.string_field(8)
    tiles2: List[str] = betterproto.string_field(9)
    tiles3: List[str] = betterproto.string_field(10)
    tingpai: List["RecordNewRoundTingPai"] = betterproto.message_field(11)
    operation: "OptionalOperationList" = betterproto.message_field(12)
    md5: str = betterproto.string_field(13)
    paishan: str = betterproto.string_field(14)
    left_tile_count: int = betterproto.uint32_field(15)
    doras: List[str] = betterproto.string_field(16)
    opens: List["NewRoundOpenedTiles"] = betterproto.message_field(17)
    muyu: "MuyuInfo" = betterproto.message_field(18)
    operations: List["OptionalOperationList"] = betterproto.message_field(19)
    ju_count: int = betterproto.uint32_field(20)
    field_spell: int = betterproto.uint32_field(21)
    sha256: str = betterproto.string_field(22)
    yongchang: "YongchangInfo" = betterproto.message_field(23)
    salt_sha256: str = betterproto.string_field(24)
    salt: str = betterproto.string_field(25)


@dataclass(eq=False, repr=False)
class RecordNewRoundTingPai(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    tingpais1: List["TingPaiInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GameSnapshot(betterproto.Message):
    chang: int = betterproto.uint32_field(1)
    ju: int = betterproto.uint32_field(2)
    ben: int = betterproto.uint32_field(3)
    index_player: int = betterproto.uint32_field(4)
    left_tile_count: int = betterproto.uint32_field(5)
    hands: List[str] = betterproto.string_field(6)
    doras: List[str] = betterproto.string_field(7)
    liqibang: int = betterproto.uint32_field(8)
    players: List["GameSnapshotPlayerSnapshot"] = betterproto.message_field(9)
    zhenting: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class GameSnapshotPlayerSnapshot(betterproto.Message):
    score: int = betterproto.int32_field(1)
    liqiposition: int = betterproto.int32_field(2)
    tilenum: int = betterproto.uint32_field(3)
    qipais: List[str] = betterproto.string_field(4)
    mings: List["GameSnapshotPlayerSnapshotFulu"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class GameSnapshotPlayerSnapshotFulu(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    tile: List[str] = betterproto.string_field(2)
    from_: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class ActionPrototype(betterproto.Message):
    step: int = betterproto.uint32_field(1)
    name: str = betterproto.string_field(2)
    data: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class GameDetailRecords(betterproto.Message):
    records: List[bytes] = betterproto.bytes_field(1)
    version: int = betterproto.uint32_field(2)
    actions: List["GameAction"] = betterproto.message_field(3)
    bar: bytes = betterproto.bytes_field(4)


@dataclass(eq=False, repr=False)
class GameSelfOperation(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    index: int = betterproto.uint32_field(2)
    tile: str = betterproto.string_field(3)
    cancel_operation: bool = betterproto.bool_field(4)
    moqie: bool = betterproto.bool_field(5)
    timeuse: int = betterproto.uint32_field(6)
    tile_state: int = betterproto.int32_field(7)
    change_tiles: List[str] = betterproto.string_field(8)
    tile_states: List[int] = betterproto.int32_field(9)
    gap_type: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class GameChiPengGang(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    index: int = betterproto.uint32_field(2)
    cancel_operation: bool = betterproto.bool_field(3)
    timeuse: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GameVoteGameEnd(betterproto.Message):
    yes: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class GameUserInput(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    type: int = betterproto.uint32_field(2)
    emo: int = betterproto.uint32_field(3)
    operation: "GameSelfOperation" = betterproto.message_field(10)
    cpg: "GameChiPengGang" = betterproto.message_field(11)
    vote: "GameVoteGameEnd" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class GameUserEvent(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GameAction(betterproto.Message):
    passed: int = betterproto.uint32_field(1)
    type: int = betterproto.uint32_field(2)
    result: bytes = betterproto.bytes_field(3)
    user_input: "GameUserInput" = betterproto.message_field(4)
    user_event: "GameUserEvent" = betterproto.message_field(5)
    game_event: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class OptionalOperation(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    combination: List[str] = betterproto.string_field(2)
    change_tiles: List[str] = betterproto.string_field(3)
    change_tile_states: List[int] = betterproto.int32_field(4)
    gap_type: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class OptionalOperationList(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    operation_list: List["OptionalOperation"] = betterproto.message_field(2)
    time_add: int = betterproto.uint32_field(4)
    time_fixed: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class LiQiSuccess(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    score: int = betterproto.int32_field(2)
    liqibang: int = betterproto.uint32_field(3)
    failed: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class FanInfo(betterproto.Message):
    name: str = betterproto.string_field(1)
    val: int = betterproto.uint32_field(2)
    id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class HuleInfo(betterproto.Message):
    hand: List[str] = betterproto.string_field(1)
    ming: List[str] = betterproto.string_field(2)
    hu_tile: str = betterproto.string_field(3)
    seat: int = betterproto.uint32_field(4)
    zimo: bool = betterproto.bool_field(5)
    qinjia: bool = betterproto.bool_field(6)
    liqi: bool = betterproto.bool_field(7)
    doras: List[str] = betterproto.string_field(8)
    li_doras: List[str] = betterproto.string_field(9)
    yiman: bool = betterproto.bool_field(10)
    count: int = betterproto.uint32_field(11)
    fans: List["FanInfo"] = betterproto.message_field(12)
    fu: int = betterproto.uint32_field(13)
    title: str = betterproto.string_field(14)
    point_rong: int = betterproto.uint32_field(15)
    point_zimo_qin: int = betterproto.uint32_field(16)
    point_zimo_xian: int = betterproto.uint32_field(17)
    title_id: int = betterproto.uint32_field(18)
    point_sum: int = betterproto.uint32_field(19)
    dadian: int = betterproto.uint32_field(20)
    baopai: int = betterproto.uint32_field(21)
    baopai_seats: List[int] = betterproto.uint32_field(22)
    lines: List[str] = betterproto.string_field(23)
    tianming_bonus: int = betterproto.uint32_field(24)


@dataclass(eq=False, repr=False)
class TingPaiInfo(betterproto.Message):
    tile: str = betterproto.string_field(1)
    haveyi: bool = betterproto.bool_field(2)
    yiman: bool = betterproto.bool_field(3)
    count: int = betterproto.uint32_field(4)
    fu: int = betterproto.uint32_field(5)
    biao_dora_count: int = betterproto.uint32_field(6)
    yiman_zimo: bool = betterproto.bool_field(7)
    count_zimo: int = betterproto.uint32_field(8)
    fu_zimo: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class TingPaiDiscardInfo(betterproto.Message):
    tile: str = betterproto.string_field(1)
    zhenting: bool = betterproto.bool_field(2)
    infos: List["TingPaiInfo"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class HunZhiYiJiBuffInfo(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    continue_deal_count: int = betterproto.uint32_field(2)
    overload: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class GameEnd(betterproto.Message):
    scores: List[int] = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class ActionSelectGap(betterproto.Message):
    gap_types: List[int] = betterproto.uint32_field(1)
    tingpais0: List["TingPaiDiscardInfo"] = betterproto.message_field(2)
    tingpais1: List["TingPaiInfo"] = betterproto.message_field(3)
    operation: "OptionalOperationList" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class RecordSelectGap(betterproto.Message):
    gap_types: List[int] = betterproto.uint32_field(1)
    tingpai: List["RecordSelectGapTingPai"] = betterproto.message_field(2)
    operation: "OptionalOperationList" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class RecordSelectGapTingPai(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    tingpais1: List["TingPaiInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ActionChangeTile(betterproto.Message):
    in_tiles: List[str] = betterproto.string_field(1)
    in_tile_states: List[int] = betterproto.int32_field(2)
    out_tiles: List[str] = betterproto.string_field(3)
    out_tile_states: List[int] = betterproto.int32_field(4)
    doras: List[str] = betterproto.string_field(5)
    tingpais0: List["TingPaiDiscardInfo"] = betterproto.message_field(6)
    tingpais1: List["TingPaiInfo"] = betterproto.message_field(7)
    operation: "OptionalOperationList" = betterproto.message_field(8)
    change_type: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class RecordChangeTile(betterproto.Message):
    doras: List[str] = betterproto.string_field(1)
    tingpai: List["RecordChangeTileTingPai"] = betterproto.message_field(2)
    change_tile_infos: List["RecordChangeTileChangeTile"] = betterproto.message_field(3)
    operation: "OptionalOperationList" = betterproto.message_field(4)
    change_type: int = betterproto.uint32_field(5)
    operations: List["OptionalOperationList"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class RecordChangeTileTingPai(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    tingpais1: List["TingPaiInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RecordChangeTileChangeTile(betterproto.Message):
    in_tiles: List[str] = betterproto.string_field(1)
    in_tile_states: List[int] = betterproto.int32_field(2)
    out_tiles: List[str] = betterproto.string_field(3)
    out_tile_states: List[int] = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class ActionRevealTile(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    is_liqi: bool = betterproto.bool_field(2)
    is_wliqi: bool = betterproto.bool_field(3)
    moqie: bool = betterproto.bool_field(4)
    scores: List[int] = betterproto.int32_field(5)
    liqibang: int = betterproto.uint32_field(6)
    operation: "OptionalOperationList" = betterproto.message_field(7)
    tingpais: List["TingPaiInfo"] = betterproto.message_field(8)
    tile: str = betterproto.string_field(9)
    zhenting: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class RecordRevealTile(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    is_liqi: bool = betterproto.bool_field(2)
    is_wliqi: bool = betterproto.bool_field(3)
    moqie: bool = betterproto.bool_field(4)
    scores: List[int] = betterproto.int32_field(5)
    liqibang: int = betterproto.uint32_field(6)
    operations: List["OptionalOperationList"] = betterproto.message_field(7)
    tingpais: List["TingPaiInfo"] = betterproto.message_field(8)
    tile: str = betterproto.string_field(9)
    zhenting: List[bool] = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class ActionUnveilTile(betterproto.Message):
    seat: int = betterproto.int32_field(1)
    scores: List[int] = betterproto.int32_field(2)
    liqibang: int = betterproto.uint32_field(3)
    operation: "OptionalOperationList" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class RecordUnveilTile(betterproto.Message):
    seat: int = betterproto.int32_field(1)
    scores: List[int] = betterproto.int32_field(2)
    liqibang: int = betterproto.uint32_field(3)
    operation: "OptionalOperationList" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ActionLockTile(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    scores: List[int] = betterproto.int32_field(2)
    liqibang: int = betterproto.uint32_field(3)
    tile: str = betterproto.string_field(4)
    operation: "OptionalOperationList" = betterproto.message_field(5)
    zhenting: bool = betterproto.bool_field(6)
    tingpais: List["TingPaiInfo"] = betterproto.message_field(7)
    doras: List[str] = betterproto.string_field(8)
    lock_state: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class RecordLockTile(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    scores: List[int] = betterproto.int32_field(2)
    liqibang: int = betterproto.uint32_field(3)
    tile: str = betterproto.string_field(4)
    operation: List["OptionalOperationList"] = betterproto.message_field(5)
    zhentings: List[bool] = betterproto.bool_field(6)
    tingpais: List["TingPaiInfo"] = betterproto.message_field(7)
    doras: List[str] = betterproto.string_field(8)
    lock_state: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class ActionDiscardTile(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    tile: str = betterproto.string_field(2)
    is_liqi: bool = betterproto.bool_field(3)
    operation: "OptionalOperationList" = betterproto.message_field(4)
    moqie: bool = betterproto.bool_field(5)
    zhenting: bool = betterproto.bool_field(6)
    tingpais: List["TingPaiInfo"] = betterproto.message_field(7)
    doras: List[str] = betterproto.string_field(8)
    is_wliqi: bool = betterproto.bool_field(9)
    tile_state: int = betterproto.uint32_field(10)
    muyu: "MuyuInfo" = betterproto.message_field(11)
    revealed: bool = betterproto.bool_field(12)
    scores: List[int] = betterproto.int32_field(13)
    liqibang: int = betterproto.uint32_field(14)
    yongchang: "YongchangInfo" = betterproto.message_field(25)
    hun_zhi_yi_ji_info: "HunZhiYiJiBuffInfo" = betterproto.message_field(26)


@dataclass(eq=False, repr=False)
class RecordDiscardTile(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    tile: str = betterproto.string_field(2)
    is_liqi: bool = betterproto.bool_field(3)
    moqie: bool = betterproto.bool_field(5)
    zhenting: List[bool] = betterproto.bool_field(6)
    tingpais: List["TingPaiInfo"] = betterproto.message_field(7)
    doras: List[str] = betterproto.string_field(8)
    is_wliqi: bool = betterproto.bool_field(9)
    operations: List["OptionalOperationList"] = betterproto.message_field(10)
    tile_state: int = betterproto.uint32_field(11)
    muyu: "MuyuInfo" = betterproto.message_field(12)
    yongchang: "YongchangInfo" = betterproto.message_field(13)
    hun_zhi_yi_ji_info: "HunZhiYiJiBuffInfo" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class ActionDealTile(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    tile: str = betterproto.string_field(2)
    left_tile_count: int = betterproto.uint32_field(3)
    operation: "OptionalOperationList" = betterproto.message_field(4)
    liqi: "LiQiSuccess" = betterproto.message_field(5)
    doras: List[str] = betterproto.string_field(6)
    zhenting: bool = betterproto.bool_field(7)
    tingpais: List["TingPaiDiscardInfo"] = betterproto.message_field(8)
    tile_state: int = betterproto.uint32_field(9)
    muyu: "MuyuInfo" = betterproto.message_field(10)
    tile_index: int = betterproto.uint32_field(11)
    hun_zhi_yi_ji_info: "HunZhiYiJiBuffInfo" = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class RecordDealTile(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    tile: str = betterproto.string_field(2)
    left_tile_count: int = betterproto.uint32_field(3)
    liqi: "LiQiSuccess" = betterproto.message_field(5)
    doras: List[str] = betterproto.string_field(6)
    zhenting: List[bool] = betterproto.bool_field(7)
    operation: "OptionalOperationList" = betterproto.message_field(8)
    tile_state: int = betterproto.uint32_field(9)
    muyu: "MuyuInfo" = betterproto.message_field(11)
    tile_index: int = betterproto.uint32_field(12)
    hun_zhi_yi_ji_info: "HunZhiYiJiBuffInfo" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class ActionFillAwaitingTiles(betterproto.Message):
    awaiting_tiles: List[str] = betterproto.string_field(1)
    left_tile_count: int = betterproto.uint32_field(2)
    operation: "OptionalOperationList" = betterproto.message_field(3)
    liqi: "LiQiSuccess" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class RecordFillAwaitingTiles(betterproto.Message):
    awaiting_tiles: List[str] = betterproto.string_field(1)
    left_tile_count: int = betterproto.uint32_field(2)
    operation: "OptionalOperationList" = betterproto.message_field(3)
    liqi: "LiQiSuccess" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ActionChiPengGang(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    type: int = betterproto.uint32_field(2)
    tiles: List[str] = betterproto.string_field(3)
    froms: List[int] = betterproto.uint32_field(4)
    liqi: "LiQiSuccess" = betterproto.message_field(5)
    operation: "OptionalOperationList" = betterproto.message_field(6)
    zhenting: bool = betterproto.bool_field(7)
    tingpais: List["TingPaiDiscardInfo"] = betterproto.message_field(8)
    tile_states: List[int] = betterproto.uint32_field(9)
    muyu: "MuyuInfo" = betterproto.message_field(10)
    scores: List[int] = betterproto.int32_field(11)
    liqibang: int = betterproto.uint32_field(12)
    yongchang: "YongchangInfo" = betterproto.message_field(13)
    hun_zhi_yi_ji_info: "HunZhiYiJiBuffInfo" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class RecordChiPengGang(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    type: int = betterproto.uint32_field(2)
    tiles: List[str] = betterproto.string_field(3)
    froms: List[int] = betterproto.uint32_field(4)
    liqi: "LiQiSuccess" = betterproto.message_field(5)
    zhenting: List[bool] = betterproto.bool_field(7)
    operation: "OptionalOperationList" = betterproto.message_field(8)
    tile_states: List[int] = betterproto.uint32_field(9)
    muyu: "MuyuInfo" = betterproto.message_field(10)
    scores: List[int] = betterproto.int32_field(11)
    liqibang: int = betterproto.uint32_field(12)
    yongchang: "YongchangInfo" = betterproto.message_field(13)
    hun_zhi_yi_ji_info: "HunZhiYiJiBuffInfo" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class ActionGangResult(betterproto.Message):
    gang_infos: "ChuanmaGang" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RecordGangResult(betterproto.Message):
    gang_infos: "ChuanmaGang" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ActionGangResultEnd(betterproto.Message):
    gang_infos: "ChuanmaGang" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RecordGangResultEnd(betterproto.Message):
    gang_infos: "ChuanmaGang" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ActionAnGangAddGang(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    type: int = betterproto.uint32_field(2)
    tiles: str = betterproto.string_field(3)
    operation: "OptionalOperationList" = betterproto.message_field(4)
    doras: List[str] = betterproto.string_field(6)
    zhenting: bool = betterproto.bool_field(7)
    tingpais: List["TingPaiInfo"] = betterproto.message_field(8)
    muyu: "MuyuInfo" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class RecordAnGangAddGang(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    type: int = betterproto.uint32_field(2)
    tiles: str = betterproto.string_field(3)
    doras: List[str] = betterproto.string_field(6)
    operations: List["OptionalOperationList"] = betterproto.message_field(7)
    muyu: "MuyuInfo" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class ActionBaBei(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    operation: "OptionalOperationList" = betterproto.message_field(4)
    doras: List[str] = betterproto.string_field(6)
    zhenting: bool = betterproto.bool_field(7)
    tingpais: List["TingPaiInfo"] = betterproto.message_field(8)
    moqie: bool = betterproto.bool_field(9)
    tile_state: int = betterproto.uint32_field(10)
    muyu: "MuyuInfo" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class RecordBaBei(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    doras: List[str] = betterproto.string_field(6)
    operations: List["OptionalOperationList"] = betterproto.message_field(7)
    moqie: bool = betterproto.bool_field(8)
    tile_state: int = betterproto.uint32_field(10)
    muyu: "MuyuInfo" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class ActionHule(betterproto.Message):
    hules: List["HuleInfo"] = betterproto.message_field(1)
    old_scores: List[int] = betterproto.int32_field(2)
    delta_scores: List[int] = betterproto.int32_field(3)
    wait_timeout: int = betterproto.uint32_field(4)
    scores: List[int] = betterproto.int32_field(5)
    gameend: "GameEnd" = betterproto.message_field(6)
    doras: List[str] = betterproto.string_field(7)
    muyu: "MuyuInfo" = betterproto.message_field(8)
    baopai: int = betterproto.int32_field(9)
    hun_zhi_yi_ji_info: "HunZhiYiJiBuffInfo" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class RecordHule(betterproto.Message):
    hules: List["HuleInfo"] = betterproto.message_field(1)
    old_scores: List[int] = betterproto.int32_field(2)
    delta_scores: List[int] = betterproto.int32_field(3)
    wait_timeout: int = betterproto.uint32_field(4)
    scores: List[int] = betterproto.int32_field(5)
    gameend: "GameEnd" = betterproto.message_field(6)
    doras: List[str] = betterproto.string_field(7)
    muyu: "MuyuInfo" = betterproto.message_field(8)
    baopai: int = betterproto.int32_field(9)
    hun_zhi_yi_ji_info: "HunZhiYiJiBuffInfo" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class HuInfoXueZhanMid(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    hand_count: int = betterproto.uint32_field(2)
    hand: List[str] = betterproto.string_field(3)
    ming: List[str] = betterproto.string_field(4)
    hu_tile: str = betterproto.string_field(5)
    zimo: bool = betterproto.bool_field(6)
    yiman: bool = betterproto.bool_field(7)
    count: int = betterproto.uint32_field(8)
    fans: List["FanInfo"] = betterproto.message_field(9)
    fu: int = betterproto.uint32_field(10)
    title_id: int = betterproto.uint32_field(11)


@dataclass(eq=False, repr=False)
class ActionHuleXueZhanMid(betterproto.Message):
    hules: List["HuInfoXueZhanMid"] = betterproto.message_field(1)
    old_scores: List[int] = betterproto.int32_field(2)
    delta_scores: List[int] = betterproto.int32_field(3)
    scores: List[int] = betterproto.int32_field(5)
    doras: List[str] = betterproto.string_field(7)
    muyu: "MuyuInfo" = betterproto.message_field(8)
    liqi: "LiQiSuccess" = betterproto.message_field(9)
    zhenting: bool = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class RecordHuleXueZhanMid(betterproto.Message):
    hules: List["HuInfoXueZhanMid"] = betterproto.message_field(1)
    old_scores: List[int] = betterproto.int32_field(2)
    delta_scores: List[int] = betterproto.int32_field(3)
    scores: List[int] = betterproto.int32_field(5)
    doras: List[str] = betterproto.string_field(7)
    muyu: "MuyuInfo" = betterproto.message_field(8)
    liqi: "LiQiSuccess" = betterproto.message_field(9)
    zhenting: List[bool] = betterproto.bool_field(10)


@dataclass(eq=False, repr=False)
class ActionHuleXueZhanEnd(betterproto.Message):
    hules: List["HuInfoXueZhanMid"] = betterproto.message_field(1)
    old_scores: List[int] = betterproto.int32_field(2)
    delta_scores: List[int] = betterproto.int32_field(3)
    scores: List[int] = betterproto.int32_field(4)
    wait_timeout: int = betterproto.uint32_field(5)
    gameend: "GameEnd" = betterproto.message_field(6)
    doras: List[str] = betterproto.string_field(7)
    muyu: "MuyuInfo" = betterproto.message_field(8)
    hules_history: List["HuleInfo"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class RecordHuleXueZhanEnd(betterproto.Message):
    hules: List["HuInfoXueZhanMid"] = betterproto.message_field(1)
    old_scores: List[int] = betterproto.int32_field(2)
    delta_scores: List[int] = betterproto.int32_field(3)
    scores: List[int] = betterproto.int32_field(4)
    wait_timeout: int = betterproto.uint32_field(5)
    gameend: "GameEnd" = betterproto.message_field(6)
    doras: List[str] = betterproto.string_field(7)
    muyu: "MuyuInfo" = betterproto.message_field(8)
    hules_history: List["HuleInfo"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class ActionLiuJu(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    gameend: "GameEnd" = betterproto.message_field(2)
    seat: int = betterproto.uint32_field(3)
    tiles: List[str] = betterproto.string_field(4)
    liqi: "LiQiSuccess" = betterproto.message_field(5)
    allplayertiles: List[str] = betterproto.string_field(6)
    muyu: "MuyuInfo" = betterproto.message_field(7)
    hules_history: List["HuleInfo"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class RecordLiuJu(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    gameend: "GameEnd" = betterproto.message_field(2)
    seat: int = betterproto.uint32_field(3)
    tiles: List[str] = betterproto.string_field(4)
    liqi: "LiQiSuccess" = betterproto.message_field(5)
    allplayertiles: List[str] = betterproto.string_field(6)
    muyu: "MuyuInfo" = betterproto.message_field(7)
    hules_history: List["HuleInfo"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class NoTilePlayerInfo(betterproto.Message):
    tingpai: bool = betterproto.bool_field(3)
    hand: List[str] = betterproto.string_field(4)
    tings: List["TingPaiInfo"] = betterproto.message_field(5)
    already_hule: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class NoTileScoreInfo(betterproto.Message):
    seat: int = betterproto.uint32_field(1)
    old_scores: List[int] = betterproto.int32_field(2)
    delta_scores: List[int] = betterproto.int32_field(3)
    hand: List[str] = betterproto.string_field(4)
    ming: List[str] = betterproto.string_field(5)
    doras: List[str] = betterproto.string_field(6)
    score: int = betterproto.uint32_field(7)
    taxes: List[int] = betterproto.int32_field(8)
    lines: List[str] = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class ActionNoTile(betterproto.Message):
    liujumanguan: bool = betterproto.bool_field(1)
    players: List["NoTilePlayerInfo"] = betterproto.message_field(2)
    scores: List["NoTileScoreInfo"] = betterproto.message_field(3)
    gameend: bool = betterproto.bool_field(4)
    muyu: "MuyuInfo" = betterproto.message_field(5)
    hules_history: List["HuleInfo"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class RecordNoTile(betterproto.Message):
    liujumanguan: bool = betterproto.bool_field(1)
    players: List["NoTilePlayerInfo"] = betterproto.message_field(2)
    scores: List["NoTileScoreInfo"] = betterproto.message_field(3)
    gameend: bool = betterproto.bool_field(4)
    muyu: "MuyuInfo" = betterproto.message_field(5)
    hules_history: List["HuleInfo"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class PlayerLeaving(betterproto.Message):
    seat: int = betterproto.uint32_field(1)


class LobbyStub(betterproto.ServiceStub):
    async def fetch_connection_info(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResConnectionInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchConnectionInfo",
            req_common,
            ResConnectionInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_queue_info(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchQueueInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchQueueInfo",
            req_common,
            ResFetchQueueInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_queue(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/cancelQueue",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def openid_check(
        self,
        req_openid_check: "ReqOpenidCheck",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResOauth2Check":
        return await self._unary_unary(
            "/lq.Lobby/openidCheck",
            req_openid_check,
            ResOauth2Check,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def signup(
        self,
        req_signup_account: "ReqSignupAccount",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResSignupAccount":
        return await self._unary_unary(
            "/lq.Lobby/signup",
            req_signup_account,
            ResSignupAccount,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def login(
        self,
        req_login: "ReqLogin",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResLogin":
        return await self._unary_unary(
            "/lq.Lobby/login",
            req_login,
            ResLogin,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_info(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchInfo",
            req_common,
            ResFetchInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def login_success(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/loginSuccess",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def email_login(
        self,
        req_email_login: "ReqEmailLogin",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResLogin":
        return await self._unary_unary(
            "/lq.Lobby/emailLogin",
            req_email_login,
            ResLogin,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def oauth2_auth(
        self,
        req_oauth2_auth: "ReqOauth2Auth",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResOauth2Auth":
        return await self._unary_unary(
            "/lq.Lobby/oauth2Auth",
            req_oauth2_auth,
            ResOauth2Auth,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def oauth2_check(
        self,
        req_oauth2_check: "ReqOauth2Check",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResOauth2Check":
        return await self._unary_unary(
            "/lq.Lobby/oauth2Check",
            req_oauth2_check,
            ResOauth2Check,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def oauth2_signup(
        self,
        req_oauth2_signup: "ReqOauth2Signup",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResOauth2Signup":
        return await self._unary_unary(
            "/lq.Lobby/oauth2Signup",
            req_oauth2_signup,
            ResOauth2Signup,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def oauth2_login(
        self,
        req_oauth2_login: "ReqOauth2Login",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResLogin":
        return await self._unary_unary(
            "/lq.Lobby/oauth2Login",
            req_oauth2_login,
            ResLogin,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def dmm_pre_login(
        self,
        req_dmm_pre_login: "ReqDmmPreLogin",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResDmmPreLogin":
        return await self._unary_unary(
            "/lq.Lobby/dmmPreLogin",
            req_dmm_pre_login,
            ResDmmPreLogin,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_phone_verify_code(
        self,
        req_create_phone_verify_code: "ReqCreatePhoneVerifyCode",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/createPhoneVerifyCode",
            req_create_phone_verify_code,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_email_verify_code(
        self,
        req_create_email_verify_code: "ReqCreateEmailVerifyCode",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/createEmailVerifyCode",
            req_create_email_verify_code,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def verfify_code_for_secure(
        self,
        req_verify_code_for_secure: "ReqVerifyCodeForSecure",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResVerfiyCodeForSecure":
        return await self._unary_unary(
            "/lq.Lobby/verfifyCodeForSecure",
            req_verify_code_for_secure,
            ResVerfiyCodeForSecure,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def bind_phone_number(
        self,
        req_bind_phone_number: "ReqBindPhoneNumber",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/bindPhoneNumber",
            req_bind_phone_number,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def unbind_phone_number(
        self,
        req_unbind_phone_number: "ReqUnbindPhoneNumber",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/unbindPhoneNumber",
            req_unbind_phone_number,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_phone_login_bind(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchPhoneLoginBind":
        return await self._unary_unary(
            "/lq.Lobby/fetchPhoneLoginBind",
            req_common,
            ResFetchPhoneLoginBind,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_phone_login_bind(
        self,
        req_create_phone_login_bind: "ReqCreatePhoneLoginBind",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/createPhoneLoginBind",
            req_create_phone_login_bind,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def bind_email(
        self,
        req_bind_email: "ReqBindEmail",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/bindEmail",
            req_bind_email,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def modify_password(
        self,
        req_modify_password: "ReqModifyPassword",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/modifyPassword",
            req_modify_password,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def bind_account(
        self,
        req_bind_account: "ReqBindAccount",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/bindAccount",
            req_bind_account,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def logout(
        self,
        req_logout: "ReqLogout",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResLogout":
        return await self._unary_unary(
            "/lq.Lobby/logout",
            req_logout,
            ResLogout,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def heatbeat(
        self,
        req_heat_beat: "ReqHeatBeat",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/heatbeat",
            req_heat_beat,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def login_beat(
        self,
        req_login_beat: "ReqLoginBeat",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/loginBeat",
            req_login_beat,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_nickname(
        self,
        req_create_nickname: "ReqCreateNickname",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/createNickname",
            req_create_nickname,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def modify_nickname(
        self,
        req_modify_nickname: "ReqModifyNickname",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/modifyNickname",
            req_modify_nickname,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def modify_birthday(
        self,
        req_modify_birthday: "ReqModifyBirthday",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/modifyBirthday",
            req_modify_birthday,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_room(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResSelfRoom":
        return await self._unary_unary(
            "/lq.Lobby/fetchRoom",
            req_common,
            ResSelfRoom,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_gaming_info(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchGamingInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchGamingInfo",
            req_common,
            ResFetchGamingInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_room(
        self,
        req_create_room: "ReqCreateRoom",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateRoom":
        return await self._unary_unary(
            "/lq.Lobby/createRoom",
            req_create_room,
            ResCreateRoom,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def join_room(
        self,
        req_join_room: "ReqJoinRoom",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResJoinRoom":
        return await self._unary_unary(
            "/lq.Lobby/joinRoom",
            req_join_room,
            ResJoinRoom,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def leave_room(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/leaveRoom",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def ready_play(
        self,
        req_room_ready: "ReqRoomReady",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/readyPlay",
            req_room_ready,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def dressing_status(
        self,
        req_room_dressing: "ReqRoomDressing",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/dressingStatus",
            req_room_dressing,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start_room(
        self,
        req_room_start: "ReqRoomStart",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/startRoom",
            req_room_start,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def kick_player(
        self,
        req_room_kick: "ReqRoomKick",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/kickPlayer",
            req_room_kick,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def modify_room(
        self,
        req_modify_room: "ReqModifyRoom",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/modifyRoom",
            req_modify_room,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def match_game(
        self,
        req_join_match_queue: "ReqJoinMatchQueue",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/matchGame",
            req_join_match_queue,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_match(
        self,
        req_cancel_match_queue: "ReqCancelMatchQueue",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/cancelMatch",
            req_cancel_match_queue,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_account_info(
        self,
        req_account_info: "ReqAccountInfo",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAccountInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchAccountInfo",
            req_account_info,
            ResAccountInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def change_avatar(
        self,
        req_change_avatar: "ReqChangeAvatar",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/changeAvatar",
            req_change_avatar,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def receive_version_reward(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/receiveVersionReward",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_account_statistic_info(
        self,
        req_account_statistic_info: "ReqAccountStatisticInfo",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAccountStatisticInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchAccountStatisticInfo",
            req_account_statistic_info,
            ResAccountStatisticInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_account_challenge_rank_info(
        self,
        req_account_info: "ReqAccountInfo",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAccountChallengeRankInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchAccountChallengeRankInfo",
            req_account_info,
            ResAccountChallengeRankInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_account_character_info(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAccountCharacterInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchAccountCharacterInfo",
            req_common,
            ResAccountCharacterInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def shop_purchase(
        self,
        req_shop_purchase: "ReqShopPurchase",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResShopPurchase":
        return await self._unary_unary(
            "/lq.Lobby/shopPurchase",
            req_shop_purchase,
            ResShopPurchase,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_game_record(
        self,
        req_game_record: "ReqGameRecord",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResGameRecord":
        return await self._unary_unary(
            "/lq.Lobby/fetchGameRecord",
            req_game_record,
            ResGameRecord,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def read_game_record(
        self,
        req_game_record: "ReqGameRecord",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/readGameRecord",
            req_game_record,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_game_record_list(
        self,
        req_game_record_list: "ReqGameRecordList",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResGameRecordList":
        return await self._unary_unary(
            "/lq.Lobby/fetchGameRecordList",
            req_game_record_list,
            ResGameRecordList,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_game_record_list_v2(
        self,
        req_game_record_list_v2: "ReqGameRecordListV2",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResGameRecordListV2":
        return await self._unary_unary(
            "/lq.Lobby/fetchGameRecordListV2",
            req_game_record_list_v2,
            ResGameRecordListV2,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_next_game_record_list(
        self,
        req_next_game_record_list: "ReqNextGameRecordList",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResNextGameRecordList":
        return await self._unary_unary(
            "/lq.Lobby/fetchNextGameRecordList",
            req_next_game_record_list,
            ResNextGameRecordList,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_collected_game_record_list(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCollectedGameRecordList":
        return await self._unary_unary(
            "/lq.Lobby/fetchCollectedGameRecordList",
            req_common,
            ResCollectedGameRecordList,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_game_records_detail(
        self,
        req_game_records_detail: "ReqGameRecordsDetail",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResGameRecordsDetail":
        return await self._unary_unary(
            "/lq.Lobby/fetchGameRecordsDetail",
            req_game_records_detail,
            ResGameRecordsDetail,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_game_records_detail_v2(
        self,
        req_game_records_detail_v2: "ReqGameRecordsDetailV2",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResGameRecordsDetailV2":
        return await self._unary_unary(
            "/lq.Lobby/fetchGameRecordsDetailV2",
            req_game_records_detail_v2,
            ResGameRecordsDetailV2,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_collected_game_record(
        self,
        req_add_collected_game_record: "ReqAddCollectedGameRecord",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAddCollectedGameRecord":
        return await self._unary_unary(
            "/lq.Lobby/addCollectedGameRecord",
            req_add_collected_game_record,
            ResAddCollectedGameRecord,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_collected_game_record(
        self,
        req_remove_collected_game_record: "ReqRemoveCollectedGameRecord",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResRemoveCollectedGameRecord":
        return await self._unary_unary(
            "/lq.Lobby/removeCollectedGameRecord",
            req_remove_collected_game_record,
            ResRemoveCollectedGameRecord,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def change_collected_game_record_remarks(
        self,
        req_change_collected_game_record_remarks: "ReqChangeCollectedGameRecordRemarks",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResChangeCollectedGameRecordRemarks":
        return await self._unary_unary(
            "/lq.Lobby/changeCollectedGameRecordRemarks",
            req_change_collected_game_record_remarks,
            ResChangeCollectedGameRecordRemarks,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_level_leaderboard(
        self,
        req_level_leaderboard: "ReqLevelLeaderboard",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResLevelLeaderboard":
        return await self._unary_unary(
            "/lq.Lobby/fetchLevelLeaderboard",
            req_level_leaderboard,
            ResLevelLeaderboard,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_challenge_leaderboard(
        self,
        req_challange_leaderboard: "ReqChallangeLeaderboard",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResChallengeLeaderboard":
        return await self._unary_unary(
            "/lq.Lobby/fetchChallengeLeaderboard",
            req_challange_leaderboard,
            ResChallengeLeaderboard,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_muti_challenge_level(
        self,
        req_muti_challenge_level: "ReqMutiChallengeLevel",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResMutiChallengeLevel":
        return await self._unary_unary(
            "/lq.Lobby/fetchMutiChallengeLevel",
            req_muti_challenge_level,
            ResMutiChallengeLevel,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_multi_account_brief(
        self,
        req_multi_account_id: "ReqMultiAccountId",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResMultiAccountBrief":
        return await self._unary_unary(
            "/lq.Lobby/fetchMultiAccountBrief",
            req_multi_account_id,
            ResMultiAccountBrief,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_friend_list(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFriendList":
        return await self._unary_unary(
            "/lq.Lobby/fetchFriendList",
            req_common,
            ResFriendList,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_friend_apply_list(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFriendApplyList":
        return await self._unary_unary(
            "/lq.Lobby/fetchFriendApplyList",
            req_common,
            ResFriendApplyList,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def apply_friend(
        self,
        req_apply_friend: "ReqApplyFriend",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/applyFriend",
            req_apply_friend,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def handle_friend_apply(
        self,
        req_handle_friend_apply: "ReqHandleFriendApply",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/handleFriendApply",
            req_handle_friend_apply,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_friend(
        self,
        req_remove_friend: "ReqRemoveFriend",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/removeFriend",
            req_remove_friend,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def search_account_by_id(
        self,
        req_search_account_by_id: "ReqSearchAccountById",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResSearchAccountById":
        return await self._unary_unary(
            "/lq.Lobby/searchAccountById",
            req_search_account_by_id,
            ResSearchAccountById,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def search_account_by_pattern(
        self,
        req_search_account_by_pattern: "ReqSearchAccountByPattern",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResSearchAccountByPattern":
        return await self._unary_unary(
            "/lq.Lobby/searchAccountByPattern",
            req_search_account_by_pattern,
            ResSearchAccountByPattern,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_account_state(
        self,
        req_account_list: "ReqAccountList",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAccountStates":
        return await self._unary_unary(
            "/lq.Lobby/fetchAccountState",
            req_account_list,
            ResAccountStates,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_bag_info(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResBagInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchBagInfo",
            req_common,
            ResBagInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def use_bag_item(
        self,
        req_use_bag_item: "ReqUseBagItem",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/useBagItem",
            req_use_bag_item,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def open_manual_item(
        self,
        req_open_manual_item: "ReqOpenManualItem",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/openManualItem",
            req_open_manual_item,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def open_random_reward_item(
        self,
        req_open_random_reward_item: "ReqOpenRandomRewardItem",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResOpenRandomRewardItem":
        return await self._unary_unary(
            "/lq.Lobby/openRandomRewardItem",
            req_open_random_reward_item,
            ResOpenRandomRewardItem,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def open_all_reward_item(
        self,
        req_open_all_reward_item: "ReqOpenAllRewardItem",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResOpenAllRewardItem":
        return await self._unary_unary(
            "/lq.Lobby/openAllRewardItem",
            req_open_all_reward_item,
            ResOpenAllRewardItem,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def compose_shard(
        self,
        req_compose_shard: "ReqComposeShard",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/composeShard",
            req_compose_shard,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_announcement(
        self,
        req_fetch_announcement: "ReqFetchAnnouncement",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAnnouncement":
        return await self._unary_unary(
            "/lq.Lobby/fetchAnnouncement",
            req_fetch_announcement,
            ResAnnouncement,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def read_announcement(
        self,
        req_read_announcement: "ReqReadAnnouncement",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/readAnnouncement",
            req_read_announcement,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_mail_info(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResMailInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchMailInfo",
            req_common,
            ResMailInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def read_mail(
        self,
        req_read_mail: "ReqReadMail",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/readMail",
            req_read_mail,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_mail(
        self,
        req_delete_mail: "ReqDeleteMail",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/deleteMail",
            req_delete_mail,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def take_attachment_from_mail(
        self,
        req_take_attachment: "ReqTakeAttachment",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/takeAttachmentFromMail",
            req_take_attachment,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def receive_achievement_reward(
        self,
        req_receive_achievement_reward: "ReqReceiveAchievementReward",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResReceiveAchievementReward":
        return await self._unary_unary(
            "/lq.Lobby/receiveAchievementReward",
            req_receive_achievement_reward,
            ResReceiveAchievementReward,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def receive_achievement_group_reward(
        self,
        req_receive_achievement_group_reward: "ReqReceiveAchievementGroupReward",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResReceiveAchievementGroupReward":
        return await self._unary_unary(
            "/lq.Lobby/receiveAchievementGroupReward",
            req_receive_achievement_group_reward,
            ResReceiveAchievementGroupReward,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_achievement_rate(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchAchievementRate":
        return await self._unary_unary(
            "/lq.Lobby/fetchAchievementRate",
            req_common,
            ResFetchAchievementRate,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_achievement(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAchievement":
        return await self._unary_unary(
            "/lq.Lobby/fetchAchievement",
            req_common,
            ResAchievement,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def buy_shi_lian(
        self,
        req_buy_shi_lian: "ReqBuyShiLian",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/buyShiLian",
            req_buy_shi_lian,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def match_shi_lian(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/matchShiLian",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def go_next_shi_lian(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/goNextShiLian",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_client_value(
        self,
        req_update_client_value: "ReqUpdateClientValue",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/updateClientValue",
            req_update_client_value,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_client_value(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResClientValue":
        return await self._unary_unary(
            "/lq.Lobby/fetchClientValue",
            req_common,
            ResClientValue,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def client_message(
        self,
        req_client_message: "ReqClientMessage",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/clientMessage",
            req_client_message,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_current_match_info(
        self,
        req_current_match_info: "ReqCurrentMatchInfo",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCurrentMatchInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchCurrentMatchInfo",
            req_current_match_info,
            ResCurrentMatchInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def user_complain(
        self,
        req_user_complain: "ReqUserComplain",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/userComplain",
            req_user_complain,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_revive_coin_info(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResReviveCoinInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchReviveCoinInfo",
            req_common,
            ResReviveCoinInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def gain_revive_coin(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/gainReviveCoin",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_daily_task(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResDailyTask":
        return await self._unary_unary(
            "/lq.Lobby/fetchDailyTask",
            req_common,
            ResDailyTask,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def refresh_daily_task(
        self,
        req_refresh_daily_task: "ReqRefreshDailyTask",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResRefreshDailyTask":
        return await self._unary_unary(
            "/lq.Lobby/refreshDailyTask",
            req_refresh_daily_task,
            ResRefreshDailyTask,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def use_gift_code(
        self,
        req_use_gift_code: "ReqUseGiftCode",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResUseGiftCode":
        return await self._unary_unary(
            "/lq.Lobby/useGiftCode",
            req_use_gift_code,
            ResUseGiftCode,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def use_special_gift_code(
        self,
        req_use_gift_code: "ReqUseGiftCode",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResUseSpecialGiftCode":
        return await self._unary_unary(
            "/lq.Lobby/useSpecialGiftCode",
            req_use_gift_code,
            ResUseSpecialGiftCode,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_title_list(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResTitleList":
        return await self._unary_unary(
            "/lq.Lobby/fetchTitleList",
            req_common,
            ResTitleList,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def use_title(
        self,
        req_use_title: "ReqUseTitle",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/useTitle",
            req_use_title,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_client_message(
        self,
        req_send_client_message: "ReqSendClientMessage",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/sendClientMessage",
            req_send_client_message,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_game_live_info(
        self,
        req_game_live_info: "ReqGameLiveInfo",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResGameLiveInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchGameLiveInfo",
            req_game_live_info,
            ResGameLiveInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_game_live_left_segment(
        self,
        req_game_live_left_segment: "ReqGameLiveLeftSegment",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResGameLiveLeftSegment":
        return await self._unary_unary(
            "/lq.Lobby/fetchGameLiveLeftSegment",
            req_game_live_left_segment,
            ResGameLiveLeftSegment,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_game_live_list(
        self,
        req_game_live_list: "ReqGameLiveList",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResGameLiveList":
        return await self._unary_unary(
            "/lq.Lobby/fetchGameLiveList",
            req_game_live_list,
            ResGameLiveList,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_comment_setting(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommentSetting":
        return await self._unary_unary(
            "/lq.Lobby/fetchCommentSetting",
            req_common,
            ResCommentSetting,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_comment_setting(
        self,
        req_update_comment_setting: "ReqUpdateCommentSetting",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/updateCommentSetting",
            req_update_comment_setting,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_comment_list(
        self,
        req_fetch_comment_list: "ReqFetchCommentList",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchCommentList":
        return await self._unary_unary(
            "/lq.Lobby/fetchCommentList",
            req_fetch_comment_list,
            ResFetchCommentList,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_comment_content(
        self,
        req_fetch_comment_content: "ReqFetchCommentContent",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchCommentContent":
        return await self._unary_unary(
            "/lq.Lobby/fetchCommentContent",
            req_fetch_comment_content,
            ResFetchCommentContent,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def leave_comment(
        self,
        req_leave_comment: "ReqLeaveComment",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/leaveComment",
            req_leave_comment,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_comment(
        self,
        req_delete_comment: "ReqDeleteComment",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/deleteComment",
            req_delete_comment,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_read_comment(
        self,
        req_update_read_comment: "ReqUpdateReadComment",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/updateReadComment",
            req_update_read_comment,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_rolling_notice(
        self,
        req_fetch_rolling_notice: "ReqFetchRollingNotice",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchRollingNotice":
        return await self._unary_unary(
            "/lq.Lobby/fetchRollingNotice",
            req_fetch_rolling_notice,
            ResFetchRollingNotice,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_maintain_notice(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchMaintainNotice":
        return await self._unary_unary(
            "/lq.Lobby/fetchMaintainNotice",
            req_common,
            ResFetchMaintainNotice,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_server_time(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResServerTime":
        return await self._unary_unary(
            "/lq.Lobby/fetchServerTime",
            req_common,
            ResServerTime,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_platform_products(
        self,
        req_platform_billing_products: "ReqPlatformBillingProducts",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResPlatformBillingProducts":
        return await self._unary_unary(
            "/lq.Lobby/fetchPlatformProducts",
            req_platform_billing_products,
            ResPlatformBillingProducts,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_google_play_order(
        self,
        req_cancel_google_play_order: "ReqCancelGooglePlayOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/cancelGooglePlayOrder",
            req_cancel_google_play_order,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def open_chest(
        self,
        req_open_chest: "ReqOpenChest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResOpenChest":
        return await self._unary_unary(
            "/lq.Lobby/openChest",
            req_open_chest,
            ResOpenChest,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def buy_from_chest_shop(
        self,
        req_buy_from_chest_shop: "ReqBuyFromChestShop",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResBuyFromChestShop":
        return await self._unary_unary(
            "/lq.Lobby/buyFromChestShop",
            req_buy_from_chest_shop,
            ResBuyFromChestShop,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_daily_sign_in_info(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResDailySignInInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchDailySignInInfo",
            req_common,
            ResDailySignInInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def do_daily_sign_in(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/doDailySignIn",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def do_activity_sign_in(
        self,
        req_do_activity_sign_in: "ReqDoActivitySignIn",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResDoActivitySignIn":
        return await self._unary_unary(
            "/lq.Lobby/doActivitySignIn",
            req_do_activity_sign_in,
            ResDoActivitySignIn,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_character_info(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCharacterInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchCharacterInfo",
            req_common,
            ResCharacterInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_character_sort(
        self,
        req_update_character_sort: "ReqUpdateCharacterSort",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/updateCharacterSort",
            req_update_character_sort,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def change_main_character(
        self,
        req_change_main_character: "ReqChangeMainCharacter",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/changeMainCharacter",
            req_change_main_character,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def change_character_skin(
        self,
        req_change_character_skin: "ReqChangeCharacterSkin",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/changeCharacterSkin",
            req_change_character_skin,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def change_character_view(
        self,
        req_change_character_view: "ReqChangeCharacterView",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/changeCharacterView",
            req_change_character_view,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_hidden_character(
        self,
        req_set_hidden_character: "ReqSetHiddenCharacter",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResSetHiddenCharacter":
        return await self._unary_unary(
            "/lq.Lobby/setHiddenCharacter",
            req_set_hidden_character,
            ResSetHiddenCharacter,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_gift_to_character(
        self,
        req_send_gift_to_character: "ReqSendGiftToCharacter",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResSendGiftToCharacter":
        return await self._unary_unary(
            "/lq.Lobby/sendGiftToCharacter",
            req_send_gift_to_character,
            ResSendGiftToCharacter,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def sell_item(
        self,
        req_sell_item: "ReqSellItem",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/sellItem",
            req_sell_item,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_common_view(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommonView":
        return await self._unary_unary(
            "/lq.Lobby/fetchCommonView",
            req_common,
            ResCommonView,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def change_common_view(
        self,
        req_change_common_view: "ReqChangeCommonView",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/changeCommonView",
            req_change_common_view,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def save_common_views(
        self,
        req_save_common_views: "ReqSaveCommonViews",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/saveCommonViews",
            req_save_common_views,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_common_views(
        self,
        req_common_views: "ReqCommonViews",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommonViews":
        return await self._unary_unary(
            "/lq.Lobby/fetchCommonViews",
            req_common_views,
            ResCommonViews,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_all_common_views(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAllcommonViews":
        return await self._unary_unary(
            "/lq.Lobby/fetchAllCommonViews",
            req_common,
            ResAllcommonViews,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def use_common_view(
        self,
        req_use_common_view: "ReqUseCommonView",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/useCommonView",
            req_use_common_view,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def upgrade_character(
        self,
        req_upgrade_character: "ReqUpgradeCharacter",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResUpgradeCharacter":
        return await self._unary_unary(
            "/lq.Lobby/upgradeCharacter",
            req_upgrade_character,
            ResUpgradeCharacter,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_finished_ending(
        self,
        req_finished_ending: "ReqFinishedEnding",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/addFinishedEnding",
            req_finished_ending,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def receive_ending_reward(
        self,
        req_finished_ending: "ReqFinishedEnding",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/receiveEndingReward",
            req_finished_ending,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def game_master_command(
        self,
        req_gm_command: "ReqGmCommand",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/gameMasterCommand",
            req_gm_command,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_shop_info(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResShopInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchShopInfo",
            req_common,
            ResShopInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def buy_from_shop(
        self,
        req_buy_from_shop: "ReqBuyFromShop",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResBuyFromShop":
        return await self._unary_unary(
            "/lq.Lobby/buyFromShop",
            req_buy_from_shop,
            ResBuyFromShop,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def buy_from_zhp(
        self,
        req_buy_from_zhp: "ReqBuyFromZhp",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/buyFromZHP",
            req_buy_from_zhp,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def refresh_zhp_shop(
        self,
        req_resh_zhp_shop: "ReqReshZhpShop",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResRefreshZhpShop":
        return await self._unary_unary(
            "/lq.Lobby/refreshZHPShop",
            req_resh_zhp_shop,
            ResRefreshZhpShop,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_month_ticket_info(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResMonthTicketInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchMonthTicketInfo",
            req_common,
            ResMonthTicketInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pay_month_ticket(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResPayMonthTicket":
        return await self._unary_unary(
            "/lq.Lobby/payMonthTicket",
            req_common,
            ResPayMonthTicket,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def exchange_currency(
        self,
        req_exchange_currency: "ReqExchangeCurrency",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/exchangeCurrency",
            req_exchange_currency,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def exchange_chest_stone(
        self,
        req_exchange_currency: "ReqExchangeCurrency",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/exchangeChestStone",
            req_exchange_currency,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def exchange_diamond(
        self,
        req_exchange_currency: "ReqExchangeCurrency",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/exchangeDiamond",
            req_exchange_currency,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_server_settings(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResServerSettings":
        return await self._unary_unary(
            "/lq.Lobby/fetchServerSettings",
            req_common,
            ResServerSettings,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_account_settings(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAccountSettings":
        return await self._unary_unary(
            "/lq.Lobby/fetchAccountSettings",
            req_common,
            ResAccountSettings,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_account_settings(
        self,
        req_update_account_settings: "ReqUpdateAccountSettings",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/updateAccountSettings",
            req_update_account_settings,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_mod_nickname_time(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResModNicknameTime":
        return await self._unary_unary(
            "/lq.Lobby/fetchModNicknameTime",
            req_common,
            ResModNicknameTime,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_wechat_native_order(
        self,
        req_create_wechat_native_order: "ReqCreateWechatNativeOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateWechatNativeOrder":
        return await self._unary_unary(
            "/lq.Lobby/createWechatNativeOrder",
            req_create_wechat_native_order,
            ResCreateWechatNativeOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_wechat_app_order(
        self,
        req_create_wechat_app_order: "ReqCreateWechatAppOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateWechatAppOrder":
        return await self._unary_unary(
            "/lq.Lobby/createWechatAppOrder",
            req_create_wechat_app_order,
            ResCreateWechatAppOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_alipay_order(
        self,
        req_create_alipay_order: "ReqCreateAlipayOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateAlipayOrder":
        return await self._unary_unary(
            "/lq.Lobby/createAlipayOrder",
            req_create_alipay_order,
            ResCreateAlipayOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_alipay_scan_order(
        self,
        req_create_alipay_scan_order: "ReqCreateAlipayScanOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateAlipayScanOrder":
        return await self._unary_unary(
            "/lq.Lobby/createAlipayScanOrder",
            req_create_alipay_scan_order,
            ResCreateAlipayScanOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_alipay_app_order(
        self,
        req_create_alipay_app_order: "ReqCreateAlipayAppOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateAlipayAppOrder":
        return await self._unary_unary(
            "/lq.Lobby/createAlipayAppOrder",
            req_create_alipay_app_order,
            ResCreateAlipayAppOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_jp_credit_card_order(
        self,
        req_create_jp_credit_card_order: "ReqCreateJpCreditCardOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateJpCreditCardOrder":
        return await self._unary_unary(
            "/lq.Lobby/createJPCreditCardOrder",
            req_create_jp_credit_card_order,
            ResCreateJpCreditCardOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_jp_paypal_order(
        self,
        req_create_jp_paypal_order: "ReqCreateJpPaypalOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateJpPaypalOrder":
        return await self._unary_unary(
            "/lq.Lobby/createJPPaypalOrder",
            req_create_jp_paypal_order,
            ResCreateJpPaypalOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_jp_au_order(
        self,
        req_create_jp_au_order: "ReqCreateJpAuOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateJpAuOrder":
        return await self._unary_unary(
            "/lq.Lobby/createJPAuOrder",
            req_create_jp_au_order,
            ResCreateJpAuOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_jp_docomo_order(
        self,
        req_create_jp_docomo_order: "ReqCreateJpDocomoOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateJpDocomoOrder":
        return await self._unary_unary(
            "/lq.Lobby/createJPDocomoOrder",
            req_create_jp_docomo_order,
            ResCreateJpDocomoOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_jp_web_money_order(
        self,
        req_create_jp_web_money_order: "ReqCreateJpWebMoneyOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateJpWebMoneyOrder":
        return await self._unary_unary(
            "/lq.Lobby/createJPWebMoneyOrder",
            req_create_jp_web_money_order,
            ResCreateJpWebMoneyOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_jp_softbank_order(
        self,
        req_create_jp_softbank_order: "ReqCreateJpSoftbankOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateJpSoftbankOrder":
        return await self._unary_unary(
            "/lq.Lobby/createJPSoftbankOrder",
            req_create_jp_softbank_order,
            ResCreateJpSoftbankOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_jp_pay_pay_order(
        self,
        req_create_jp_pay_pay_order: "ReqCreateJpPayPayOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateJpPayPayOrder":
        return await self._unary_unary(
            "/lq.Lobby/createJPPayPayOrder",
            req_create_jp_pay_pay_order,
            ResCreateJpPayPayOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_jp_common_credit_card_order(
        self,
        req_fetch_jp_common_credit_card_order: "ReqFetchJpCommonCreditCardOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchJpCommonCreditCardOrder":
        return await self._unary_unary(
            "/lq.Lobby/fetchJPCommonCreditCardOrder",
            req_fetch_jp_common_credit_card_order,
            ResFetchJpCommonCreditCardOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_jpgmo_order(
        self,
        req_create_jpgmo_order: "ReqCreateJpgmoOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateJpgmoOrder":
        return await self._unary_unary(
            "/lq.Lobby/createJPGMOOrder",
            req_create_jpgmo_order,
            ResCreateJpgmoOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_en_paypal_order(
        self,
        req_create_en_paypal_order: "ReqCreateEnPaypalOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateEnPaypalOrder":
        return await self._unary_unary(
            "/lq.Lobby/createENPaypalOrder",
            req_create_en_paypal_order,
            ResCreateEnPaypalOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_en_master_card_order(
        self,
        req_create_en_master_card_order: "ReqCreateEnMasterCardOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateEnMasterCardOrder":
        return await self._unary_unary(
            "/lq.Lobby/createENMasterCardOrder",
            req_create_en_master_card_order,
            ResCreateEnMasterCardOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_en_visa_order(
        self,
        req_create_en_visa_order: "ReqCreateEnVisaOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateEnVisaOrder":
        return await self._unary_unary(
            "/lq.Lobby/createENVisaOrder",
            req_create_en_visa_order,
            ResCreateEnVisaOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_enjcb_order(
        self,
        req_create_enjcb_order: "ReqCreateEnjcbOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateEnjcbOrder":
        return await self._unary_unary(
            "/lq.Lobby/createENJCBOrder",
            req_create_enjcb_order,
            ResCreateEnjcbOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_en_alipay_order(
        self,
        req_create_en_alipay_order: "ReqCreateEnAlipayOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateEnAlipayOrder":
        return await self._unary_unary(
            "/lq.Lobby/createENAlipayOrder",
            req_create_en_alipay_order,
            ResCreateEnAlipayOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_kr_paypal_order(
        self,
        req_create_kr_paypal_order: "ReqCreateKrPaypalOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateKrPaypalOrder":
        return await self._unary_unary(
            "/lq.Lobby/createKRPaypalOrder",
            req_create_kr_paypal_order,
            ResCreateKrPaypalOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_kr_master_card_order(
        self,
        req_create_kr_master_card_order: "ReqCreateKrMasterCardOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateKrMasterCardOrder":
        return await self._unary_unary(
            "/lq.Lobby/createKRMasterCardOrder",
            req_create_kr_master_card_order,
            ResCreateKrMasterCardOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_kr_visa_order(
        self,
        req_create_kr_visa_order: "ReqCreateKrVisaOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateKrVisaOrder":
        return await self._unary_unary(
            "/lq.Lobby/createKRVisaOrder",
            req_create_kr_visa_order,
            ResCreateKrVisaOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_krjcb_order(
        self,
        req_create_krjcb_order: "ReqCreateKrjcbOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateKrjcbOrder":
        return await self._unary_unary(
            "/lq.Lobby/createKRJCBOrder",
            req_create_krjcb_order,
            ResCreateKrjcbOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_kr_alipay_order(
        self,
        req_create_kr_alipay_order: "ReqCreateKrAlipayOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateKrAlipayOrder":
        return await self._unary_unary(
            "/lq.Lobby/createKRAlipayOrder",
            req_create_kr_alipay_order,
            ResCreateKrAlipayOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_dmm_order(
        self,
        req_create_dmm_order: "ReqCreateDmmOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateDmmOrder":
        return await self._unary_unary(
            "/lq.Lobby/createDMMOrder",
            req_create_dmm_order,
            ResCreateDmmOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_iap_order(
        self,
        req_create_iap_order: "ReqCreateIapOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateIapOrder":
        return await self._unary_unary(
            "/lq.Lobby/createIAPOrder",
            req_create_iap_order,
            ResCreateIapOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_steam_order(
        self,
        req_create_steam_order: "ReqCreateSteamOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateSteamOrder":
        return await self._unary_unary(
            "/lq.Lobby/createSteamOrder",
            req_create_steam_order,
            ResCreateSteamOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def verify_steam_order(
        self,
        req_verify_steam_order: "ReqVerifySteamOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/verifySteamOrder",
            req_verify_steam_order,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_my_card_android_order(
        self,
        req_create_my_card_order: "ReqCreateMyCardOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateMyCardOrder":
        return await self._unary_unary(
            "/lq.Lobby/createMyCardAndroidOrder",
            req_create_my_card_order,
            ResCreateMyCardOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_my_card_web_order(
        self,
        req_create_my_card_order: "ReqCreateMyCardOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateMyCardOrder":
        return await self._unary_unary(
            "/lq.Lobby/createMyCardWebOrder",
            req_create_my_card_order,
            ResCreateMyCardOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_paypal_order(
        self,
        req_create_paypal_order: "ReqCreatePaypalOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreatePaypalOrder":
        return await self._unary_unary(
            "/lq.Lobby/createPaypalOrder",
            req_create_paypal_order,
            ResCreatePaypalOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_xsolla_order(
        self,
        req_create_xsolla_order: "ReqCreateXsollaOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateXsollaOrder":
        return await self._unary_unary(
            "/lq.Lobby/createXsollaOrder",
            req_create_xsolla_order,
            ResCreateXsollaOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def verify_my_card_order(
        self,
        req_verify_my_card_order: "ReqVerifyMyCardOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/verifyMyCardOrder",
            req_verify_my_card_order,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def verification_iap_order(
        self,
        req_verification_iap_order: "ReqVerificationIapOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResVerificationIapOrder":
        return await self._unary_unary(
            "/lq.Lobby/verificationIAPOrder",
            req_verification_iap_order,
            ResVerificationIapOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_yostar_sdk_order(
        self,
        req_create_yostar_order: "ReqCreateYostarOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateYostarOrder":
        return await self._unary_unary(
            "/lq.Lobby/createYostarSDKOrder",
            req_create_yostar_order,
            ResCreateYostarOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_billing_order(
        self,
        req_create_billing_order: "ReqCreateBillingOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateBillingOrder":
        return await self._unary_unary(
            "/lq.Lobby/createBillingOrder",
            req_create_billing_order,
            ResCreateBillingOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def solve_google_play_order(
        self,
        req_solve_google_play_order: "ReqSolveGooglePlayOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/solveGooglePlayOrder",
            req_solve_google_play_order,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def solve_google_pay_order_v3(
        self,
        req_solve_google_play_order_v3: "ReqSolveGooglePlayOrderV3",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/solveGooglePayOrderV3",
            req_solve_google_play_order_v3,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deliver_aa32_order(
        self,
        req_deliver_aa32_order: "ReqDeliverAa32Order",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/deliverAA32Order",
            req_deliver_aa32_order,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_misc(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResMisc":
        return await self._unary_unary(
            "/lq.Lobby/fetchMisc",
            req_common,
            ResMisc,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def modify_signature(
        self,
        req_modify_signature: "ReqModifySignature",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/modifySignature",
            req_modify_signature,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_id_card_info(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResIdCardInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchIDCardInfo",
            req_common,
            ResIdCardInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_id_card_info(
        self,
        req_update_id_card_info: "ReqUpdateIdCardInfo",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/updateIDCardInfo",
            req_update_id_card_info,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_vip_reward(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResVipReward":
        return await self._unary_unary(
            "/lq.Lobby/fetchVipReward",
            req_common,
            ResVipReward,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def gain_vip_reward(
        self,
        req_gain_vip_reward: "ReqGainVipReward",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/gainVipReward",
            req_gain_vip_reward,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_refund_order(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchRefundOrder":
        return await self._unary_unary(
            "/lq.Lobby/fetchRefundOrder",
            req_common,
            ResFetchRefundOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_customized_contest_list(
        self,
        req_fetch_customized_contest_list: "ReqFetchCustomizedContestList",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchCustomizedContestList":
        return await self._unary_unary(
            "/lq.Lobby/fetchCustomizedContestList",
            req_fetch_customized_contest_list,
            ResFetchCustomizedContestList,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_customized_contest_auth_info(
        self,
        req_fetch_customized_contest_auth_info: "ReqFetchCustomizedContestAuthInfo",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchCustomizedContestAuthInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchCustomizedContestAuthInfo",
            req_fetch_customized_contest_auth_info,
            ResFetchCustomizedContestAuthInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def enter_customized_contest(
        self,
        req_enter_customized_contest: "ReqEnterCustomizedContest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResEnterCustomizedContest":
        return await self._unary_unary(
            "/lq.Lobby/enterCustomizedContest",
            req_enter_customized_contest,
            ResEnterCustomizedContest,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def leave_customized_contest(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/leaveCustomizedContest",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_customized_contest_online_info(
        self,
        req_fetch_customized_contest_online_info: "ReqFetchCustomizedContestOnlineInfo",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchCustomizedContestOnlineInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchCustomizedContestOnlineInfo",
            req_fetch_customized_contest_online_info,
            ResFetchCustomizedContestOnlineInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_customized_contest_by_contest_id(
        self,
        req_fetch_customized_contest_by_contest_id: "ReqFetchCustomizedContestByContestId",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchCustomizedContestByContestId":
        return await self._unary_unary(
            "/lq.Lobby/fetchCustomizedContestByContestId",
            req_fetch_customized_contest_by_contest_id,
            ResFetchCustomizedContestByContestId,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def signup_customized_contest(
        self,
        req_signup_customized_contest: "ReqSignupCustomizedContest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResSignupCustomizedContest":
        return await self._unary_unary(
            "/lq.Lobby/signupCustomizedContest",
            req_signup_customized_contest,
            ResSignupCustomizedContest,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start_customized_contest(
        self,
        req_start_customized_contest: "ReqStartCustomizedContest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/startCustomizedContest",
            req_start_customized_contest,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop_customized_contest(
        self,
        req_stop_customized_contest: "ReqStopCustomizedContest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/stopCustomizedContest",
            req_stop_customized_contest,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def join_customized_contest_chat_room(
        self,
        req_join_customized_contest_chat_room: "ReqJoinCustomizedContestChatRoom",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResJoinCustomizedContestChatRoom":
        return await self._unary_unary(
            "/lq.Lobby/joinCustomizedContestChatRoom",
            req_join_customized_contest_chat_room,
            ResJoinCustomizedContestChatRoom,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def leave_customized_contest_chat_room(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/leaveCustomizedContestChatRoom",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def say_chat_message(
        self,
        req_say_chat_message: "ReqSayChatMessage",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/sayChatMessage",
            req_say_chat_message,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_customized_contest_game_records(
        self,
        req_fetch_customized_contest_game_records: "ReqFetchCustomizedContestGameRecords",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchCustomizedContestGameRecords":
        return await self._unary_unary(
            "/lq.Lobby/fetchCustomizedContestGameRecords",
            req_fetch_customized_contest_game_records,
            ResFetchCustomizedContestGameRecords,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_customized_contest_game_live_list(
        self,
        req_fetch_customized_contest_game_live_list: "ReqFetchCustomizedContestGameLiveList",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchCustomizedContestGameLiveList":
        return await self._unary_unary(
            "/lq.Lobby/fetchCustomizedContestGameLiveList",
            req_fetch_customized_contest_game_live_list,
            ResFetchCustomizedContestGameLiveList,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def follow_customized_contest(
        self,
        req_target_customized_contest: "ReqTargetCustomizedContest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/followCustomizedContest",
            req_target_customized_contest,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def unfollow_customized_contest(
        self,
        req_target_customized_contest: "ReqTargetCustomizedContest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/unfollowCustomizedContest",
            req_target_customized_contest,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_activity_list(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResActivityList":
        return await self._unary_unary(
            "/lq.Lobby/fetchActivityList",
            req_common,
            ResActivityList,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_account_activity_data(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAccountActivityData":
        return await self._unary_unary(
            "/lq.Lobby/fetchAccountActivityData",
            req_common,
            ResAccountActivityData,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def exchange_activity_item(
        self,
        req_exchange_activity_item: "ReqExchangeActivityItem",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResExchangeActivityItem":
        return await self._unary_unary(
            "/lq.Lobby/exchangeActivityItem",
            req_exchange_activity_item,
            ResExchangeActivityItem,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def complete_activity_task(
        self,
        req_complete_activity_task: "ReqCompleteActivityTask",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/completeActivityTask",
            req_complete_activity_task,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def complete_activity_task_batch(
        self,
        req_complete_activity_task_batch: "ReqCompleteActivityTaskBatch",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/completeActivityTaskBatch",
            req_complete_activity_task_batch,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def complete_activity_flip_task(
        self,
        req_complete_activity_task: "ReqCompleteActivityTask",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/completeActivityFlipTask",
            req_complete_activity_task,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def complete_period_activity_task(
        self,
        req_complete_activity_task: "ReqCompleteActivityTask",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/completePeriodActivityTask",
            req_complete_activity_task,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def complete_period_activity_task_batch(
        self,
        req_complete_period_activity_task_batch: "ReqCompletePeriodActivityTaskBatch",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/completePeriodActivityTaskBatch",
            req_complete_period_activity_task_batch,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def complete_random_activity_task(
        self,
        req_complete_activity_task: "ReqCompleteActivityTask",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/completeRandomActivityTask",
            req_complete_activity_task,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def receive_activity_flip_task(
        self,
        req_receive_activity_flip_task: "ReqReceiveActivityFlipTask",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResReceiveActivityFlipTask":
        return await self._unary_unary(
            "/lq.Lobby/receiveActivityFlipTask",
            req_receive_activity_flip_task,
            ResReceiveActivityFlipTask,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def complete_segment_task_reward(
        self,
        req_complete_segment_task_reward: "ReqCompleteSegmentTaskReward",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCompleteSegmentTaskReward":
        return await self._unary_unary(
            "/lq.Lobby/completeSegmentTaskReward",
            req_complete_segment_task_reward,
            ResCompleteSegmentTaskReward,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_activity_flip_info(
        self,
        req_fetch_activity_flip_info: "ReqFetchActivityFlipInfo",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchActivityFlipInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchActivityFlipInfo",
            req_fetch_activity_flip_info,
            ResFetchActivityFlipInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def gain_accumulated_point_activity_reward(
        self,
        req_gain_accumulated_point_activity_reward: "ReqGainAccumulatedPointActivityReward",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/gainAccumulatedPointActivityReward",
            req_gain_accumulated_point_activity_reward,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def gain_multi_point_activity_reward(
        self,
        req_gain_multi_point_activity_reward: "ReqGainMultiPointActivityReward",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/gainMultiPointActivityReward",
            req_gain_multi_point_activity_reward,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_rank_point_leaderboard(
        self,
        req_fetch_rank_point_leaderboard: "ReqFetchRankPointLeaderboard",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchRankPointLeaderboard":
        return await self._unary_unary(
            "/lq.Lobby/fetchRankPointLeaderboard",
            req_fetch_rank_point_leaderboard,
            ResFetchRankPointLeaderboard,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def gain_rank_point_reward(
        self,
        req_gain_rank_point_reward: "ReqGainRankPointReward",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/gainRankPointReward",
            req_gain_rank_point_reward,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def richman_activity_next_move(
        self,
        req_richman_next_move: "ReqRichmanNextMove",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResRichmanNextMove":
        return await self._unary_unary(
            "/lq.Lobby/richmanActivityNextMove",
            req_richman_next_move,
            ResRichmanNextMove,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def richman_acitivity_special_move(
        self,
        req_richman_special_move: "ReqRichmanSpecialMove",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResRichmanNextMove":
        return await self._unary_unary(
            "/lq.Lobby/richmanAcitivitySpecialMove",
            req_richman_special_move,
            ResRichmanNextMove,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def richman_activity_chest_info(
        self,
        req_richman_chest_info: "ReqRichmanChestInfo",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResRichmanChestInfo":
        return await self._unary_unary(
            "/lq.Lobby/richmanActivityChestInfo",
            req_richman_chest_info,
            ResRichmanChestInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_game_observe_auth(
        self,
        req_create_game_observe_auth: "ReqCreateGameObserveAuth",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateGameObserveAuth":
        return await self._unary_unary(
            "/lq.Lobby/createGameObserveAuth",
            req_create_game_observe_auth,
            ResCreateGameObserveAuth,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def refresh_game_observe_auth(
        self,
        req_refresh_game_observe_auth: "ReqRefreshGameObserveAuth",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResRefreshGameObserveAuth":
        return await self._unary_unary(
            "/lq.Lobby/refreshGameObserveAuth",
            req_refresh_game_observe_auth,
            ResRefreshGameObserveAuth,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_activity_buff(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResActivityBuff":
        return await self._unary_unary(
            "/lq.Lobby/fetchActivityBuff",
            req_common,
            ResActivityBuff,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def upgrade_activity_buff(
        self,
        req_upgrade_activity_buff: "ReqUpgradeActivityBuff",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResActivityBuff":
        return await self._unary_unary(
            "/lq.Lobby/upgradeActivityBuff",
            req_upgrade_activity_buff,
            ResActivityBuff,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def upgrade_activity_level(
        self,
        req_upgrade_activity_level: "ReqUpgradeActivityLevel",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResUpgradeActivityLevel":
        return await self._unary_unary(
            "/lq.Lobby/upgradeActivityLevel",
            req_upgrade_activity_level,
            ResUpgradeActivityLevel,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def receive_upgrade_activity_reward(
        self,
        req_receive_upgrade_activity_reward: "ReqReceiveUpgradeActivityReward",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResReceiveUpgradeActivityReward":
        return await self._unary_unary(
            "/lq.Lobby/receiveUpgradeActivityReward",
            req_receive_upgrade_activity_reward,
            ResReceiveUpgradeActivityReward,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def upgrade_challenge(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResUpgradeChallenge":
        return await self._unary_unary(
            "/lq.Lobby/upgradeChallenge",
            req_common,
            ResUpgradeChallenge,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def refresh_challenge(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResRefreshChallenge":
        return await self._unary_unary(
            "/lq.Lobby/refreshChallenge",
            req_common,
            ResRefreshChallenge,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_challenge_info(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchChallengeInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchChallengeInfo",
            req_common,
            ResFetchChallengeInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def force_complete_challenge_task(
        self,
        req_force_complete_challenge_task: "ReqForceCompleteChallengeTask",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/forceCompleteChallengeTask",
            req_force_complete_challenge_task,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_challenge_season(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResChallengeSeasonInfo":
        return await self._unary_unary(
            "/lq.Lobby/fetchChallengeSeason",
            req_common,
            ResChallengeSeasonInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def receive_challenge_rank_reward(
        self,
        req_receive_challenge_rank_reward: "ReqReceiveChallengeRankReward",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResReceiveChallengeRankReward":
        return await self._unary_unary(
            "/lq.Lobby/receiveChallengeRankReward",
            req_receive_challenge_rank_reward,
            ResReceiveChallengeRankReward,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_ab_match_info(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchAbMatch":
        return await self._unary_unary(
            "/lq.Lobby/fetchABMatchInfo",
            req_common,
            ResFetchAbMatch,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def buy_in_ab_match(
        self,
        req_buy_in_ab_match: "ReqBuyInAbMatch",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/buyInABMatch",
            req_buy_in_ab_match,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def receive_ab_match_reward(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/receiveABMatchReward",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def quit_ab_match(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/quitABMatch",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start_unified_match(
        self,
        req_start_unified_match: "ReqStartUnifiedMatch",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/startUnifiedMatch",
            req_start_unified_match,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_unified_match(
        self,
        req_cancel_unified_match: "ReqCancelUnifiedMatch",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/cancelUnifiedMatch",
            req_cancel_unified_match,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_game_point_rank(
        self,
        req_game_point_rank: "ReqGamePointRank",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResGamePointRank":
        return await self._unary_unary(
            "/lq.Lobby/fetchGamePointRank",
            req_game_point_rank,
            ResGamePointRank,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_self_game_point_rank(
        self,
        req_game_point_rank: "ReqGamePointRank",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchSelfGamePointRank":
        return await self._unary_unary(
            "/lq.Lobby/fetchSelfGamePointRank",
            req_game_point_rank,
            ResFetchSelfGamePointRank,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def read_sns(
        self,
        req_read_sns: "ReqReadSns",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResReadSns":
        return await self._unary_unary(
            "/lq.Lobby/readSNS",
            req_read_sns,
            ResReadSns,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def reply_sns(
        self,
        req_reply_sns: "ReqReplySns",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResReplySns":
        return await self._unary_unary(
            "/lq.Lobby/replySNS",
            req_reply_sns,
            ResReplySns,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def like_sns(
        self,
        req_like_sns: "ReqLikeSns",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResLikeSns":
        return await self._unary_unary(
            "/lq.Lobby/likeSNS",
            req_like_sns,
            ResLikeSns,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def dig_mine(
        self,
        req_dig_mine: "ReqDigMine",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResDigMine":
        return await self._unary_unary(
            "/lq.Lobby/digMine",
            req_dig_mine,
            ResDigMine,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_last_privacy(
        self,
        req_fetch_last_privacy: "ReqFetchLastPrivacy",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchLastPrivacy":
        return await self._unary_unary(
            "/lq.Lobby/fetchLastPrivacy",
            req_fetch_last_privacy,
            ResFetchLastPrivacy,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def check_privacy(
        self,
        req_check_privacy: "ReqCheckPrivacy",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/checkPrivacy",
            req_check_privacy,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def response_captcha(
        self,
        req_response_captcha: "ReqResponseCaptcha",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/responseCaptcha",
            req_response_captcha,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_rpg_battle_history(
        self,
        req_fetch_rpg_battle_history: "ReqFetchRpgBattleHistory",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchRpgBattleHistory":
        return await self._unary_unary(
            "/lq.Lobby/fetchRPGBattleHistory",
            req_fetch_rpg_battle_history,
            ResFetchRpgBattleHistory,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_rpg_battle_history_v2(
        self,
        req_fetch_rpg_battle_history: "ReqFetchRpgBattleHistory",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchRpgBattleHistoryV2":
        return await self._unary_unary(
            "/lq.Lobby/fetchRPGBattleHistoryV2",
            req_fetch_rpg_battle_history,
            ResFetchRpgBattleHistoryV2,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def receive_rpg_rewards(
        self,
        req_receive_rpg_rewards: "ReqReceiveRpgRewards",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResReceiveRpgRewards":
        return await self._unary_unary(
            "/lq.Lobby/receiveRPGRewards",
            req_receive_rpg_rewards,
            ResReceiveRpgRewards,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def receive_rpg_reward(
        self,
        req_receive_rpg_reward: "ReqReceiveRpgReward",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResReceiveRpgRewards":
        return await self._unary_unary(
            "/lq.Lobby/receiveRPGReward",
            req_receive_rpg_reward,
            ResReceiveRpgRewards,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def buy_arena_ticket(
        self,
        req_buy_arena_ticket: "ReqBuyArenaTicket",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/buyArenaTicket",
            req_buy_arena_ticket,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def enter_arena(
        self,
        req_enter_arena: "ReqEnterArena",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/enterArena",
            req_enter_arena,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def receive_arena_reward(
        self,
        req_arena_reward: "ReqArenaReward",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResArenaReward":
        return await self._unary_unary(
            "/lq.Lobby/receiveArenaReward",
            req_arena_reward,
            ResArenaReward,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_ob_token(
        self,
        req_fetch_ob_token: "ReqFetchObToken",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchObToken":
        return await self._unary_unary(
            "/lq.Lobby/fetchOBToken",
            req_fetch_ob_token,
            ResFetchObToken,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def receive_character_rewards(
        self,
        req_receive_character_rewards: "ReqReceiveCharacterRewards",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResReceiveCharacterRewards":
        return await self._unary_unary(
            "/lq.Lobby/receiveCharacterRewards",
            req_receive_character_rewards,
            ResReceiveCharacterRewards,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def feed_activity_feed(
        self,
        req_feed_activity_feed: "ReqFeedActivityFeed",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFeedActivityFeed":
        return await self._unary_unary(
            "/lq.Lobby/feedActivityFeed",
            req_feed_activity_feed,
            ResFeedActivityFeed,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_activity_gift_to_friend(
        self,
        req_send_activity_gift_to_friend: "ReqSendActivityGiftToFriend",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResSendActivityGiftToFriend":
        return await self._unary_unary(
            "/lq.Lobby/sendActivityGiftToFriend",
            req_send_activity_gift_to_friend,
            ResSendActivityGiftToFriend,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def receive_activity_gift(
        self,
        req_receive_activity_gift: "ReqReceiveActivityGift",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/receiveActivityGift",
            req_receive_activity_gift,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def receive_all_activity_gift(
        self,
        req_receive_all_activity_gift: "ReqReceiveAllActivityGift",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResReceiveAllActivityGift":
        return await self._unary_unary(
            "/lq.Lobby/receiveAllActivityGift",
            req_receive_all_activity_gift,
            ResReceiveAllActivityGift,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_friend_gift_activity_data(
        self,
        req_fetch_friend_gift_activity_data: "ReqFetchFriendGiftActivityData",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchFriendGiftActivityData":
        return await self._unary_unary(
            "/lq.Lobby/fetchFriendGiftActivityData",
            req_fetch_friend_gift_activity_data,
            ResFetchFriendGiftActivityData,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def open_pre_chest_item(
        self,
        req_open_pre_chest_item: "ReqOpenPreChestItem",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResOpenPreChestItem":
        return await self._unary_unary(
            "/lq.Lobby/openPreChestItem",
            req_open_pre_chest_item,
            ResOpenPreChestItem,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_vote_activity(
        self,
        req_fetch_vote_activity: "ReqFetchVoteActivity",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchVoteActivity":
        return await self._unary_unary(
            "/lq.Lobby/fetchVoteActivity",
            req_fetch_vote_activity,
            ResFetchVoteActivity,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def vote_activity(
        self,
        req_vote_activity: "ReqVoteActivity",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResVoteActivity":
        return await self._unary_unary(
            "/lq.Lobby/voteActivity",
            req_vote_activity,
            ResVoteActivity,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def unlock_activity_spot(
        self,
        req_unlock_activity_spot: "ReqUnlockActivitySpot",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/unlockActivitySpot",
            req_unlock_activity_spot,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def unlock_activity_spot_ending(
        self,
        req_unlock_activity_spot_ending: "ReqUnlockActivitySpotEnding",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/unlockActivitySpotEnding",
            req_unlock_activity_spot_ending,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def receive_activity_spot_reward(
        self,
        req_receive_activity_spot_reward: "ReqReceiveActivitySpotReward",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResReceiveActivitySpotReward":
        return await self._unary_unary(
            "/lq.Lobby/receiveActivitySpotReward",
            req_receive_activity_spot_reward,
            ResReceiveActivitySpotReward,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_account(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResDeleteAccount":
        return await self._unary_unary(
            "/lq.Lobby/deleteAccount",
            req_common,
            ResDeleteAccount,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_delete_account(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/cancelDeleteAccount",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def log_report(
        self,
        req_log_report: "ReqLogReport",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/logReport",
            req_log_report,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def bind_oauth2(
        self,
        req_bind_oauth2: "ReqBindOauth2",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/bindOauth2",
            req_bind_oauth2,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_oauth2_info(
        self,
        req_fetch_oauth2: "ReqFetchOauth2",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchOauth2":
        return await self._unary_unary(
            "/lq.Lobby/fetchOauth2Info",
            req_fetch_oauth2,
            ResFetchOauth2,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_loading_image(
        self,
        req_set_loading_image: "ReqSetLoadingImage",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/setLoadingImage",
            req_set_loading_image,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_shop_interval(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchShopInterval":
        return await self._unary_unary(
            "/lq.Lobby/fetchShopInterval",
            req_common,
            ResFetchShopInterval,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_activity_interval(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchActivityInterval":
        return await self._unary_unary(
            "/lq.Lobby/fetchActivityInterval",
            req_common,
            ResFetchActivityInterval,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_recent_friend(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchrecentFriend":
        return await self._unary_unary(
            "/lq.Lobby/fetchRecentFriend",
            req_common,
            ResFetchrecentFriend,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def open_gacha(
        self,
        req_open_gacha: "ReqOpenGacha",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResOpenGacha":
        return await self._unary_unary(
            "/lq.Lobby/openGacha",
            req_open_gacha,
            ResOpenGacha,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def task_request(
        self,
        req_task_request: "ReqTaskRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/taskRequest",
            req_task_request,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def simulation_activity_train(
        self,
        req_simulation_activity_train: "ReqSimulationActivityTrain",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResSimulationActivityTrain":
        return await self._unary_unary(
            "/lq.Lobby/simulationActivityTrain",
            req_simulation_activity_train,
            ResSimulationActivityTrain,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_simulation_game_record(
        self,
        req_fetch_simulation_game_record: "ReqFetchSimulationGameRecord",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchSimulationGameRecord":
        return await self._unary_unary(
            "/lq.Lobby/fetchSimulationGameRecord",
            req_fetch_simulation_game_record,
            ResFetchSimulationGameRecord,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start_simulation_activity_game(
        self,
        req_start_simulation_activity_game: "ReqStartSimulationActivityGame",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResStartSimulationActivityGame":
        return await self._unary_unary(
            "/lq.Lobby/startSimulationActivityGame",
            req_start_simulation_activity_game,
            ResStartSimulationActivityGame,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_simulation_game_rank(
        self,
        req_fetch_simulation_game_rank: "ReqFetchSimulationGameRank",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchSimulationGameRank":
        return await self._unary_unary(
            "/lq.Lobby/fetchSimulationGameRank",
            req_fetch_simulation_game_rank,
            ResFetchSimulationGameRank,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def generate_combining_craft(
        self,
        req_generate_combining_craft: "ReqGenerateCombiningCraft",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResGenerateCombiningCraft":
        return await self._unary_unary(
            "/lq.Lobby/generateCombiningCraft",
            req_generate_combining_craft,
            ResGenerateCombiningCraft,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def move_combining_craft(
        self,
        req_move_combining_craft: "ReqMoveCombiningCraft",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResMoveCombiningCraft":
        return await self._unary_unary(
            "/lq.Lobby/moveCombiningCraft",
            req_move_combining_craft,
            ResMoveCombiningCraft,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def combining_recycle_craft(
        self,
        req_combining_recycle_craft: "ReqCombiningRecycleCraft",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCombiningRecycleCraft":
        return await self._unary_unary(
            "/lq.Lobby/combiningRecycleCraft",
            req_combining_recycle_craft,
            ResCombiningRecycleCraft,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def recover_combining_recycle(
        self,
        req_recover_combining_recycle: "ReqRecoverCombiningRecycle",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResRecoverCombiningRecycle":
        return await self._unary_unary(
            "/lq.Lobby/recoverCombiningRecycle",
            req_recover_combining_recycle,
            ResRecoverCombiningRecycle,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def finish_combining_order(
        self,
        req_finish_combining_order: "ReqFinishCombiningOrder",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFinishCombiningOrder":
        return await self._unary_unary(
            "/lq.Lobby/finishCombiningOrder",
            req_finish_combining_order,
            ResFinishCombiningOrder,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def upgrade_village_building(
        self,
        req_upgrade_village_building: "ReqUpgradeVillageBuilding",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/upgradeVillageBuilding",
            req_upgrade_village_building,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def receive_village_building_reward(
        self,
        req_receive_village_building_reward: "ReqReceiveVillageBuildingReward",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResReceiveVillageBuildingReward":
        return await self._unary_unary(
            "/lq.Lobby/receiveVillageBuildingReward",
            req_receive_village_building_reward,
            ResReceiveVillageBuildingReward,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start_village_trip(
        self,
        req_start_village_trip: "ReqStartVillageTrip",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/startVillageTrip",
            req_start_village_trip,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def receive_village_trip_reward(
        self,
        req_receive_village_trip_reward: "ReqReceiveVillageTripReward",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResReceiveVillageTripReward":
        return await self._unary_unary(
            "/lq.Lobby/receiveVillageTripReward",
            req_receive_village_trip_reward,
            ResReceiveVillageTripReward,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def complete_village_task(
        self,
        req_complete_village_task: "ReqCompleteVillageTask",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCompleteVillageTask":
        return await self._unary_unary(
            "/lq.Lobby/completeVillageTask",
            req_complete_village_task,
            ResCompleteVillageTask,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_friend_village_data(
        self,
        req_get_friend_village_data: "ReqGetFriendVillageData",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResGetFriendVillageData":
        return await self._unary_unary(
            "/lq.Lobby/getFriendVillageData",
            req_get_friend_village_data,
            ResGetFriendVillageData,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_village_worker(
        self,
        req_set_village_worker: "ReqSetVillageWorker",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResSetVillageWorker":
        return await self._unary_unary(
            "/lq.Lobby/setVillageWorker",
            req_set_village_worker,
            ResSetVillageWorker,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def next_round_village(
        self,
        req_next_round_village: "ReqNextRoundVillage",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResNextRoundVillage":
        return await self._unary_unary(
            "/lq.Lobby/nextRoundVillage",
            req_next_round_village,
            ResNextRoundVillage,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def resolve_festival_activity_proposal(
        self,
        req_resolve_festival_activity_proposal: "ReqResolveFestivalActivityProposal",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResResolveFestivalActivityProposal":
        return await self._unary_unary(
            "/lq.Lobby/resolveFestivalActivityProposal",
            req_resolve_festival_activity_proposal,
            ResResolveFestivalActivityProposal,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def resolve_festival_activity_event(
        self,
        req_resolve_festival_activity_event: "ReqResolveFestivalActivityEvent",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResResolveFestivalActivityEvent":
        return await self._unary_unary(
            "/lq.Lobby/resolveFestivalActivityEvent",
            req_resolve_festival_activity_event,
            ResResolveFestivalActivityEvent,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def buy_festival_proposal(
        self,
        req_buy_festival_proposal: "ReqBuyFestivalProposal",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResBuyFestivalProposal":
        return await self._unary_unary(
            "/lq.Lobby/buyFestivalProposal",
            req_buy_festival_proposal,
            ResBuyFestivalProposal,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def island_activity_move(
        self,
        req_island_activity_move: "ReqIslandActivityMove",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/islandActivityMove",
            req_island_activity_move,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def island_activity_buy(
        self,
        req_island_activity_buy: "ReqIslandActivityBuy",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/islandActivityBuy",
            req_island_activity_buy,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def island_activity_sell(
        self,
        req_island_activity_sell: "ReqIslandActivitySell",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/islandActivitySell",
            req_island_activity_sell,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def island_activity_tidy_bag(
        self,
        req_island_activity_tidy_bag: "ReqIslandActivityTidyBag",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/islandActivityTidyBag",
            req_island_activity_tidy_bag,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def island_activity_unlock_bag_grid(
        self,
        req_island_activity_unlock_bag_grid: "ReqIslandActivityUnlockBagGrid",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/islandActivityUnlockBagGrid",
            req_island_activity_unlock_bag_grid,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_customized_contest(
        self,
        req_create_customized_contest: "ReqCreateCustomizedContest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCreateCustomizedContest":
        return await self._unary_unary(
            "/lq.Lobby/createCustomizedContest",
            req_create_customized_contest,
            ResCreateCustomizedContest,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_manager_customized_contest_list(
        self,
        req_fetchmanager_customized_contest_list: "ReqFetchmanagerCustomizedContestList",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchManagerCustomizedContestList":
        return await self._unary_unary(
            "/lq.Lobby/fetchManagerCustomizedContestList",
            req_fetchmanager_customized_contest_list,
            ResFetchManagerCustomizedContestList,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_manager_customized_contest(
        self,
        req_fetch_manager_customized_contest: "ReqFetchManagerCustomizedContest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchManagerCustomizedContest":
        return await self._unary_unary(
            "/lq.Lobby/fetchManagerCustomizedContest",
            req_fetch_manager_customized_contest,
            ResFetchManagerCustomizedContest,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_manager_customized_contest(
        self,
        req_update_manager_customized_contest: "ReqUpdateManagerCustomizedContest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/updateManagerCustomizedContest",
            req_update_manager_customized_contest,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_contest_player_rank(
        self,
        req_fetch_contest_player_rank: "ReqFetchContestPlayerRank",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchContestPlayerRank":
        return await self._unary_unary(
            "/lq.Lobby/fetchContestPlayerRank",
            req_fetch_contest_player_rank,
            ResFetchContestPlayerRank,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_ready_player_list(
        self,
        req_fetch_ready_player_list: "ReqFetchReadyPlayerList",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchReadyPlayerList":
        return await self._unary_unary(
            "/lq.Lobby/fetchReadyPlayerList",
            req_fetch_ready_player_list,
            ResFetchReadyPlayerList,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_game_plan(
        self,
        req_create_game_plan: "ReqCreateGamePlan",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/createGamePlan",
            req_create_game_plan,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def generate_contest_manager_login_code(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResGenerateContestManagerLoginCode":
        return await self._unary_unary(
            "/lq.Lobby/generateContestManagerLoginCode",
            req_common,
            ResGenerateContestManagerLoginCode,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def amulet_activity_start_game(
        self,
        req_amulet_activity_start_game: "ReqAmuletActivityStartGame",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAmuletActivityStartGame":
        return await self._unary_unary(
            "/lq.Lobby/amuletActivityStartGame",
            req_amulet_activity_start_game,
            ResAmuletActivityStartGame,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def amulet_activity_operate(
        self,
        req_amulet_activity_operate: "ReqAmuletActivityOperate",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAmuletActivityOperate":
        return await self._unary_unary(
            "/lq.Lobby/amuletActivityOperate",
            req_amulet_activity_operate,
            ResAmuletActivityOperate,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def amulet_activity_change_hands(
        self,
        req_amulet_activity_change_hands: "ReqAmuletActivityChangeHands",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAmuletActivityChangeHands":
        return await self._unary_unary(
            "/lq.Lobby/amuletActivityChangeHands",
            req_amulet_activity_change_hands,
            ResAmuletActivityChangeHands,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def amulet_activity_upgrade(
        self,
        req_amulet_activity_upgrade: "ReqAmuletActivityUpgrade",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAmuletActivityUpgrade":
        return await self._unary_unary(
            "/lq.Lobby/amuletActivityUpgrade",
            req_amulet_activity_upgrade,
            ResAmuletActivityUpgrade,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def amulet_activity_buy(
        self,
        req_amulet_activity_buy: "ReqAmuletActivityBuy",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAmuletActivityBuy":
        return await self._unary_unary(
            "/lq.Lobby/amuletActivityBuy",
            req_amulet_activity_buy,
            ResAmuletActivityBuy,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def amulet_activity_select_pack(
        self,
        req_amulet_activity_select_pack: "ReqAmuletActivitySelectPack",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAmuletActivitySelectPack":
        return await self._unary_unary(
            "/lq.Lobby/amuletActivitySelectPack",
            req_amulet_activity_select_pack,
            ResAmuletActivitySelectPack,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def amulet_activity_sell_effect(
        self,
        req_amulet_activity_sell_effect: "ReqAmuletActivitySellEffect",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAmuletActivitySellEffect":
        return await self._unary_unary(
            "/lq.Lobby/amuletActivitySellEffect",
            req_amulet_activity_sell_effect,
            ResAmuletActivitySellEffect,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def amulet_activity_effect_sort(
        self,
        req_amulet_activity_effect_sort: "ReqAmuletActivityEffectSort",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/amuletActivityEffectSort",
            req_amulet_activity_effect_sort,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def amulet_activity_giveup(
        self,
        req_amulet_activity_giveup: "ReqAmuletActivityGiveup",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/amuletActivityGiveup",
            req_amulet_activity_giveup,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def amulet_activity_refresh_shop(
        self,
        req_amulet_activity_refresh_shop: "ReqAmuletActivityRefreshShop",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAmuletActivityRefreshShop":
        return await self._unary_unary(
            "/lq.Lobby/amuletActivityRefreshShop",
            req_amulet_activity_refresh_shop,
            ResAmuletActivityRefreshShop,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def amulet_activity_select_free_effect(
        self,
        req_amulet_activity_select_free_effect: "ReqAmuletActivitySelectFreeEffect",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAmuletActivitySelectFreeEffect":
        return await self._unary_unary(
            "/lq.Lobby/amuletActivitySelectFreeEffect",
            req_amulet_activity_select_free_effect,
            ResAmuletActivitySelectFreeEffect,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def amulet_activity_upgrade_shop_buff(
        self,
        req_amulet_activity_upgrade_shop_buff: "ReqAmuletActivityUpgradeShopBuff",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAmuletActivityUpgradeShopBuff":
        return await self._unary_unary(
            "/lq.Lobby/amuletActivityUpgradeShopBuff",
            req_amulet_activity_upgrade_shop_buff,
            ResAmuletActivityUpgradeShopBuff,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def amulet_activity_end_shopping(
        self,
        req_amulet_activity_end_shopping: "ReqAmuletActivityEndShopping",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAmuletActivityEndShopping":
        return await self._unary_unary(
            "/lq.Lobby/amuletActivityEndShopping",
            req_amulet_activity_end_shopping,
            ResAmuletActivityEndShopping,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def amulet_activity_set_skill_level(
        self,
        req_amulet_activity_set_skill_level: "ReqAmuletActivitySetSkillLevel",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/amuletActivitySetSkillLevel",
            req_amulet_activity_set_skill_level,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def amulet_activity_maintain_info(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAmuletActivityMaintainInfo":
        return await self._unary_unary(
            "/lq.Lobby/amuletActivityMaintainInfo",
            req_common,
            ResAmuletActivityMaintainInfo,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def story_activity_unlock(
        self,
        req_story_activity_unlock: "ReqStoryActivityUnlock",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/storyActivityUnlock",
            req_story_activity_unlock,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def story_activity_unlock_ending(
        self,
        req_story_activity_unlock_ending: "ReqStoryActivityUnlockEnding",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/storyActivityUnlockEnding",
            req_story_activity_unlock_ending,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def story_activity_receive_ending_reward(
        self,
        req_story_activity_receive_ending_reward: "ReqStoryActivityReceiveEndingReward",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResStoryReward":
        return await self._unary_unary(
            "/lq.Lobby/storyActivityReceiveEndingReward",
            req_story_activity_receive_ending_reward,
            ResStoryReward,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def story_activity_receive_finish_reward(
        self,
        req_story_activity_receive_finish_reward: "ReqStoryActivityReceiveFinishReward",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResStoryReward":
        return await self._unary_unary(
            "/lq.Lobby/storyActivityReceiveFinishReward",
            req_story_activity_receive_finish_reward,
            ResStoryReward,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def story_activity_receive_all_finish_reward(
        self,
        req_story_activity_receive_all_finish_reward: "ReqStoryActivityReceiveAllFinishReward",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResStoryReward":
        return await self._unary_unary(
            "/lq.Lobby/storyActivityReceiveAllFinishReward",
            req_story_activity_receive_all_finish_reward,
            ResStoryReward,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def story_activity_unlock_ending_and_receive(
        self,
        req_story_activity_unlock_ending_and_receive: "ReqStoryActivityUnlockEndingAndReceive",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResStoryActivityUnlockEndingAndReceive":
        return await self._unary_unary(
            "/lq.Lobby/storyActivityUnlockEndingAndReceive",
            req_story_activity_unlock_ending_and_receive,
            ResStoryActivityUnlockEndingAndReceive,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_activity_rank(
        self,
        req_fetch_activity_rank: "ReqFetchActivityRank",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchActivityRank":
        return await self._unary_unary(
            "/lq.Lobby/fetchActivityRank",
            req_fetch_activity_rank,
            ResFetchActivityRank,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_verified_hidden(
        self,
        req_set_verified_hidden: "ReqSetVerifiedHidden",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/setVerifiedHidden",
            req_set_verified_hidden,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_questionnaire_list(
        self,
        req_fetch_questionnaire_list: "ReqFetchQuestionnaireList",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchQuestionnaireList":
        return await self._unary_unary(
            "/lq.Lobby/fetchQuestionnaireList",
            req_fetch_questionnaire_list,
            ResFetchQuestionnaireList,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_questionnaire_detail(
        self,
        req_fetch_questionnaire_detail: "ReqFetchQuestionnaireDetail",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResFetchQuestionnaireDetail":
        return await self._unary_unary(
            "/lq.Lobby/fetchQuestionnaireDetail",
            req_fetch_questionnaire_detail,
            ResFetchQuestionnaireDetail,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def submit_questionnaire(
        self,
        req_submit_questionnaire: "ReqSubmitQuestionnaire",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.Lobby/submitQuestionnaire",
            req_submit_questionnaire,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class FastTestStub(betterproto.ServiceStub):
    async def auth_game(
        self,
        req_auth_game: "ReqAuthGame",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResAuthGame":
        return await self._unary_unary(
            "/lq.FastTest/authGame",
            req_auth_game,
            ResAuthGame,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def enter_game(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResEnterGame":
        return await self._unary_unary(
            "/lq.FastTest/enterGame",
            req_common,
            ResEnterGame,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def sync_game(
        self,
        req_sync_game: "ReqSyncGame",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResSyncGame":
        return await self._unary_unary(
            "/lq.FastTest/syncGame",
            req_sync_game,
            ResSyncGame,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def finish_sync_game(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.FastTest/finishSyncGame",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def terminate_game(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.FastTest/terminateGame",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def input_operation(
        self,
        req_self_operation: "ReqSelfOperation",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.FastTest/inputOperation",
            req_self_operation,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def input_chi_peng_gang(
        self,
        req_chi_peng_gang: "ReqChiPengGang",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.FastTest/inputChiPengGang",
            req_chi_peng_gang,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def confirm_new_round(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.FastTest/confirmNewRound",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def broadcast_in_game(
        self,
        req_broadcast_in_game: "ReqBroadcastInGame",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.FastTest/broadcastInGame",
            req_broadcast_in_game,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def input_game_gm_command(
        self,
        req_gm_command_in_gaming: "ReqGmCommandInGaming",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.FastTest/inputGameGMCommand",
            req_gm_command_in_gaming,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fetch_game_player_state(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResGamePlayerState":
        return await self._unary_unary(
            "/lq.FastTest/fetchGamePlayerState",
            req_common,
            ResGamePlayerState,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def check_network_delay(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.FastTest/checkNetworkDelay",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def clear_leaving(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.FastTest/clearLeaving",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def vote_game_end(
        self,
        req_vote_game_end: "ReqVoteGameEnd",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResGameEndVote":
        return await self._unary_unary(
            "/lq.FastTest/voteGameEnd",
            req_vote_game_end,
            ResGameEndVote,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def auth_observe(
        self,
        req_auth_observe: "ReqAuthObserve",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.FastTest/authObserve",
            req_auth_observe,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def start_observe(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResStartObserve":
        return await self._unary_unary(
            "/lq.FastTest/startObserve",
            req_common,
            ResStartObserve,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def stop_observe(
        self,
        req_common: "ReqCommon",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None,
    ) -> "ResCommon":
        return await self._unary_unary(
            "/lq.FastTest/stopObserve",
            req_common,
            ResCommon,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class LobbyBase(ServiceBase):
    async def fetch_connection_info(
        self, req_common: "ReqCommon"
    ) -> "ResConnectionInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_queue_info(self, req_common: "ReqCommon") -> "ResFetchQueueInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_queue(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def openid_check(
        self, req_openid_check: "ReqOpenidCheck"
    ) -> "ResOauth2Check":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def signup(
        self, req_signup_account: "ReqSignupAccount"
    ) -> "ResSignupAccount":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def login(self, req_login: "ReqLogin") -> "ResLogin":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_info(self, req_common: "ReqCommon") -> "ResFetchInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def login_success(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def email_login(self, req_email_login: "ReqEmailLogin") -> "ResLogin":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def oauth2_auth(self, req_oauth2_auth: "ReqOauth2Auth") -> "ResOauth2Auth":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def oauth2_check(
        self, req_oauth2_check: "ReqOauth2Check"
    ) -> "ResOauth2Check":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def oauth2_signup(
        self, req_oauth2_signup: "ReqOauth2Signup"
    ) -> "ResOauth2Signup":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def oauth2_login(self, req_oauth2_login: "ReqOauth2Login") -> "ResLogin":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def dmm_pre_login(
        self, req_dmm_pre_login: "ReqDmmPreLogin"
    ) -> "ResDmmPreLogin":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_phone_verify_code(
        self, req_create_phone_verify_code: "ReqCreatePhoneVerifyCode"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_email_verify_code(
        self, req_create_email_verify_code: "ReqCreateEmailVerifyCode"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def verfify_code_for_secure(
        self, req_verify_code_for_secure: "ReqVerifyCodeForSecure"
    ) -> "ResVerfiyCodeForSecure":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def bind_phone_number(
        self, req_bind_phone_number: "ReqBindPhoneNumber"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def unbind_phone_number(
        self, req_unbind_phone_number: "ReqUnbindPhoneNumber"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_phone_login_bind(
        self, req_common: "ReqCommon"
    ) -> "ResFetchPhoneLoginBind":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_phone_login_bind(
        self, req_create_phone_login_bind: "ReqCreatePhoneLoginBind"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def bind_email(self, req_bind_email: "ReqBindEmail") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def modify_password(
        self, req_modify_password: "ReqModifyPassword"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def bind_account(self, req_bind_account: "ReqBindAccount") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def logout(self, req_logout: "ReqLogout") -> "ResLogout":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def heatbeat(self, req_heat_beat: "ReqHeatBeat") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def login_beat(self, req_login_beat: "ReqLoginBeat") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_nickname(
        self, req_create_nickname: "ReqCreateNickname"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def modify_nickname(
        self, req_modify_nickname: "ReqModifyNickname"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def modify_birthday(
        self, req_modify_birthday: "ReqModifyBirthday"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_room(self, req_common: "ReqCommon") -> "ResSelfRoom":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_gaming_info(self, req_common: "ReqCommon") -> "ResFetchGamingInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_room(self, req_create_room: "ReqCreateRoom") -> "ResCreateRoom":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def join_room(self, req_join_room: "ReqJoinRoom") -> "ResJoinRoom":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def leave_room(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def ready_play(self, req_room_ready: "ReqRoomReady") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def dressing_status(
        self, req_room_dressing: "ReqRoomDressing"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start_room(self, req_room_start: "ReqRoomStart") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def kick_player(self, req_room_kick: "ReqRoomKick") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def modify_room(self, req_modify_room: "ReqModifyRoom") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def match_game(
        self, req_join_match_queue: "ReqJoinMatchQueue"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_match(
        self, req_cancel_match_queue: "ReqCancelMatchQueue"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_account_info(
        self, req_account_info: "ReqAccountInfo"
    ) -> "ResAccountInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_avatar(self, req_change_avatar: "ReqChangeAvatar") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def receive_version_reward(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_account_statistic_info(
        self, req_account_statistic_info: "ReqAccountStatisticInfo"
    ) -> "ResAccountStatisticInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_account_challenge_rank_info(
        self, req_account_info: "ReqAccountInfo"
    ) -> "ResAccountChallengeRankInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_account_character_info(
        self, req_common: "ReqCommon"
    ) -> "ResAccountCharacterInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def shop_purchase(
        self, req_shop_purchase: "ReqShopPurchase"
    ) -> "ResShopPurchase":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_game_record(
        self, req_game_record: "ReqGameRecord"
    ) -> "ResGameRecord":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def read_game_record(self, req_game_record: "ReqGameRecord") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_game_record_list(
        self, req_game_record_list: "ReqGameRecordList"
    ) -> "ResGameRecordList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_game_record_list_v2(
        self, req_game_record_list_v2: "ReqGameRecordListV2"
    ) -> "ResGameRecordListV2":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_next_game_record_list(
        self, req_next_game_record_list: "ReqNextGameRecordList"
    ) -> "ResNextGameRecordList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_collected_game_record_list(
        self, req_common: "ReqCommon"
    ) -> "ResCollectedGameRecordList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_game_records_detail(
        self, req_game_records_detail: "ReqGameRecordsDetail"
    ) -> "ResGameRecordsDetail":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_game_records_detail_v2(
        self, req_game_records_detail_v2: "ReqGameRecordsDetailV2"
    ) -> "ResGameRecordsDetailV2":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_collected_game_record(
        self, req_add_collected_game_record: "ReqAddCollectedGameRecord"
    ) -> "ResAddCollectedGameRecord":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_collected_game_record(
        self, req_remove_collected_game_record: "ReqRemoveCollectedGameRecord"
    ) -> "ResRemoveCollectedGameRecord":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_collected_game_record_remarks(
        self,
        req_change_collected_game_record_remarks: "ReqChangeCollectedGameRecordRemarks",
    ) -> "ResChangeCollectedGameRecordRemarks":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_level_leaderboard(
        self, req_level_leaderboard: "ReqLevelLeaderboard"
    ) -> "ResLevelLeaderboard":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_challenge_leaderboard(
        self, req_challange_leaderboard: "ReqChallangeLeaderboard"
    ) -> "ResChallengeLeaderboard":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_muti_challenge_level(
        self, req_muti_challenge_level: "ReqMutiChallengeLevel"
    ) -> "ResMutiChallengeLevel":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_multi_account_brief(
        self, req_multi_account_id: "ReqMultiAccountId"
    ) -> "ResMultiAccountBrief":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_friend_list(self, req_common: "ReqCommon") -> "ResFriendList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_friend_apply_list(
        self, req_common: "ReqCommon"
    ) -> "ResFriendApplyList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def apply_friend(self, req_apply_friend: "ReqApplyFriend") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def handle_friend_apply(
        self, req_handle_friend_apply: "ReqHandleFriendApply"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_friend(self, req_remove_friend: "ReqRemoveFriend") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def search_account_by_id(
        self, req_search_account_by_id: "ReqSearchAccountById"
    ) -> "ResSearchAccountById":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def search_account_by_pattern(
        self, req_search_account_by_pattern: "ReqSearchAccountByPattern"
    ) -> "ResSearchAccountByPattern":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_account_state(
        self, req_account_list: "ReqAccountList"
    ) -> "ResAccountStates":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_bag_info(self, req_common: "ReqCommon") -> "ResBagInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def use_bag_item(self, req_use_bag_item: "ReqUseBagItem") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def open_manual_item(
        self, req_open_manual_item: "ReqOpenManualItem"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def open_random_reward_item(
        self, req_open_random_reward_item: "ReqOpenRandomRewardItem"
    ) -> "ResOpenRandomRewardItem":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def open_all_reward_item(
        self, req_open_all_reward_item: "ReqOpenAllRewardItem"
    ) -> "ResOpenAllRewardItem":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def compose_shard(self, req_compose_shard: "ReqComposeShard") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_announcement(
        self, req_fetch_announcement: "ReqFetchAnnouncement"
    ) -> "ResAnnouncement":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def read_announcement(
        self, req_read_announcement: "ReqReadAnnouncement"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_mail_info(self, req_common: "ReqCommon") -> "ResMailInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def read_mail(self, req_read_mail: "ReqReadMail") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_mail(self, req_delete_mail: "ReqDeleteMail") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def take_attachment_from_mail(
        self, req_take_attachment: "ReqTakeAttachment"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def receive_achievement_reward(
        self, req_receive_achievement_reward: "ReqReceiveAchievementReward"
    ) -> "ResReceiveAchievementReward":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def receive_achievement_group_reward(
        self, req_receive_achievement_group_reward: "ReqReceiveAchievementGroupReward"
    ) -> "ResReceiveAchievementGroupReward":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_achievement_rate(
        self, req_common: "ReqCommon"
    ) -> "ResFetchAchievementRate":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_achievement(self, req_common: "ReqCommon") -> "ResAchievement":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def buy_shi_lian(self, req_buy_shi_lian: "ReqBuyShiLian") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def match_shi_lian(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def go_next_shi_lian(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_client_value(
        self, req_update_client_value: "ReqUpdateClientValue"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_client_value(self, req_common: "ReqCommon") -> "ResClientValue":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def client_message(
        self, req_client_message: "ReqClientMessage"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_current_match_info(
        self, req_current_match_info: "ReqCurrentMatchInfo"
    ) -> "ResCurrentMatchInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def user_complain(self, req_user_complain: "ReqUserComplain") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_revive_coin_info(
        self, req_common: "ReqCommon"
    ) -> "ResReviveCoinInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def gain_revive_coin(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_daily_task(self, req_common: "ReqCommon") -> "ResDailyTask":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def refresh_daily_task(
        self, req_refresh_daily_task: "ReqRefreshDailyTask"
    ) -> "ResRefreshDailyTask":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def use_gift_code(
        self, req_use_gift_code: "ReqUseGiftCode"
    ) -> "ResUseGiftCode":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def use_special_gift_code(
        self, req_use_gift_code: "ReqUseGiftCode"
    ) -> "ResUseSpecialGiftCode":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_title_list(self, req_common: "ReqCommon") -> "ResTitleList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def use_title(self, req_use_title: "ReqUseTitle") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_client_message(
        self, req_send_client_message: "ReqSendClientMessage"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_game_live_info(
        self, req_game_live_info: "ReqGameLiveInfo"
    ) -> "ResGameLiveInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_game_live_left_segment(
        self, req_game_live_left_segment: "ReqGameLiveLeftSegment"
    ) -> "ResGameLiveLeftSegment":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_game_live_list(
        self, req_game_live_list: "ReqGameLiveList"
    ) -> "ResGameLiveList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_comment_setting(
        self, req_common: "ReqCommon"
    ) -> "ResCommentSetting":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_comment_setting(
        self, req_update_comment_setting: "ReqUpdateCommentSetting"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_comment_list(
        self, req_fetch_comment_list: "ReqFetchCommentList"
    ) -> "ResFetchCommentList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_comment_content(
        self, req_fetch_comment_content: "ReqFetchCommentContent"
    ) -> "ResFetchCommentContent":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def leave_comment(self, req_leave_comment: "ReqLeaveComment") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_comment(
        self, req_delete_comment: "ReqDeleteComment"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_read_comment(
        self, req_update_read_comment: "ReqUpdateReadComment"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_rolling_notice(
        self, req_fetch_rolling_notice: "ReqFetchRollingNotice"
    ) -> "ResFetchRollingNotice":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_maintain_notice(
        self, req_common: "ReqCommon"
    ) -> "ResFetchMaintainNotice":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_server_time(self, req_common: "ReqCommon") -> "ResServerTime":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_platform_products(
        self, req_platform_billing_products: "ReqPlatformBillingProducts"
    ) -> "ResPlatformBillingProducts":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_google_play_order(
        self, req_cancel_google_play_order: "ReqCancelGooglePlayOrder"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def open_chest(self, req_open_chest: "ReqOpenChest") -> "ResOpenChest":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def buy_from_chest_shop(
        self, req_buy_from_chest_shop: "ReqBuyFromChestShop"
    ) -> "ResBuyFromChestShop":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_daily_sign_in_info(
        self, req_common: "ReqCommon"
    ) -> "ResDailySignInInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def do_daily_sign_in(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def do_activity_sign_in(
        self, req_do_activity_sign_in: "ReqDoActivitySignIn"
    ) -> "ResDoActivitySignIn":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_character_info(self, req_common: "ReqCommon") -> "ResCharacterInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_character_sort(
        self, req_update_character_sort: "ReqUpdateCharacterSort"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_main_character(
        self, req_change_main_character: "ReqChangeMainCharacter"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_character_skin(
        self, req_change_character_skin: "ReqChangeCharacterSkin"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_character_view(
        self, req_change_character_view: "ReqChangeCharacterView"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_hidden_character(
        self, req_set_hidden_character: "ReqSetHiddenCharacter"
    ) -> "ResSetHiddenCharacter":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_gift_to_character(
        self, req_send_gift_to_character: "ReqSendGiftToCharacter"
    ) -> "ResSendGiftToCharacter":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def sell_item(self, req_sell_item: "ReqSellItem") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_common_view(self, req_common: "ReqCommon") -> "ResCommonView":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_common_view(
        self, req_change_common_view: "ReqChangeCommonView"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def save_common_views(
        self, req_save_common_views: "ReqSaveCommonViews"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_common_views(
        self, req_common_views: "ReqCommonViews"
    ) -> "ResCommonViews":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_all_common_views(
        self, req_common: "ReqCommon"
    ) -> "ResAllcommonViews":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def use_common_view(
        self, req_use_common_view: "ReqUseCommonView"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def upgrade_character(
        self, req_upgrade_character: "ReqUpgradeCharacter"
    ) -> "ResUpgradeCharacter":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_finished_ending(
        self, req_finished_ending: "ReqFinishedEnding"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def receive_ending_reward(
        self, req_finished_ending: "ReqFinishedEnding"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def game_master_command(self, req_gm_command: "ReqGmCommand") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_shop_info(self, req_common: "ReqCommon") -> "ResShopInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def buy_from_shop(
        self, req_buy_from_shop: "ReqBuyFromShop"
    ) -> "ResBuyFromShop":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def buy_from_zhp(self, req_buy_from_zhp: "ReqBuyFromZhp") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def refresh_zhp_shop(
        self, req_resh_zhp_shop: "ReqReshZhpShop"
    ) -> "ResRefreshZhpShop":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_month_ticket_info(
        self, req_common: "ReqCommon"
    ) -> "ResMonthTicketInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pay_month_ticket(self, req_common: "ReqCommon") -> "ResPayMonthTicket":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def exchange_currency(
        self, req_exchange_currency: "ReqExchangeCurrency"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def exchange_chest_stone(
        self, req_exchange_currency: "ReqExchangeCurrency"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def exchange_diamond(
        self, req_exchange_currency: "ReqExchangeCurrency"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_server_settings(
        self, req_common: "ReqCommon"
    ) -> "ResServerSettings":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_account_settings(
        self, req_common: "ReqCommon"
    ) -> "ResAccountSettings":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_account_settings(
        self, req_update_account_settings: "ReqUpdateAccountSettings"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_mod_nickname_time(
        self, req_common: "ReqCommon"
    ) -> "ResModNicknameTime":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_wechat_native_order(
        self, req_create_wechat_native_order: "ReqCreateWechatNativeOrder"
    ) -> "ResCreateWechatNativeOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_wechat_app_order(
        self, req_create_wechat_app_order: "ReqCreateWechatAppOrder"
    ) -> "ResCreateWechatAppOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_alipay_order(
        self, req_create_alipay_order: "ReqCreateAlipayOrder"
    ) -> "ResCreateAlipayOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_alipay_scan_order(
        self, req_create_alipay_scan_order: "ReqCreateAlipayScanOrder"
    ) -> "ResCreateAlipayScanOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_alipay_app_order(
        self, req_create_alipay_app_order: "ReqCreateAlipayAppOrder"
    ) -> "ResCreateAlipayAppOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_jp_credit_card_order(
        self, req_create_jp_credit_card_order: "ReqCreateJpCreditCardOrder"
    ) -> "ResCreateJpCreditCardOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_jp_paypal_order(
        self, req_create_jp_paypal_order: "ReqCreateJpPaypalOrder"
    ) -> "ResCreateJpPaypalOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_jp_au_order(
        self, req_create_jp_au_order: "ReqCreateJpAuOrder"
    ) -> "ResCreateJpAuOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_jp_docomo_order(
        self, req_create_jp_docomo_order: "ReqCreateJpDocomoOrder"
    ) -> "ResCreateJpDocomoOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_jp_web_money_order(
        self, req_create_jp_web_money_order: "ReqCreateJpWebMoneyOrder"
    ) -> "ResCreateJpWebMoneyOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_jp_softbank_order(
        self, req_create_jp_softbank_order: "ReqCreateJpSoftbankOrder"
    ) -> "ResCreateJpSoftbankOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_jp_pay_pay_order(
        self, req_create_jp_pay_pay_order: "ReqCreateJpPayPayOrder"
    ) -> "ResCreateJpPayPayOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_jp_common_credit_card_order(
        self, req_fetch_jp_common_credit_card_order: "ReqFetchJpCommonCreditCardOrder"
    ) -> "ResFetchJpCommonCreditCardOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_jpgmo_order(
        self, req_create_jpgmo_order: "ReqCreateJpgmoOrder"
    ) -> "ResCreateJpgmoOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_en_paypal_order(
        self, req_create_en_paypal_order: "ReqCreateEnPaypalOrder"
    ) -> "ResCreateEnPaypalOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_en_master_card_order(
        self, req_create_en_master_card_order: "ReqCreateEnMasterCardOrder"
    ) -> "ResCreateEnMasterCardOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_en_visa_order(
        self, req_create_en_visa_order: "ReqCreateEnVisaOrder"
    ) -> "ResCreateEnVisaOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_enjcb_order(
        self, req_create_enjcb_order: "ReqCreateEnjcbOrder"
    ) -> "ResCreateEnjcbOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_en_alipay_order(
        self, req_create_en_alipay_order: "ReqCreateEnAlipayOrder"
    ) -> "ResCreateEnAlipayOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_kr_paypal_order(
        self, req_create_kr_paypal_order: "ReqCreateKrPaypalOrder"
    ) -> "ResCreateKrPaypalOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_kr_master_card_order(
        self, req_create_kr_master_card_order: "ReqCreateKrMasterCardOrder"
    ) -> "ResCreateKrMasterCardOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_kr_visa_order(
        self, req_create_kr_visa_order: "ReqCreateKrVisaOrder"
    ) -> "ResCreateKrVisaOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_krjcb_order(
        self, req_create_krjcb_order: "ReqCreateKrjcbOrder"
    ) -> "ResCreateKrjcbOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_kr_alipay_order(
        self, req_create_kr_alipay_order: "ReqCreateKrAlipayOrder"
    ) -> "ResCreateKrAlipayOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_dmm_order(
        self, req_create_dmm_order: "ReqCreateDmmOrder"
    ) -> "ResCreateDmmOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_iap_order(
        self, req_create_iap_order: "ReqCreateIapOrder"
    ) -> "ResCreateIapOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_steam_order(
        self, req_create_steam_order: "ReqCreateSteamOrder"
    ) -> "ResCreateSteamOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def verify_steam_order(
        self, req_verify_steam_order: "ReqVerifySteamOrder"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_my_card_android_order(
        self, req_create_my_card_order: "ReqCreateMyCardOrder"
    ) -> "ResCreateMyCardOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_my_card_web_order(
        self, req_create_my_card_order: "ReqCreateMyCardOrder"
    ) -> "ResCreateMyCardOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_paypal_order(
        self, req_create_paypal_order: "ReqCreatePaypalOrder"
    ) -> "ResCreatePaypalOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_xsolla_order(
        self, req_create_xsolla_order: "ReqCreateXsollaOrder"
    ) -> "ResCreateXsollaOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def verify_my_card_order(
        self, req_verify_my_card_order: "ReqVerifyMyCardOrder"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def verification_iap_order(
        self, req_verification_iap_order: "ReqVerificationIapOrder"
    ) -> "ResVerificationIapOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_yostar_sdk_order(
        self, req_create_yostar_order: "ReqCreateYostarOrder"
    ) -> "ResCreateYostarOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_billing_order(
        self, req_create_billing_order: "ReqCreateBillingOrder"
    ) -> "ResCreateBillingOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def solve_google_play_order(
        self, req_solve_google_play_order: "ReqSolveGooglePlayOrder"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def solve_google_pay_order_v3(
        self, req_solve_google_play_order_v3: "ReqSolveGooglePlayOrderV3"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deliver_aa32_order(
        self, req_deliver_aa32_order: "ReqDeliverAa32Order"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_misc(self, req_common: "ReqCommon") -> "ResMisc":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def modify_signature(
        self, req_modify_signature: "ReqModifySignature"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_id_card_info(self, req_common: "ReqCommon") -> "ResIdCardInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_id_card_info(
        self, req_update_id_card_info: "ReqUpdateIdCardInfo"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_vip_reward(self, req_common: "ReqCommon") -> "ResVipReward":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def gain_vip_reward(
        self, req_gain_vip_reward: "ReqGainVipReward"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_refund_order(
        self, req_common: "ReqCommon"
    ) -> "ResFetchRefundOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_customized_contest_list(
        self, req_fetch_customized_contest_list: "ReqFetchCustomizedContestList"
    ) -> "ResFetchCustomizedContestList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_customized_contest_auth_info(
        self,
        req_fetch_customized_contest_auth_info: "ReqFetchCustomizedContestAuthInfo",
    ) -> "ResFetchCustomizedContestAuthInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def enter_customized_contest(
        self, req_enter_customized_contest: "ReqEnterCustomizedContest"
    ) -> "ResEnterCustomizedContest":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def leave_customized_contest(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_customized_contest_online_info(
        self,
        req_fetch_customized_contest_online_info: "ReqFetchCustomizedContestOnlineInfo",
    ) -> "ResFetchCustomizedContestOnlineInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_customized_contest_by_contest_id(
        self,
        req_fetch_customized_contest_by_contest_id: "ReqFetchCustomizedContestByContestId",
    ) -> "ResFetchCustomizedContestByContestId":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def signup_customized_contest(
        self, req_signup_customized_contest: "ReqSignupCustomizedContest"
    ) -> "ResSignupCustomizedContest":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start_customized_contest(
        self, req_start_customized_contest: "ReqStartCustomizedContest"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop_customized_contest(
        self, req_stop_customized_contest: "ReqStopCustomizedContest"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def join_customized_contest_chat_room(
        self, req_join_customized_contest_chat_room: "ReqJoinCustomizedContestChatRoom"
    ) -> "ResJoinCustomizedContestChatRoom":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def leave_customized_contest_chat_room(
        self, req_common: "ReqCommon"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def say_chat_message(
        self, req_say_chat_message: "ReqSayChatMessage"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_customized_contest_game_records(
        self,
        req_fetch_customized_contest_game_records: "ReqFetchCustomizedContestGameRecords",
    ) -> "ResFetchCustomizedContestGameRecords":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_customized_contest_game_live_list(
        self,
        req_fetch_customized_contest_game_live_list: "ReqFetchCustomizedContestGameLiveList",
    ) -> "ResFetchCustomizedContestGameLiveList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def follow_customized_contest(
        self, req_target_customized_contest: "ReqTargetCustomizedContest"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def unfollow_customized_contest(
        self, req_target_customized_contest: "ReqTargetCustomizedContest"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_activity_list(self, req_common: "ReqCommon") -> "ResActivityList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_account_activity_data(
        self, req_common: "ReqCommon"
    ) -> "ResAccountActivityData":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def exchange_activity_item(
        self, req_exchange_activity_item: "ReqExchangeActivityItem"
    ) -> "ResExchangeActivityItem":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def complete_activity_task(
        self, req_complete_activity_task: "ReqCompleteActivityTask"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def complete_activity_task_batch(
        self, req_complete_activity_task_batch: "ReqCompleteActivityTaskBatch"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def complete_activity_flip_task(
        self, req_complete_activity_task: "ReqCompleteActivityTask"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def complete_period_activity_task(
        self, req_complete_activity_task: "ReqCompleteActivityTask"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def complete_period_activity_task_batch(
        self,
        req_complete_period_activity_task_batch: "ReqCompletePeriodActivityTaskBatch",
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def complete_random_activity_task(
        self, req_complete_activity_task: "ReqCompleteActivityTask"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def receive_activity_flip_task(
        self, req_receive_activity_flip_task: "ReqReceiveActivityFlipTask"
    ) -> "ResReceiveActivityFlipTask":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def complete_segment_task_reward(
        self, req_complete_segment_task_reward: "ReqCompleteSegmentTaskReward"
    ) -> "ResCompleteSegmentTaskReward":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_activity_flip_info(
        self, req_fetch_activity_flip_info: "ReqFetchActivityFlipInfo"
    ) -> "ResFetchActivityFlipInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def gain_accumulated_point_activity_reward(
        self,
        req_gain_accumulated_point_activity_reward: "ReqGainAccumulatedPointActivityReward",
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def gain_multi_point_activity_reward(
        self, req_gain_multi_point_activity_reward: "ReqGainMultiPointActivityReward"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_rank_point_leaderboard(
        self, req_fetch_rank_point_leaderboard: "ReqFetchRankPointLeaderboard"
    ) -> "ResFetchRankPointLeaderboard":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def gain_rank_point_reward(
        self, req_gain_rank_point_reward: "ReqGainRankPointReward"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def richman_activity_next_move(
        self, req_richman_next_move: "ReqRichmanNextMove"
    ) -> "ResRichmanNextMove":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def richman_acitivity_special_move(
        self, req_richman_special_move: "ReqRichmanSpecialMove"
    ) -> "ResRichmanNextMove":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def richman_activity_chest_info(
        self, req_richman_chest_info: "ReqRichmanChestInfo"
    ) -> "ResRichmanChestInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_game_observe_auth(
        self, req_create_game_observe_auth: "ReqCreateGameObserveAuth"
    ) -> "ResCreateGameObserveAuth":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def refresh_game_observe_auth(
        self, req_refresh_game_observe_auth: "ReqRefreshGameObserveAuth"
    ) -> "ResRefreshGameObserveAuth":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_activity_buff(self, req_common: "ReqCommon") -> "ResActivityBuff":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def upgrade_activity_buff(
        self, req_upgrade_activity_buff: "ReqUpgradeActivityBuff"
    ) -> "ResActivityBuff":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def upgrade_activity_level(
        self, req_upgrade_activity_level: "ReqUpgradeActivityLevel"
    ) -> "ResUpgradeActivityLevel":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def receive_upgrade_activity_reward(
        self, req_receive_upgrade_activity_reward: "ReqReceiveUpgradeActivityReward"
    ) -> "ResReceiveUpgradeActivityReward":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def upgrade_challenge(self, req_common: "ReqCommon") -> "ResUpgradeChallenge":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def refresh_challenge(self, req_common: "ReqCommon") -> "ResRefreshChallenge":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_challenge_info(
        self, req_common: "ReqCommon"
    ) -> "ResFetchChallengeInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def force_complete_challenge_task(
        self, req_force_complete_challenge_task: "ReqForceCompleteChallengeTask"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_challenge_season(
        self, req_common: "ReqCommon"
    ) -> "ResChallengeSeasonInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def receive_challenge_rank_reward(
        self, req_receive_challenge_rank_reward: "ReqReceiveChallengeRankReward"
    ) -> "ResReceiveChallengeRankReward":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_ab_match_info(self, req_common: "ReqCommon") -> "ResFetchAbMatch":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def buy_in_ab_match(
        self, req_buy_in_ab_match: "ReqBuyInAbMatch"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def receive_ab_match_reward(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def quit_ab_match(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start_unified_match(
        self, req_start_unified_match: "ReqStartUnifiedMatch"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_unified_match(
        self, req_cancel_unified_match: "ReqCancelUnifiedMatch"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_game_point_rank(
        self, req_game_point_rank: "ReqGamePointRank"
    ) -> "ResGamePointRank":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_self_game_point_rank(
        self, req_game_point_rank: "ReqGamePointRank"
    ) -> "ResFetchSelfGamePointRank":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def read_sns(self, req_read_sns: "ReqReadSns") -> "ResReadSns":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def reply_sns(self, req_reply_sns: "ReqReplySns") -> "ResReplySns":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def like_sns(self, req_like_sns: "ReqLikeSns") -> "ResLikeSns":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def dig_mine(self, req_dig_mine: "ReqDigMine") -> "ResDigMine":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_last_privacy(
        self, req_fetch_last_privacy: "ReqFetchLastPrivacy"
    ) -> "ResFetchLastPrivacy":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def check_privacy(self, req_check_privacy: "ReqCheckPrivacy") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def response_captcha(
        self, req_response_captcha: "ReqResponseCaptcha"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_rpg_battle_history(
        self, req_fetch_rpg_battle_history: "ReqFetchRpgBattleHistory"
    ) -> "ResFetchRpgBattleHistory":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_rpg_battle_history_v2(
        self, req_fetch_rpg_battle_history: "ReqFetchRpgBattleHistory"
    ) -> "ResFetchRpgBattleHistoryV2":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def receive_rpg_rewards(
        self, req_receive_rpg_rewards: "ReqReceiveRpgRewards"
    ) -> "ResReceiveRpgRewards":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def receive_rpg_reward(
        self, req_receive_rpg_reward: "ReqReceiveRpgReward"
    ) -> "ResReceiveRpgRewards":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def buy_arena_ticket(
        self, req_buy_arena_ticket: "ReqBuyArenaTicket"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def enter_arena(self, req_enter_arena: "ReqEnterArena") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def receive_arena_reward(
        self, req_arena_reward: "ReqArenaReward"
    ) -> "ResArenaReward":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_ob_token(
        self, req_fetch_ob_token: "ReqFetchObToken"
    ) -> "ResFetchObToken":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def receive_character_rewards(
        self, req_receive_character_rewards: "ReqReceiveCharacterRewards"
    ) -> "ResReceiveCharacterRewards":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def feed_activity_feed(
        self, req_feed_activity_feed: "ReqFeedActivityFeed"
    ) -> "ResFeedActivityFeed":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_activity_gift_to_friend(
        self, req_send_activity_gift_to_friend: "ReqSendActivityGiftToFriend"
    ) -> "ResSendActivityGiftToFriend":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def receive_activity_gift(
        self, req_receive_activity_gift: "ReqReceiveActivityGift"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def receive_all_activity_gift(
        self, req_receive_all_activity_gift: "ReqReceiveAllActivityGift"
    ) -> "ResReceiveAllActivityGift":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_friend_gift_activity_data(
        self, req_fetch_friend_gift_activity_data: "ReqFetchFriendGiftActivityData"
    ) -> "ResFetchFriendGiftActivityData":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def open_pre_chest_item(
        self, req_open_pre_chest_item: "ReqOpenPreChestItem"
    ) -> "ResOpenPreChestItem":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_vote_activity(
        self, req_fetch_vote_activity: "ReqFetchVoteActivity"
    ) -> "ResFetchVoteActivity":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def vote_activity(
        self, req_vote_activity: "ReqVoteActivity"
    ) -> "ResVoteActivity":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def unlock_activity_spot(
        self, req_unlock_activity_spot: "ReqUnlockActivitySpot"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def unlock_activity_spot_ending(
        self, req_unlock_activity_spot_ending: "ReqUnlockActivitySpotEnding"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def receive_activity_spot_reward(
        self, req_receive_activity_spot_reward: "ReqReceiveActivitySpotReward"
    ) -> "ResReceiveActivitySpotReward":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_account(self, req_common: "ReqCommon") -> "ResDeleteAccount":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_delete_account(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def log_report(self, req_log_report: "ReqLogReport") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def bind_oauth2(self, req_bind_oauth2: "ReqBindOauth2") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_oauth2_info(
        self, req_fetch_oauth2: "ReqFetchOauth2"
    ) -> "ResFetchOauth2":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_loading_image(
        self, req_set_loading_image: "ReqSetLoadingImage"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_shop_interval(
        self, req_common: "ReqCommon"
    ) -> "ResFetchShopInterval":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_activity_interval(
        self, req_common: "ReqCommon"
    ) -> "ResFetchActivityInterval":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_recent_friend(
        self, req_common: "ReqCommon"
    ) -> "ResFetchrecentFriend":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def open_gacha(self, req_open_gacha: "ReqOpenGacha") -> "ResOpenGacha":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def task_request(self, req_task_request: "ReqTaskRequest") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def simulation_activity_train(
        self, req_simulation_activity_train: "ReqSimulationActivityTrain"
    ) -> "ResSimulationActivityTrain":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_simulation_game_record(
        self, req_fetch_simulation_game_record: "ReqFetchSimulationGameRecord"
    ) -> "ResFetchSimulationGameRecord":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start_simulation_activity_game(
        self, req_start_simulation_activity_game: "ReqStartSimulationActivityGame"
    ) -> "ResStartSimulationActivityGame":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_simulation_game_rank(
        self, req_fetch_simulation_game_rank: "ReqFetchSimulationGameRank"
    ) -> "ResFetchSimulationGameRank":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def generate_combining_craft(
        self, req_generate_combining_craft: "ReqGenerateCombiningCraft"
    ) -> "ResGenerateCombiningCraft":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def move_combining_craft(
        self, req_move_combining_craft: "ReqMoveCombiningCraft"
    ) -> "ResMoveCombiningCraft":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def combining_recycle_craft(
        self, req_combining_recycle_craft: "ReqCombiningRecycleCraft"
    ) -> "ResCombiningRecycleCraft":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def recover_combining_recycle(
        self, req_recover_combining_recycle: "ReqRecoverCombiningRecycle"
    ) -> "ResRecoverCombiningRecycle":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def finish_combining_order(
        self, req_finish_combining_order: "ReqFinishCombiningOrder"
    ) -> "ResFinishCombiningOrder":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def upgrade_village_building(
        self, req_upgrade_village_building: "ReqUpgradeVillageBuilding"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def receive_village_building_reward(
        self, req_receive_village_building_reward: "ReqReceiveVillageBuildingReward"
    ) -> "ResReceiveVillageBuildingReward":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start_village_trip(
        self, req_start_village_trip: "ReqStartVillageTrip"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def receive_village_trip_reward(
        self, req_receive_village_trip_reward: "ReqReceiveVillageTripReward"
    ) -> "ResReceiveVillageTripReward":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def complete_village_task(
        self, req_complete_village_task: "ReqCompleteVillageTask"
    ) -> "ResCompleteVillageTask":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_friend_village_data(
        self, req_get_friend_village_data: "ReqGetFriendVillageData"
    ) -> "ResGetFriendVillageData":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_village_worker(
        self, req_set_village_worker: "ReqSetVillageWorker"
    ) -> "ResSetVillageWorker":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def next_round_village(
        self, req_next_round_village: "ReqNextRoundVillage"
    ) -> "ResNextRoundVillage":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def resolve_festival_activity_proposal(
        self,
        req_resolve_festival_activity_proposal: "ReqResolveFestivalActivityProposal",
    ) -> "ResResolveFestivalActivityProposal":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def resolve_festival_activity_event(
        self, req_resolve_festival_activity_event: "ReqResolveFestivalActivityEvent"
    ) -> "ResResolveFestivalActivityEvent":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def buy_festival_proposal(
        self, req_buy_festival_proposal: "ReqBuyFestivalProposal"
    ) -> "ResBuyFestivalProposal":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def island_activity_move(
        self, req_island_activity_move: "ReqIslandActivityMove"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def island_activity_buy(
        self, req_island_activity_buy: "ReqIslandActivityBuy"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def island_activity_sell(
        self, req_island_activity_sell: "ReqIslandActivitySell"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def island_activity_tidy_bag(
        self, req_island_activity_tidy_bag: "ReqIslandActivityTidyBag"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def island_activity_unlock_bag_grid(
        self, req_island_activity_unlock_bag_grid: "ReqIslandActivityUnlockBagGrid"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_customized_contest(
        self, req_create_customized_contest: "ReqCreateCustomizedContest"
    ) -> "ResCreateCustomizedContest":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_manager_customized_contest_list(
        self,
        req_fetchmanager_customized_contest_list: "ReqFetchmanagerCustomizedContestList",
    ) -> "ResFetchManagerCustomizedContestList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_manager_customized_contest(
        self, req_fetch_manager_customized_contest: "ReqFetchManagerCustomizedContest"
    ) -> "ResFetchManagerCustomizedContest":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_manager_customized_contest(
        self, req_update_manager_customized_contest: "ReqUpdateManagerCustomizedContest"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_contest_player_rank(
        self, req_fetch_contest_player_rank: "ReqFetchContestPlayerRank"
    ) -> "ResFetchContestPlayerRank":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_ready_player_list(
        self, req_fetch_ready_player_list: "ReqFetchReadyPlayerList"
    ) -> "ResFetchReadyPlayerList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_game_plan(
        self, req_create_game_plan: "ReqCreateGamePlan"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def generate_contest_manager_login_code(
        self, req_common: "ReqCommon"
    ) -> "ResGenerateContestManagerLoginCode":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def amulet_activity_start_game(
        self, req_amulet_activity_start_game: "ReqAmuletActivityStartGame"
    ) -> "ResAmuletActivityStartGame":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def amulet_activity_operate(
        self, req_amulet_activity_operate: "ReqAmuletActivityOperate"
    ) -> "ResAmuletActivityOperate":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def amulet_activity_change_hands(
        self, req_amulet_activity_change_hands: "ReqAmuletActivityChangeHands"
    ) -> "ResAmuletActivityChangeHands":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def amulet_activity_upgrade(
        self, req_amulet_activity_upgrade: "ReqAmuletActivityUpgrade"
    ) -> "ResAmuletActivityUpgrade":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def amulet_activity_buy(
        self, req_amulet_activity_buy: "ReqAmuletActivityBuy"
    ) -> "ResAmuletActivityBuy":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def amulet_activity_select_pack(
        self, req_amulet_activity_select_pack: "ReqAmuletActivitySelectPack"
    ) -> "ResAmuletActivitySelectPack":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def amulet_activity_sell_effect(
        self, req_amulet_activity_sell_effect: "ReqAmuletActivitySellEffect"
    ) -> "ResAmuletActivitySellEffect":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def amulet_activity_effect_sort(
        self, req_amulet_activity_effect_sort: "ReqAmuletActivityEffectSort"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def amulet_activity_giveup(
        self, req_amulet_activity_giveup: "ReqAmuletActivityGiveup"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def amulet_activity_refresh_shop(
        self, req_amulet_activity_refresh_shop: "ReqAmuletActivityRefreshShop"
    ) -> "ResAmuletActivityRefreshShop":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def amulet_activity_select_free_effect(
        self,
        req_amulet_activity_select_free_effect: "ReqAmuletActivitySelectFreeEffect",
    ) -> "ResAmuletActivitySelectFreeEffect":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def amulet_activity_upgrade_shop_buff(
        self, req_amulet_activity_upgrade_shop_buff: "ReqAmuletActivityUpgradeShopBuff"
    ) -> "ResAmuletActivityUpgradeShopBuff":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def amulet_activity_end_shopping(
        self, req_amulet_activity_end_shopping: "ReqAmuletActivityEndShopping"
    ) -> "ResAmuletActivityEndShopping":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def amulet_activity_set_skill_level(
        self, req_amulet_activity_set_skill_level: "ReqAmuletActivitySetSkillLevel"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def amulet_activity_maintain_info(
        self, req_common: "ReqCommon"
    ) -> "ResAmuletActivityMaintainInfo":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def story_activity_unlock(
        self, req_story_activity_unlock: "ReqStoryActivityUnlock"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def story_activity_unlock_ending(
        self, req_story_activity_unlock_ending: "ReqStoryActivityUnlockEnding"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def story_activity_receive_ending_reward(
        self,
        req_story_activity_receive_ending_reward: "ReqStoryActivityReceiveEndingReward",
    ) -> "ResStoryReward":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def story_activity_receive_finish_reward(
        self,
        req_story_activity_receive_finish_reward: "ReqStoryActivityReceiveFinishReward",
    ) -> "ResStoryReward":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def story_activity_receive_all_finish_reward(
        self,
        req_story_activity_receive_all_finish_reward: "ReqStoryActivityReceiveAllFinishReward",
    ) -> "ResStoryReward":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def story_activity_unlock_ending_and_receive(
        self,
        req_story_activity_unlock_ending_and_receive: "ReqStoryActivityUnlockEndingAndReceive",
    ) -> "ResStoryActivityUnlockEndingAndReceive":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_activity_rank(
        self, req_fetch_activity_rank: "ReqFetchActivityRank"
    ) -> "ResFetchActivityRank":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_verified_hidden(
        self, req_set_verified_hidden: "ReqSetVerifiedHidden"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_questionnaire_list(
        self, req_fetch_questionnaire_list: "ReqFetchQuestionnaireList"
    ) -> "ResFetchQuestionnaireList":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_questionnaire_detail(
        self, req_fetch_questionnaire_detail: "ReqFetchQuestionnaireDetail"
    ) -> "ResFetchQuestionnaireDetail":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def submit_questionnaire(
        self, req_submit_questionnaire: "ReqSubmitQuestionnaire"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_fetch_connection_info(
        self, stream: "grpclib.server.Stream[ReqCommon, ResConnectionInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_connection_info(request)
        await stream.send_message(response)

    async def __rpc_fetch_queue_info(
        self, stream: "grpclib.server.Stream[ReqCommon, ResFetchQueueInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_queue_info(request)
        await stream.send_message(response)

    async def __rpc_cancel_queue(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_queue(request)
        await stream.send_message(response)

    async def __rpc_openid_check(
        self, stream: "grpclib.server.Stream[ReqOpenidCheck, ResOauth2Check]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.openid_check(request)
        await stream.send_message(response)

    async def __rpc_signup(
        self, stream: "grpclib.server.Stream[ReqSignupAccount, ResSignupAccount]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.signup(request)
        await stream.send_message(response)

    async def __rpc_login(
        self, stream: "grpclib.server.Stream[ReqLogin, ResLogin]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.login(request)
        await stream.send_message(response)

    async def __rpc_fetch_info(
        self, stream: "grpclib.server.Stream[ReqCommon, ResFetchInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_info(request)
        await stream.send_message(response)

    async def __rpc_login_success(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.login_success(request)
        await stream.send_message(response)

    async def __rpc_email_login(
        self, stream: "grpclib.server.Stream[ReqEmailLogin, ResLogin]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.email_login(request)
        await stream.send_message(response)

    async def __rpc_oauth2_auth(
        self, stream: "grpclib.server.Stream[ReqOauth2Auth, ResOauth2Auth]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.oauth2_auth(request)
        await stream.send_message(response)

    async def __rpc_oauth2_check(
        self, stream: "grpclib.server.Stream[ReqOauth2Check, ResOauth2Check]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.oauth2_check(request)
        await stream.send_message(response)

    async def __rpc_oauth2_signup(
        self, stream: "grpclib.server.Stream[ReqOauth2Signup, ResOauth2Signup]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.oauth2_signup(request)
        await stream.send_message(response)

    async def __rpc_oauth2_login(
        self, stream: "grpclib.server.Stream[ReqOauth2Login, ResLogin]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.oauth2_login(request)
        await stream.send_message(response)

    async def __rpc_dmm_pre_login(
        self, stream: "grpclib.server.Stream[ReqDmmPreLogin, ResDmmPreLogin]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.dmm_pre_login(request)
        await stream.send_message(response)

    async def __rpc_create_phone_verify_code(
        self, stream: "grpclib.server.Stream[ReqCreatePhoneVerifyCode, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_phone_verify_code(request)
        await stream.send_message(response)

    async def __rpc_create_email_verify_code(
        self, stream: "grpclib.server.Stream[ReqCreateEmailVerifyCode, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_email_verify_code(request)
        await stream.send_message(response)

    async def __rpc_verfify_code_for_secure(
        self,
        stream: "grpclib.server.Stream[ReqVerifyCodeForSecure, ResVerfiyCodeForSecure]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.verfify_code_for_secure(request)
        await stream.send_message(response)

    async def __rpc_bind_phone_number(
        self, stream: "grpclib.server.Stream[ReqBindPhoneNumber, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.bind_phone_number(request)
        await stream.send_message(response)

    async def __rpc_unbind_phone_number(
        self, stream: "grpclib.server.Stream[ReqUnbindPhoneNumber, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.unbind_phone_number(request)
        await stream.send_message(response)

    async def __rpc_fetch_phone_login_bind(
        self, stream: "grpclib.server.Stream[ReqCommon, ResFetchPhoneLoginBind]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_phone_login_bind(request)
        await stream.send_message(response)

    async def __rpc_create_phone_login_bind(
        self, stream: "grpclib.server.Stream[ReqCreatePhoneLoginBind, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_phone_login_bind(request)
        await stream.send_message(response)

    async def __rpc_bind_email(
        self, stream: "grpclib.server.Stream[ReqBindEmail, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.bind_email(request)
        await stream.send_message(response)

    async def __rpc_modify_password(
        self, stream: "grpclib.server.Stream[ReqModifyPassword, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.modify_password(request)
        await stream.send_message(response)

    async def __rpc_bind_account(
        self, stream: "grpclib.server.Stream[ReqBindAccount, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.bind_account(request)
        await stream.send_message(response)

    async def __rpc_logout(
        self, stream: "grpclib.server.Stream[ReqLogout, ResLogout]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.logout(request)
        await stream.send_message(response)

    async def __rpc_heatbeat(
        self, stream: "grpclib.server.Stream[ReqHeatBeat, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.heatbeat(request)
        await stream.send_message(response)

    async def __rpc_login_beat(
        self, stream: "grpclib.server.Stream[ReqLoginBeat, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.login_beat(request)
        await stream.send_message(response)

    async def __rpc_create_nickname(
        self, stream: "grpclib.server.Stream[ReqCreateNickname, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_nickname(request)
        await stream.send_message(response)

    async def __rpc_modify_nickname(
        self, stream: "grpclib.server.Stream[ReqModifyNickname, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.modify_nickname(request)
        await stream.send_message(response)

    async def __rpc_modify_birthday(
        self, stream: "grpclib.server.Stream[ReqModifyBirthday, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.modify_birthday(request)
        await stream.send_message(response)

    async def __rpc_fetch_room(
        self, stream: "grpclib.server.Stream[ReqCommon, ResSelfRoom]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_room(request)
        await stream.send_message(response)

    async def __rpc_fetch_gaming_info(
        self, stream: "grpclib.server.Stream[ReqCommon, ResFetchGamingInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_gaming_info(request)
        await stream.send_message(response)

    async def __rpc_create_room(
        self, stream: "grpclib.server.Stream[ReqCreateRoom, ResCreateRoom]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_room(request)
        await stream.send_message(response)

    async def __rpc_join_room(
        self, stream: "grpclib.server.Stream[ReqJoinRoom, ResJoinRoom]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.join_room(request)
        await stream.send_message(response)

    async def __rpc_leave_room(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.leave_room(request)
        await stream.send_message(response)

    async def __rpc_ready_play(
        self, stream: "grpclib.server.Stream[ReqRoomReady, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.ready_play(request)
        await stream.send_message(response)

    async def __rpc_dressing_status(
        self, stream: "grpclib.server.Stream[ReqRoomDressing, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.dressing_status(request)
        await stream.send_message(response)

    async def __rpc_start_room(
        self, stream: "grpclib.server.Stream[ReqRoomStart, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.start_room(request)
        await stream.send_message(response)

    async def __rpc_kick_player(
        self, stream: "grpclib.server.Stream[ReqRoomKick, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.kick_player(request)
        await stream.send_message(response)

    async def __rpc_modify_room(
        self, stream: "grpclib.server.Stream[ReqModifyRoom, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.modify_room(request)
        await stream.send_message(response)

    async def __rpc_match_game(
        self, stream: "grpclib.server.Stream[ReqJoinMatchQueue, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.match_game(request)
        await stream.send_message(response)

    async def __rpc_cancel_match(
        self, stream: "grpclib.server.Stream[ReqCancelMatchQueue, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_match(request)
        await stream.send_message(response)

    async def __rpc_fetch_account_info(
        self, stream: "grpclib.server.Stream[ReqAccountInfo, ResAccountInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_account_info(request)
        await stream.send_message(response)

    async def __rpc_change_avatar(
        self, stream: "grpclib.server.Stream[ReqChangeAvatar, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.change_avatar(request)
        await stream.send_message(response)

    async def __rpc_receive_version_reward(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.receive_version_reward(request)
        await stream.send_message(response)

    async def __rpc_fetch_account_statistic_info(
        self,
        stream: "grpclib.server.Stream[ReqAccountStatisticInfo, ResAccountStatisticInfo]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_account_statistic_info(request)
        await stream.send_message(response)

    async def __rpc_fetch_account_challenge_rank_info(
        self,
        stream: "grpclib.server.Stream[ReqAccountInfo, ResAccountChallengeRankInfo]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_account_challenge_rank_info(request)
        await stream.send_message(response)

    async def __rpc_fetch_account_character_info(
        self, stream: "grpclib.server.Stream[ReqCommon, ResAccountCharacterInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_account_character_info(request)
        await stream.send_message(response)

    async def __rpc_shop_purchase(
        self, stream: "grpclib.server.Stream[ReqShopPurchase, ResShopPurchase]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.shop_purchase(request)
        await stream.send_message(response)

    async def __rpc_fetch_game_record(
        self, stream: "grpclib.server.Stream[ReqGameRecord, ResGameRecord]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_game_record(request)
        await stream.send_message(response)

    async def __rpc_read_game_record(
        self, stream: "grpclib.server.Stream[ReqGameRecord, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.read_game_record(request)
        await stream.send_message(response)

    async def __rpc_fetch_game_record_list(
        self, stream: "grpclib.server.Stream[ReqGameRecordList, ResGameRecordList]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_game_record_list(request)
        await stream.send_message(response)

    async def __rpc_fetch_game_record_list_v2(
        self, stream: "grpclib.server.Stream[ReqGameRecordListV2, ResGameRecordListV2]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_game_record_list_v2(request)
        await stream.send_message(response)

    async def __rpc_fetch_next_game_record_list(
        self,
        stream: "grpclib.server.Stream[ReqNextGameRecordList, ResNextGameRecordList]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_next_game_record_list(request)
        await stream.send_message(response)

    async def __rpc_fetch_collected_game_record_list(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCollectedGameRecordList]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_collected_game_record_list(request)
        await stream.send_message(response)

    async def __rpc_fetch_game_records_detail(
        self,
        stream: "grpclib.server.Stream[ReqGameRecordsDetail, ResGameRecordsDetail]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_game_records_detail(request)
        await stream.send_message(response)

    async def __rpc_fetch_game_records_detail_v2(
        self,
        stream: "grpclib.server.Stream[ReqGameRecordsDetailV2, ResGameRecordsDetailV2]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_game_records_detail_v2(request)
        await stream.send_message(response)

    async def __rpc_add_collected_game_record(
        self,
        stream: "grpclib.server.Stream[ReqAddCollectedGameRecord, ResAddCollectedGameRecord]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_collected_game_record(request)
        await stream.send_message(response)

    async def __rpc_remove_collected_game_record(
        self,
        stream: "grpclib.server.Stream[ReqRemoveCollectedGameRecord, ResRemoveCollectedGameRecord]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_collected_game_record(request)
        await stream.send_message(response)

    async def __rpc_change_collected_game_record_remarks(
        self,
        stream: "grpclib.server.Stream[ReqChangeCollectedGameRecordRemarks, ResChangeCollectedGameRecordRemarks]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.change_collected_game_record_remarks(request)
        await stream.send_message(response)

    async def __rpc_fetch_level_leaderboard(
        self, stream: "grpclib.server.Stream[ReqLevelLeaderboard, ResLevelLeaderboard]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_level_leaderboard(request)
        await stream.send_message(response)

    async def __rpc_fetch_challenge_leaderboard(
        self,
        stream: "grpclib.server.Stream[ReqChallangeLeaderboard, ResChallengeLeaderboard]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_challenge_leaderboard(request)
        await stream.send_message(response)

    async def __rpc_fetch_muti_challenge_level(
        self,
        stream: "grpclib.server.Stream[ReqMutiChallengeLevel, ResMutiChallengeLevel]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_muti_challenge_level(request)
        await stream.send_message(response)

    async def __rpc_fetch_multi_account_brief(
        self, stream: "grpclib.server.Stream[ReqMultiAccountId, ResMultiAccountBrief]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_multi_account_brief(request)
        await stream.send_message(response)

    async def __rpc_fetch_friend_list(
        self, stream: "grpclib.server.Stream[ReqCommon, ResFriendList]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_friend_list(request)
        await stream.send_message(response)

    async def __rpc_fetch_friend_apply_list(
        self, stream: "grpclib.server.Stream[ReqCommon, ResFriendApplyList]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_friend_apply_list(request)
        await stream.send_message(response)

    async def __rpc_apply_friend(
        self, stream: "grpclib.server.Stream[ReqApplyFriend, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.apply_friend(request)
        await stream.send_message(response)

    async def __rpc_handle_friend_apply(
        self, stream: "grpclib.server.Stream[ReqHandleFriendApply, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.handle_friend_apply(request)
        await stream.send_message(response)

    async def __rpc_remove_friend(
        self, stream: "grpclib.server.Stream[ReqRemoveFriend, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_friend(request)
        await stream.send_message(response)

    async def __rpc_search_account_by_id(
        self,
        stream: "grpclib.server.Stream[ReqSearchAccountById, ResSearchAccountById]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.search_account_by_id(request)
        await stream.send_message(response)

    async def __rpc_search_account_by_pattern(
        self,
        stream: "grpclib.server.Stream[ReqSearchAccountByPattern, ResSearchAccountByPattern]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.search_account_by_pattern(request)
        await stream.send_message(response)

    async def __rpc_fetch_account_state(
        self, stream: "grpclib.server.Stream[ReqAccountList, ResAccountStates]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_account_state(request)
        await stream.send_message(response)

    async def __rpc_fetch_bag_info(
        self, stream: "grpclib.server.Stream[ReqCommon, ResBagInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_bag_info(request)
        await stream.send_message(response)

    async def __rpc_use_bag_item(
        self, stream: "grpclib.server.Stream[ReqUseBagItem, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.use_bag_item(request)
        await stream.send_message(response)

    async def __rpc_open_manual_item(
        self, stream: "grpclib.server.Stream[ReqOpenManualItem, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.open_manual_item(request)
        await stream.send_message(response)

    async def __rpc_open_random_reward_item(
        self,
        stream: "grpclib.server.Stream[ReqOpenRandomRewardItem, ResOpenRandomRewardItem]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.open_random_reward_item(request)
        await stream.send_message(response)

    async def __rpc_open_all_reward_item(
        self,
        stream: "grpclib.server.Stream[ReqOpenAllRewardItem, ResOpenAllRewardItem]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.open_all_reward_item(request)
        await stream.send_message(response)

    async def __rpc_compose_shard(
        self, stream: "grpclib.server.Stream[ReqComposeShard, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.compose_shard(request)
        await stream.send_message(response)

    async def __rpc_fetch_announcement(
        self, stream: "grpclib.server.Stream[ReqFetchAnnouncement, ResAnnouncement]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_announcement(request)
        await stream.send_message(response)

    async def __rpc_read_announcement(
        self, stream: "grpclib.server.Stream[ReqReadAnnouncement, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.read_announcement(request)
        await stream.send_message(response)

    async def __rpc_fetch_mail_info(
        self, stream: "grpclib.server.Stream[ReqCommon, ResMailInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_mail_info(request)
        await stream.send_message(response)

    async def __rpc_read_mail(
        self, stream: "grpclib.server.Stream[ReqReadMail, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.read_mail(request)
        await stream.send_message(response)

    async def __rpc_delete_mail(
        self, stream: "grpclib.server.Stream[ReqDeleteMail, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_mail(request)
        await stream.send_message(response)

    async def __rpc_take_attachment_from_mail(
        self, stream: "grpclib.server.Stream[ReqTakeAttachment, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.take_attachment_from_mail(request)
        await stream.send_message(response)

    async def __rpc_receive_achievement_reward(
        self,
        stream: "grpclib.server.Stream[ReqReceiveAchievementReward, ResReceiveAchievementReward]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.receive_achievement_reward(request)
        await stream.send_message(response)

    async def __rpc_receive_achievement_group_reward(
        self,
        stream: "grpclib.server.Stream[ReqReceiveAchievementGroupReward, ResReceiveAchievementGroupReward]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.receive_achievement_group_reward(request)
        await stream.send_message(response)

    async def __rpc_fetch_achievement_rate(
        self, stream: "grpclib.server.Stream[ReqCommon, ResFetchAchievementRate]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_achievement_rate(request)
        await stream.send_message(response)

    async def __rpc_fetch_achievement(
        self, stream: "grpclib.server.Stream[ReqCommon, ResAchievement]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_achievement(request)
        await stream.send_message(response)

    async def __rpc_buy_shi_lian(
        self, stream: "grpclib.server.Stream[ReqBuyShiLian, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.buy_shi_lian(request)
        await stream.send_message(response)

    async def __rpc_match_shi_lian(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.match_shi_lian(request)
        await stream.send_message(response)

    async def __rpc_go_next_shi_lian(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.go_next_shi_lian(request)
        await stream.send_message(response)

    async def __rpc_update_client_value(
        self, stream: "grpclib.server.Stream[ReqUpdateClientValue, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_client_value(request)
        await stream.send_message(response)

    async def __rpc_fetch_client_value(
        self, stream: "grpclib.server.Stream[ReqCommon, ResClientValue]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_client_value(request)
        await stream.send_message(response)

    async def __rpc_client_message(
        self, stream: "grpclib.server.Stream[ReqClientMessage, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.client_message(request)
        await stream.send_message(response)

    async def __rpc_fetch_current_match_info(
        self, stream: "grpclib.server.Stream[ReqCurrentMatchInfo, ResCurrentMatchInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_current_match_info(request)
        await stream.send_message(response)

    async def __rpc_user_complain(
        self, stream: "grpclib.server.Stream[ReqUserComplain, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.user_complain(request)
        await stream.send_message(response)

    async def __rpc_fetch_revive_coin_info(
        self, stream: "grpclib.server.Stream[ReqCommon, ResReviveCoinInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_revive_coin_info(request)
        await stream.send_message(response)

    async def __rpc_gain_revive_coin(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.gain_revive_coin(request)
        await stream.send_message(response)

    async def __rpc_fetch_daily_task(
        self, stream: "grpclib.server.Stream[ReqCommon, ResDailyTask]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_daily_task(request)
        await stream.send_message(response)

    async def __rpc_refresh_daily_task(
        self, stream: "grpclib.server.Stream[ReqRefreshDailyTask, ResRefreshDailyTask]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.refresh_daily_task(request)
        await stream.send_message(response)

    async def __rpc_use_gift_code(
        self, stream: "grpclib.server.Stream[ReqUseGiftCode, ResUseGiftCode]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.use_gift_code(request)
        await stream.send_message(response)

    async def __rpc_use_special_gift_code(
        self, stream: "grpclib.server.Stream[ReqUseGiftCode, ResUseSpecialGiftCode]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.use_special_gift_code(request)
        await stream.send_message(response)

    async def __rpc_fetch_title_list(
        self, stream: "grpclib.server.Stream[ReqCommon, ResTitleList]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_title_list(request)
        await stream.send_message(response)

    async def __rpc_use_title(
        self, stream: "grpclib.server.Stream[ReqUseTitle, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.use_title(request)
        await stream.send_message(response)

    async def __rpc_send_client_message(
        self, stream: "grpclib.server.Stream[ReqSendClientMessage, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.send_client_message(request)
        await stream.send_message(response)

    async def __rpc_fetch_game_live_info(
        self, stream: "grpclib.server.Stream[ReqGameLiveInfo, ResGameLiveInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_game_live_info(request)
        await stream.send_message(response)

    async def __rpc_fetch_game_live_left_segment(
        self,
        stream: "grpclib.server.Stream[ReqGameLiveLeftSegment, ResGameLiveLeftSegment]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_game_live_left_segment(request)
        await stream.send_message(response)

    async def __rpc_fetch_game_live_list(
        self, stream: "grpclib.server.Stream[ReqGameLiveList, ResGameLiveList]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_game_live_list(request)
        await stream.send_message(response)

    async def __rpc_fetch_comment_setting(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommentSetting]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_comment_setting(request)
        await stream.send_message(response)

    async def __rpc_update_comment_setting(
        self, stream: "grpclib.server.Stream[ReqUpdateCommentSetting, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_comment_setting(request)
        await stream.send_message(response)

    async def __rpc_fetch_comment_list(
        self, stream: "grpclib.server.Stream[ReqFetchCommentList, ResFetchCommentList]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_comment_list(request)
        await stream.send_message(response)

    async def __rpc_fetch_comment_content(
        self,
        stream: "grpclib.server.Stream[ReqFetchCommentContent, ResFetchCommentContent]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_comment_content(request)
        await stream.send_message(response)

    async def __rpc_leave_comment(
        self, stream: "grpclib.server.Stream[ReqLeaveComment, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.leave_comment(request)
        await stream.send_message(response)

    async def __rpc_delete_comment(
        self, stream: "grpclib.server.Stream[ReqDeleteComment, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_comment(request)
        await stream.send_message(response)

    async def __rpc_update_read_comment(
        self, stream: "grpclib.server.Stream[ReqUpdateReadComment, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_read_comment(request)
        await stream.send_message(response)

    async def __rpc_fetch_rolling_notice(
        self,
        stream: "grpclib.server.Stream[ReqFetchRollingNotice, ResFetchRollingNotice]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_rolling_notice(request)
        await stream.send_message(response)

    async def __rpc_fetch_maintain_notice(
        self, stream: "grpclib.server.Stream[ReqCommon, ResFetchMaintainNotice]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_maintain_notice(request)
        await stream.send_message(response)

    async def __rpc_fetch_server_time(
        self, stream: "grpclib.server.Stream[ReqCommon, ResServerTime]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_server_time(request)
        await stream.send_message(response)

    async def __rpc_fetch_platform_products(
        self,
        stream: "grpclib.server.Stream[ReqPlatformBillingProducts, ResPlatformBillingProducts]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_platform_products(request)
        await stream.send_message(response)

    async def __rpc_cancel_google_play_order(
        self, stream: "grpclib.server.Stream[ReqCancelGooglePlayOrder, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_google_play_order(request)
        await stream.send_message(response)

    async def __rpc_open_chest(
        self, stream: "grpclib.server.Stream[ReqOpenChest, ResOpenChest]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.open_chest(request)
        await stream.send_message(response)

    async def __rpc_buy_from_chest_shop(
        self, stream: "grpclib.server.Stream[ReqBuyFromChestShop, ResBuyFromChestShop]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.buy_from_chest_shop(request)
        await stream.send_message(response)

    async def __rpc_fetch_daily_sign_in_info(
        self, stream: "grpclib.server.Stream[ReqCommon, ResDailySignInInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_daily_sign_in_info(request)
        await stream.send_message(response)

    async def __rpc_do_daily_sign_in(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.do_daily_sign_in(request)
        await stream.send_message(response)

    async def __rpc_do_activity_sign_in(
        self, stream: "grpclib.server.Stream[ReqDoActivitySignIn, ResDoActivitySignIn]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.do_activity_sign_in(request)
        await stream.send_message(response)

    async def __rpc_fetch_character_info(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCharacterInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_character_info(request)
        await stream.send_message(response)

    async def __rpc_update_character_sort(
        self, stream: "grpclib.server.Stream[ReqUpdateCharacterSort, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_character_sort(request)
        await stream.send_message(response)

    async def __rpc_change_main_character(
        self, stream: "grpclib.server.Stream[ReqChangeMainCharacter, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.change_main_character(request)
        await stream.send_message(response)

    async def __rpc_change_character_skin(
        self, stream: "grpclib.server.Stream[ReqChangeCharacterSkin, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.change_character_skin(request)
        await stream.send_message(response)

    async def __rpc_change_character_view(
        self, stream: "grpclib.server.Stream[ReqChangeCharacterView, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.change_character_view(request)
        await stream.send_message(response)

    async def __rpc_set_hidden_character(
        self,
        stream: "grpclib.server.Stream[ReqSetHiddenCharacter, ResSetHiddenCharacter]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_hidden_character(request)
        await stream.send_message(response)

    async def __rpc_send_gift_to_character(
        self,
        stream: "grpclib.server.Stream[ReqSendGiftToCharacter, ResSendGiftToCharacter]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.send_gift_to_character(request)
        await stream.send_message(response)

    async def __rpc_sell_item(
        self, stream: "grpclib.server.Stream[ReqSellItem, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.sell_item(request)
        await stream.send_message(response)

    async def __rpc_fetch_common_view(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommonView]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_common_view(request)
        await stream.send_message(response)

    async def __rpc_change_common_view(
        self, stream: "grpclib.server.Stream[ReqChangeCommonView, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.change_common_view(request)
        await stream.send_message(response)

    async def __rpc_save_common_views(
        self, stream: "grpclib.server.Stream[ReqSaveCommonViews, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.save_common_views(request)
        await stream.send_message(response)

    async def __rpc_fetch_common_views(
        self, stream: "grpclib.server.Stream[ReqCommonViews, ResCommonViews]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_common_views(request)
        await stream.send_message(response)

    async def __rpc_fetch_all_common_views(
        self, stream: "grpclib.server.Stream[ReqCommon, ResAllcommonViews]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_all_common_views(request)
        await stream.send_message(response)

    async def __rpc_use_common_view(
        self, stream: "grpclib.server.Stream[ReqUseCommonView, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.use_common_view(request)
        await stream.send_message(response)

    async def __rpc_upgrade_character(
        self, stream: "grpclib.server.Stream[ReqUpgradeCharacter, ResUpgradeCharacter]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.upgrade_character(request)
        await stream.send_message(response)

    async def __rpc_add_finished_ending(
        self, stream: "grpclib.server.Stream[ReqFinishedEnding, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_finished_ending(request)
        await stream.send_message(response)

    async def __rpc_receive_ending_reward(
        self, stream: "grpclib.server.Stream[ReqFinishedEnding, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.receive_ending_reward(request)
        await stream.send_message(response)

    async def __rpc_game_master_command(
        self, stream: "grpclib.server.Stream[ReqGmCommand, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.game_master_command(request)
        await stream.send_message(response)

    async def __rpc_fetch_shop_info(
        self, stream: "grpclib.server.Stream[ReqCommon, ResShopInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_shop_info(request)
        await stream.send_message(response)

    async def __rpc_buy_from_shop(
        self, stream: "grpclib.server.Stream[ReqBuyFromShop, ResBuyFromShop]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.buy_from_shop(request)
        await stream.send_message(response)

    async def __rpc_buy_from_zhp(
        self, stream: "grpclib.server.Stream[ReqBuyFromZhp, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.buy_from_zhp(request)
        await stream.send_message(response)

    async def __rpc_refresh_zhp_shop(
        self, stream: "grpclib.server.Stream[ReqReshZhpShop, ResRefreshZhpShop]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.refresh_zhp_shop(request)
        await stream.send_message(response)

    async def __rpc_fetch_month_ticket_info(
        self, stream: "grpclib.server.Stream[ReqCommon, ResMonthTicketInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_month_ticket_info(request)
        await stream.send_message(response)

    async def __rpc_pay_month_ticket(
        self, stream: "grpclib.server.Stream[ReqCommon, ResPayMonthTicket]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.pay_month_ticket(request)
        await stream.send_message(response)

    async def __rpc_exchange_currency(
        self, stream: "grpclib.server.Stream[ReqExchangeCurrency, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.exchange_currency(request)
        await stream.send_message(response)

    async def __rpc_exchange_chest_stone(
        self, stream: "grpclib.server.Stream[ReqExchangeCurrency, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.exchange_chest_stone(request)
        await stream.send_message(response)

    async def __rpc_exchange_diamond(
        self, stream: "grpclib.server.Stream[ReqExchangeCurrency, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.exchange_diamond(request)
        await stream.send_message(response)

    async def __rpc_fetch_server_settings(
        self, stream: "grpclib.server.Stream[ReqCommon, ResServerSettings]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_server_settings(request)
        await stream.send_message(response)

    async def __rpc_fetch_account_settings(
        self, stream: "grpclib.server.Stream[ReqCommon, ResAccountSettings]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_account_settings(request)
        await stream.send_message(response)

    async def __rpc_update_account_settings(
        self, stream: "grpclib.server.Stream[ReqUpdateAccountSettings, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_account_settings(request)
        await stream.send_message(response)

    async def __rpc_fetch_mod_nickname_time(
        self, stream: "grpclib.server.Stream[ReqCommon, ResModNicknameTime]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_mod_nickname_time(request)
        await stream.send_message(response)

    async def __rpc_create_wechat_native_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateWechatNativeOrder, ResCreateWechatNativeOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_wechat_native_order(request)
        await stream.send_message(response)

    async def __rpc_create_wechat_app_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateWechatAppOrder, ResCreateWechatAppOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_wechat_app_order(request)
        await stream.send_message(response)

    async def __rpc_create_alipay_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateAlipayOrder, ResCreateAlipayOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_alipay_order(request)
        await stream.send_message(response)

    async def __rpc_create_alipay_scan_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateAlipayScanOrder, ResCreateAlipayScanOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_alipay_scan_order(request)
        await stream.send_message(response)

    async def __rpc_create_alipay_app_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateAlipayAppOrder, ResCreateAlipayAppOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_alipay_app_order(request)
        await stream.send_message(response)

    async def __rpc_create_jp_credit_card_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateJpCreditCardOrder, ResCreateJpCreditCardOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_jp_credit_card_order(request)
        await stream.send_message(response)

    async def __rpc_create_jp_paypal_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateJpPaypalOrder, ResCreateJpPaypalOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_jp_paypal_order(request)
        await stream.send_message(response)

    async def __rpc_create_jp_au_order(
        self, stream: "grpclib.server.Stream[ReqCreateJpAuOrder, ResCreateJpAuOrder]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_jp_au_order(request)
        await stream.send_message(response)

    async def __rpc_create_jp_docomo_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateJpDocomoOrder, ResCreateJpDocomoOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_jp_docomo_order(request)
        await stream.send_message(response)

    async def __rpc_create_jp_web_money_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateJpWebMoneyOrder, ResCreateJpWebMoneyOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_jp_web_money_order(request)
        await stream.send_message(response)

    async def __rpc_create_jp_softbank_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateJpSoftbankOrder, ResCreateJpSoftbankOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_jp_softbank_order(request)
        await stream.send_message(response)

    async def __rpc_create_jp_pay_pay_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateJpPayPayOrder, ResCreateJpPayPayOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_jp_pay_pay_order(request)
        await stream.send_message(response)

    async def __rpc_fetch_jp_common_credit_card_order(
        self,
        stream: "grpclib.server.Stream[ReqFetchJpCommonCreditCardOrder, ResFetchJpCommonCreditCardOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_jp_common_credit_card_order(request)
        await stream.send_message(response)

    async def __rpc_create_jpgmo_order(
        self, stream: "grpclib.server.Stream[ReqCreateJpgmoOrder, ResCreateJpgmoOrder]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_jpgmo_order(request)
        await stream.send_message(response)

    async def __rpc_create_en_paypal_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateEnPaypalOrder, ResCreateEnPaypalOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_en_paypal_order(request)
        await stream.send_message(response)

    async def __rpc_create_en_master_card_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateEnMasterCardOrder, ResCreateEnMasterCardOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_en_master_card_order(request)
        await stream.send_message(response)

    async def __rpc_create_en_visa_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateEnVisaOrder, ResCreateEnVisaOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_en_visa_order(request)
        await stream.send_message(response)

    async def __rpc_create_enjcb_order(
        self, stream: "grpclib.server.Stream[ReqCreateEnjcbOrder, ResCreateEnjcbOrder]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_enjcb_order(request)
        await stream.send_message(response)

    async def __rpc_create_en_alipay_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateEnAlipayOrder, ResCreateEnAlipayOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_en_alipay_order(request)
        await stream.send_message(response)

    async def __rpc_create_kr_paypal_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateKrPaypalOrder, ResCreateKrPaypalOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_kr_paypal_order(request)
        await stream.send_message(response)

    async def __rpc_create_kr_master_card_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateKrMasterCardOrder, ResCreateKrMasterCardOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_kr_master_card_order(request)
        await stream.send_message(response)

    async def __rpc_create_kr_visa_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateKrVisaOrder, ResCreateKrVisaOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_kr_visa_order(request)
        await stream.send_message(response)

    async def __rpc_create_krjcb_order(
        self, stream: "grpclib.server.Stream[ReqCreateKrjcbOrder, ResCreateKrjcbOrder]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_krjcb_order(request)
        await stream.send_message(response)

    async def __rpc_create_kr_alipay_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateKrAlipayOrder, ResCreateKrAlipayOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_kr_alipay_order(request)
        await stream.send_message(response)

    async def __rpc_create_dmm_order(
        self, stream: "grpclib.server.Stream[ReqCreateDmmOrder, ResCreateDmmOrder]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_dmm_order(request)
        await stream.send_message(response)

    async def __rpc_create_iap_order(
        self, stream: "grpclib.server.Stream[ReqCreateIapOrder, ResCreateIapOrder]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_iap_order(request)
        await stream.send_message(response)

    async def __rpc_create_steam_order(
        self, stream: "grpclib.server.Stream[ReqCreateSteamOrder, ResCreateSteamOrder]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_steam_order(request)
        await stream.send_message(response)

    async def __rpc_verify_steam_order(
        self, stream: "grpclib.server.Stream[ReqVerifySteamOrder, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.verify_steam_order(request)
        await stream.send_message(response)

    async def __rpc_create_my_card_android_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateMyCardOrder, ResCreateMyCardOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_my_card_android_order(request)
        await stream.send_message(response)

    async def __rpc_create_my_card_web_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateMyCardOrder, ResCreateMyCardOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_my_card_web_order(request)
        await stream.send_message(response)

    async def __rpc_create_paypal_order(
        self,
        stream: "grpclib.server.Stream[ReqCreatePaypalOrder, ResCreatePaypalOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_paypal_order(request)
        await stream.send_message(response)

    async def __rpc_create_xsolla_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateXsollaOrder, ResCreateXsollaOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_xsolla_order(request)
        await stream.send_message(response)

    async def __rpc_verify_my_card_order(
        self, stream: "grpclib.server.Stream[ReqVerifyMyCardOrder, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.verify_my_card_order(request)
        await stream.send_message(response)

    async def __rpc_verification_iap_order(
        self,
        stream: "grpclib.server.Stream[ReqVerificationIapOrder, ResVerificationIapOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.verification_iap_order(request)
        await stream.send_message(response)

    async def __rpc_create_yostar_sdk_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateYostarOrder, ResCreateYostarOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_yostar_sdk_order(request)
        await stream.send_message(response)

    async def __rpc_create_billing_order(
        self,
        stream: "grpclib.server.Stream[ReqCreateBillingOrder, ResCreateBillingOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_billing_order(request)
        await stream.send_message(response)

    async def __rpc_solve_google_play_order(
        self, stream: "grpclib.server.Stream[ReqSolveGooglePlayOrder, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.solve_google_play_order(request)
        await stream.send_message(response)

    async def __rpc_solve_google_pay_order_v3(
        self, stream: "grpclib.server.Stream[ReqSolveGooglePlayOrderV3, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.solve_google_pay_order_v3(request)
        await stream.send_message(response)

    async def __rpc_deliver_aa32_order(
        self, stream: "grpclib.server.Stream[ReqDeliverAa32Order, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.deliver_aa32_order(request)
        await stream.send_message(response)

    async def __rpc_fetch_misc(
        self, stream: "grpclib.server.Stream[ReqCommon, ResMisc]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_misc(request)
        await stream.send_message(response)

    async def __rpc_modify_signature(
        self, stream: "grpclib.server.Stream[ReqModifySignature, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.modify_signature(request)
        await stream.send_message(response)

    async def __rpc_fetch_id_card_info(
        self, stream: "grpclib.server.Stream[ReqCommon, ResIdCardInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_id_card_info(request)
        await stream.send_message(response)

    async def __rpc_update_id_card_info(
        self, stream: "grpclib.server.Stream[ReqUpdateIdCardInfo, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_id_card_info(request)
        await stream.send_message(response)

    async def __rpc_fetch_vip_reward(
        self, stream: "grpclib.server.Stream[ReqCommon, ResVipReward]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_vip_reward(request)
        await stream.send_message(response)

    async def __rpc_gain_vip_reward(
        self, stream: "grpclib.server.Stream[ReqGainVipReward, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.gain_vip_reward(request)
        await stream.send_message(response)

    async def __rpc_fetch_refund_order(
        self, stream: "grpclib.server.Stream[ReqCommon, ResFetchRefundOrder]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_refund_order(request)
        await stream.send_message(response)

    async def __rpc_fetch_customized_contest_list(
        self,
        stream: "grpclib.server.Stream[ReqFetchCustomizedContestList, ResFetchCustomizedContestList]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_customized_contest_list(request)
        await stream.send_message(response)

    async def __rpc_fetch_customized_contest_auth_info(
        self,
        stream: "grpclib.server.Stream[ReqFetchCustomizedContestAuthInfo, ResFetchCustomizedContestAuthInfo]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_customized_contest_auth_info(request)
        await stream.send_message(response)

    async def __rpc_enter_customized_contest(
        self,
        stream: "grpclib.server.Stream[ReqEnterCustomizedContest, ResEnterCustomizedContest]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.enter_customized_contest(request)
        await stream.send_message(response)

    async def __rpc_leave_customized_contest(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.leave_customized_contest(request)
        await stream.send_message(response)

    async def __rpc_fetch_customized_contest_online_info(
        self,
        stream: "grpclib.server.Stream[ReqFetchCustomizedContestOnlineInfo, ResFetchCustomizedContestOnlineInfo]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_customized_contest_online_info(request)
        await stream.send_message(response)

    async def __rpc_fetch_customized_contest_by_contest_id(
        self,
        stream: "grpclib.server.Stream[ReqFetchCustomizedContestByContestId, ResFetchCustomizedContestByContestId]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_customized_contest_by_contest_id(request)
        await stream.send_message(response)

    async def __rpc_signup_customized_contest(
        self,
        stream: "grpclib.server.Stream[ReqSignupCustomizedContest, ResSignupCustomizedContest]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.signup_customized_contest(request)
        await stream.send_message(response)

    async def __rpc_start_customized_contest(
        self, stream: "grpclib.server.Stream[ReqStartCustomizedContest, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.start_customized_contest(request)
        await stream.send_message(response)

    async def __rpc_stop_customized_contest(
        self, stream: "grpclib.server.Stream[ReqStopCustomizedContest, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop_customized_contest(request)
        await stream.send_message(response)

    async def __rpc_join_customized_contest_chat_room(
        self,
        stream: "grpclib.server.Stream[ReqJoinCustomizedContestChatRoom, ResJoinCustomizedContestChatRoom]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.join_customized_contest_chat_room(request)
        await stream.send_message(response)

    async def __rpc_leave_customized_contest_chat_room(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.leave_customized_contest_chat_room(request)
        await stream.send_message(response)

    async def __rpc_say_chat_message(
        self, stream: "grpclib.server.Stream[ReqSayChatMessage, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.say_chat_message(request)
        await stream.send_message(response)

    async def __rpc_fetch_customized_contest_game_records(
        self,
        stream: "grpclib.server.Stream[ReqFetchCustomizedContestGameRecords, ResFetchCustomizedContestGameRecords]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_customized_contest_game_records(request)
        await stream.send_message(response)

    async def __rpc_fetch_customized_contest_game_live_list(
        self,
        stream: "grpclib.server.Stream[ReqFetchCustomizedContestGameLiveList, ResFetchCustomizedContestGameLiveList]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_customized_contest_game_live_list(request)
        await stream.send_message(response)

    async def __rpc_follow_customized_contest(
        self, stream: "grpclib.server.Stream[ReqTargetCustomizedContest, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.follow_customized_contest(request)
        await stream.send_message(response)

    async def __rpc_unfollow_customized_contest(
        self, stream: "grpclib.server.Stream[ReqTargetCustomizedContest, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.unfollow_customized_contest(request)
        await stream.send_message(response)

    async def __rpc_fetch_activity_list(
        self, stream: "grpclib.server.Stream[ReqCommon, ResActivityList]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_activity_list(request)
        await stream.send_message(response)

    async def __rpc_fetch_account_activity_data(
        self, stream: "grpclib.server.Stream[ReqCommon, ResAccountActivityData]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_account_activity_data(request)
        await stream.send_message(response)

    async def __rpc_exchange_activity_item(
        self,
        stream: "grpclib.server.Stream[ReqExchangeActivityItem, ResExchangeActivityItem]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.exchange_activity_item(request)
        await stream.send_message(response)

    async def __rpc_complete_activity_task(
        self, stream: "grpclib.server.Stream[ReqCompleteActivityTask, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.complete_activity_task(request)
        await stream.send_message(response)

    async def __rpc_complete_activity_task_batch(
        self, stream: "grpclib.server.Stream[ReqCompleteActivityTaskBatch, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.complete_activity_task_batch(request)
        await stream.send_message(response)

    async def __rpc_complete_activity_flip_task(
        self, stream: "grpclib.server.Stream[ReqCompleteActivityTask, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.complete_activity_flip_task(request)
        await stream.send_message(response)

    async def __rpc_complete_period_activity_task(
        self, stream: "grpclib.server.Stream[ReqCompleteActivityTask, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.complete_period_activity_task(request)
        await stream.send_message(response)

    async def __rpc_complete_period_activity_task_batch(
        self,
        stream: "grpclib.server.Stream[ReqCompletePeriodActivityTaskBatch, ResCommon]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.complete_period_activity_task_batch(request)
        await stream.send_message(response)

    async def __rpc_complete_random_activity_task(
        self, stream: "grpclib.server.Stream[ReqCompleteActivityTask, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.complete_random_activity_task(request)
        await stream.send_message(response)

    async def __rpc_receive_activity_flip_task(
        self,
        stream: "grpclib.server.Stream[ReqReceiveActivityFlipTask, ResReceiveActivityFlipTask]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.receive_activity_flip_task(request)
        await stream.send_message(response)

    async def __rpc_complete_segment_task_reward(
        self,
        stream: "grpclib.server.Stream[ReqCompleteSegmentTaskReward, ResCompleteSegmentTaskReward]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.complete_segment_task_reward(request)
        await stream.send_message(response)

    async def __rpc_fetch_activity_flip_info(
        self,
        stream: "grpclib.server.Stream[ReqFetchActivityFlipInfo, ResFetchActivityFlipInfo]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_activity_flip_info(request)
        await stream.send_message(response)

    async def __rpc_gain_accumulated_point_activity_reward(
        self,
        stream: "grpclib.server.Stream[ReqGainAccumulatedPointActivityReward, ResCommon]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.gain_accumulated_point_activity_reward(request)
        await stream.send_message(response)

    async def __rpc_gain_multi_point_activity_reward(
        self,
        stream: "grpclib.server.Stream[ReqGainMultiPointActivityReward, ResCommon]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.gain_multi_point_activity_reward(request)
        await stream.send_message(response)

    async def __rpc_fetch_rank_point_leaderboard(
        self,
        stream: "grpclib.server.Stream[ReqFetchRankPointLeaderboard, ResFetchRankPointLeaderboard]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_rank_point_leaderboard(request)
        await stream.send_message(response)

    async def __rpc_gain_rank_point_reward(
        self, stream: "grpclib.server.Stream[ReqGainRankPointReward, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.gain_rank_point_reward(request)
        await stream.send_message(response)

    async def __rpc_richman_activity_next_move(
        self, stream: "grpclib.server.Stream[ReqRichmanNextMove, ResRichmanNextMove]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.richman_activity_next_move(request)
        await stream.send_message(response)

    async def __rpc_richman_acitivity_special_move(
        self, stream: "grpclib.server.Stream[ReqRichmanSpecialMove, ResRichmanNextMove]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.richman_acitivity_special_move(request)
        await stream.send_message(response)

    async def __rpc_richman_activity_chest_info(
        self, stream: "grpclib.server.Stream[ReqRichmanChestInfo, ResRichmanChestInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.richman_activity_chest_info(request)
        await stream.send_message(response)

    async def __rpc_create_game_observe_auth(
        self,
        stream: "grpclib.server.Stream[ReqCreateGameObserveAuth, ResCreateGameObserveAuth]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_game_observe_auth(request)
        await stream.send_message(response)

    async def __rpc_refresh_game_observe_auth(
        self,
        stream: "grpclib.server.Stream[ReqRefreshGameObserveAuth, ResRefreshGameObserveAuth]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.refresh_game_observe_auth(request)
        await stream.send_message(response)

    async def __rpc_fetch_activity_buff(
        self, stream: "grpclib.server.Stream[ReqCommon, ResActivityBuff]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_activity_buff(request)
        await stream.send_message(response)

    async def __rpc_upgrade_activity_buff(
        self, stream: "grpclib.server.Stream[ReqUpgradeActivityBuff, ResActivityBuff]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.upgrade_activity_buff(request)
        await stream.send_message(response)

    async def __rpc_upgrade_activity_level(
        self,
        stream: "grpclib.server.Stream[ReqUpgradeActivityLevel, ResUpgradeActivityLevel]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.upgrade_activity_level(request)
        await stream.send_message(response)

    async def __rpc_receive_upgrade_activity_reward(
        self,
        stream: "grpclib.server.Stream[ReqReceiveUpgradeActivityReward, ResReceiveUpgradeActivityReward]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.receive_upgrade_activity_reward(request)
        await stream.send_message(response)

    async def __rpc_upgrade_challenge(
        self, stream: "grpclib.server.Stream[ReqCommon, ResUpgradeChallenge]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.upgrade_challenge(request)
        await stream.send_message(response)

    async def __rpc_refresh_challenge(
        self, stream: "grpclib.server.Stream[ReqCommon, ResRefreshChallenge]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.refresh_challenge(request)
        await stream.send_message(response)

    async def __rpc_fetch_challenge_info(
        self, stream: "grpclib.server.Stream[ReqCommon, ResFetchChallengeInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_challenge_info(request)
        await stream.send_message(response)

    async def __rpc_force_complete_challenge_task(
        self, stream: "grpclib.server.Stream[ReqForceCompleteChallengeTask, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.force_complete_challenge_task(request)
        await stream.send_message(response)

    async def __rpc_fetch_challenge_season(
        self, stream: "grpclib.server.Stream[ReqCommon, ResChallengeSeasonInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_challenge_season(request)
        await stream.send_message(response)

    async def __rpc_receive_challenge_rank_reward(
        self,
        stream: "grpclib.server.Stream[ReqReceiveChallengeRankReward, ResReceiveChallengeRankReward]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.receive_challenge_rank_reward(request)
        await stream.send_message(response)

    async def __rpc_fetch_ab_match_info(
        self, stream: "grpclib.server.Stream[ReqCommon, ResFetchAbMatch]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_ab_match_info(request)
        await stream.send_message(response)

    async def __rpc_buy_in_ab_match(
        self, stream: "grpclib.server.Stream[ReqBuyInAbMatch, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.buy_in_ab_match(request)
        await stream.send_message(response)

    async def __rpc_receive_ab_match_reward(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.receive_ab_match_reward(request)
        await stream.send_message(response)

    async def __rpc_quit_ab_match(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.quit_ab_match(request)
        await stream.send_message(response)

    async def __rpc_start_unified_match(
        self, stream: "grpclib.server.Stream[ReqStartUnifiedMatch, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.start_unified_match(request)
        await stream.send_message(response)

    async def __rpc_cancel_unified_match(
        self, stream: "grpclib.server.Stream[ReqCancelUnifiedMatch, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_unified_match(request)
        await stream.send_message(response)

    async def __rpc_fetch_game_point_rank(
        self, stream: "grpclib.server.Stream[ReqGamePointRank, ResGamePointRank]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_game_point_rank(request)
        await stream.send_message(response)

    async def __rpc_fetch_self_game_point_rank(
        self,
        stream: "grpclib.server.Stream[ReqGamePointRank, ResFetchSelfGamePointRank]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_self_game_point_rank(request)
        await stream.send_message(response)

    async def __rpc_read_sns(
        self, stream: "grpclib.server.Stream[ReqReadSns, ResReadSns]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.read_sns(request)
        await stream.send_message(response)

    async def __rpc_reply_sns(
        self, stream: "grpclib.server.Stream[ReqReplySns, ResReplySns]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.reply_sns(request)
        await stream.send_message(response)

    async def __rpc_like_sns(
        self, stream: "grpclib.server.Stream[ReqLikeSns, ResLikeSns]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.like_sns(request)
        await stream.send_message(response)

    async def __rpc_dig_mine(
        self, stream: "grpclib.server.Stream[ReqDigMine, ResDigMine]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.dig_mine(request)
        await stream.send_message(response)

    async def __rpc_fetch_last_privacy(
        self, stream: "grpclib.server.Stream[ReqFetchLastPrivacy, ResFetchLastPrivacy]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_last_privacy(request)
        await stream.send_message(response)

    async def __rpc_check_privacy(
        self, stream: "grpclib.server.Stream[ReqCheckPrivacy, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.check_privacy(request)
        await stream.send_message(response)

    async def __rpc_response_captcha(
        self, stream: "grpclib.server.Stream[ReqResponseCaptcha, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.response_captcha(request)
        await stream.send_message(response)

    async def __rpc_fetch_rpg_battle_history(
        self,
        stream: "grpclib.server.Stream[ReqFetchRpgBattleHistory, ResFetchRpgBattleHistory]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_rpg_battle_history(request)
        await stream.send_message(response)

    async def __rpc_fetch_rpg_battle_history_v2(
        self,
        stream: "grpclib.server.Stream[ReqFetchRpgBattleHistory, ResFetchRpgBattleHistoryV2]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_rpg_battle_history_v2(request)
        await stream.send_message(response)

    async def __rpc_receive_rpg_rewards(
        self,
        stream: "grpclib.server.Stream[ReqReceiveRpgRewards, ResReceiveRpgRewards]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.receive_rpg_rewards(request)
        await stream.send_message(response)

    async def __rpc_receive_rpg_reward(
        self, stream: "grpclib.server.Stream[ReqReceiveRpgReward, ResReceiveRpgRewards]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.receive_rpg_reward(request)
        await stream.send_message(response)

    async def __rpc_buy_arena_ticket(
        self, stream: "grpclib.server.Stream[ReqBuyArenaTicket, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.buy_arena_ticket(request)
        await stream.send_message(response)

    async def __rpc_enter_arena(
        self, stream: "grpclib.server.Stream[ReqEnterArena, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.enter_arena(request)
        await stream.send_message(response)

    async def __rpc_receive_arena_reward(
        self, stream: "grpclib.server.Stream[ReqArenaReward, ResArenaReward]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.receive_arena_reward(request)
        await stream.send_message(response)

    async def __rpc_fetch_ob_token(
        self, stream: "grpclib.server.Stream[ReqFetchObToken, ResFetchObToken]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_ob_token(request)
        await stream.send_message(response)

    async def __rpc_receive_character_rewards(
        self,
        stream: "grpclib.server.Stream[ReqReceiveCharacterRewards, ResReceiveCharacterRewards]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.receive_character_rewards(request)
        await stream.send_message(response)

    async def __rpc_feed_activity_feed(
        self, stream: "grpclib.server.Stream[ReqFeedActivityFeed, ResFeedActivityFeed]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.feed_activity_feed(request)
        await stream.send_message(response)

    async def __rpc_send_activity_gift_to_friend(
        self,
        stream: "grpclib.server.Stream[ReqSendActivityGiftToFriend, ResSendActivityGiftToFriend]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.send_activity_gift_to_friend(request)
        await stream.send_message(response)

    async def __rpc_receive_activity_gift(
        self, stream: "grpclib.server.Stream[ReqReceiveActivityGift, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.receive_activity_gift(request)
        await stream.send_message(response)

    async def __rpc_receive_all_activity_gift(
        self,
        stream: "grpclib.server.Stream[ReqReceiveAllActivityGift, ResReceiveAllActivityGift]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.receive_all_activity_gift(request)
        await stream.send_message(response)

    async def __rpc_fetch_friend_gift_activity_data(
        self,
        stream: "grpclib.server.Stream[ReqFetchFriendGiftActivityData, ResFetchFriendGiftActivityData]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_friend_gift_activity_data(request)
        await stream.send_message(response)

    async def __rpc_open_pre_chest_item(
        self, stream: "grpclib.server.Stream[ReqOpenPreChestItem, ResOpenPreChestItem]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.open_pre_chest_item(request)
        await stream.send_message(response)

    async def __rpc_fetch_vote_activity(
        self,
        stream: "grpclib.server.Stream[ReqFetchVoteActivity, ResFetchVoteActivity]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_vote_activity(request)
        await stream.send_message(response)

    async def __rpc_vote_activity(
        self, stream: "grpclib.server.Stream[ReqVoteActivity, ResVoteActivity]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.vote_activity(request)
        await stream.send_message(response)

    async def __rpc_unlock_activity_spot(
        self, stream: "grpclib.server.Stream[ReqUnlockActivitySpot, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.unlock_activity_spot(request)
        await stream.send_message(response)

    async def __rpc_unlock_activity_spot_ending(
        self, stream: "grpclib.server.Stream[ReqUnlockActivitySpotEnding, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.unlock_activity_spot_ending(request)
        await stream.send_message(response)

    async def __rpc_receive_activity_spot_reward(
        self,
        stream: "grpclib.server.Stream[ReqReceiveActivitySpotReward, ResReceiveActivitySpotReward]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.receive_activity_spot_reward(request)
        await stream.send_message(response)

    async def __rpc_delete_account(
        self, stream: "grpclib.server.Stream[ReqCommon, ResDeleteAccount]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_account(request)
        await stream.send_message(response)

    async def __rpc_cancel_delete_account(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_delete_account(request)
        await stream.send_message(response)

    async def __rpc_log_report(
        self, stream: "grpclib.server.Stream[ReqLogReport, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.log_report(request)
        await stream.send_message(response)

    async def __rpc_bind_oauth2(
        self, stream: "grpclib.server.Stream[ReqBindOauth2, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.bind_oauth2(request)
        await stream.send_message(response)

    async def __rpc_fetch_oauth2_info(
        self, stream: "grpclib.server.Stream[ReqFetchOauth2, ResFetchOauth2]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_oauth2_info(request)
        await stream.send_message(response)

    async def __rpc_set_loading_image(
        self, stream: "grpclib.server.Stream[ReqSetLoadingImage, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_loading_image(request)
        await stream.send_message(response)

    async def __rpc_fetch_shop_interval(
        self, stream: "grpclib.server.Stream[ReqCommon, ResFetchShopInterval]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_shop_interval(request)
        await stream.send_message(response)

    async def __rpc_fetch_activity_interval(
        self, stream: "grpclib.server.Stream[ReqCommon, ResFetchActivityInterval]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_activity_interval(request)
        await stream.send_message(response)

    async def __rpc_fetch_recent_friend(
        self, stream: "grpclib.server.Stream[ReqCommon, ResFetchrecentFriend]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_recent_friend(request)
        await stream.send_message(response)

    async def __rpc_open_gacha(
        self, stream: "grpclib.server.Stream[ReqOpenGacha, ResOpenGacha]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.open_gacha(request)
        await stream.send_message(response)

    async def __rpc_task_request(
        self, stream: "grpclib.server.Stream[ReqTaskRequest, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.task_request(request)
        await stream.send_message(response)

    async def __rpc_simulation_activity_train(
        self,
        stream: "grpclib.server.Stream[ReqSimulationActivityTrain, ResSimulationActivityTrain]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.simulation_activity_train(request)
        await stream.send_message(response)

    async def __rpc_fetch_simulation_game_record(
        self,
        stream: "grpclib.server.Stream[ReqFetchSimulationGameRecord, ResFetchSimulationGameRecord]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_simulation_game_record(request)
        await stream.send_message(response)

    async def __rpc_start_simulation_activity_game(
        self,
        stream: "grpclib.server.Stream[ReqStartSimulationActivityGame, ResStartSimulationActivityGame]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.start_simulation_activity_game(request)
        await stream.send_message(response)

    async def __rpc_fetch_simulation_game_rank(
        self,
        stream: "grpclib.server.Stream[ReqFetchSimulationGameRank, ResFetchSimulationGameRank]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_simulation_game_rank(request)
        await stream.send_message(response)

    async def __rpc_generate_combining_craft(
        self,
        stream: "grpclib.server.Stream[ReqGenerateCombiningCraft, ResGenerateCombiningCraft]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.generate_combining_craft(request)
        await stream.send_message(response)

    async def __rpc_move_combining_craft(
        self,
        stream: "grpclib.server.Stream[ReqMoveCombiningCraft, ResMoveCombiningCraft]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.move_combining_craft(request)
        await stream.send_message(response)

    async def __rpc_combining_recycle_craft(
        self,
        stream: "grpclib.server.Stream[ReqCombiningRecycleCraft, ResCombiningRecycleCraft]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.combining_recycle_craft(request)
        await stream.send_message(response)

    async def __rpc_recover_combining_recycle(
        self,
        stream: "grpclib.server.Stream[ReqRecoverCombiningRecycle, ResRecoverCombiningRecycle]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.recover_combining_recycle(request)
        await stream.send_message(response)

    async def __rpc_finish_combining_order(
        self,
        stream: "grpclib.server.Stream[ReqFinishCombiningOrder, ResFinishCombiningOrder]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.finish_combining_order(request)
        await stream.send_message(response)

    async def __rpc_upgrade_village_building(
        self, stream: "grpclib.server.Stream[ReqUpgradeVillageBuilding, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.upgrade_village_building(request)
        await stream.send_message(response)

    async def __rpc_receive_village_building_reward(
        self,
        stream: "grpclib.server.Stream[ReqReceiveVillageBuildingReward, ResReceiveVillageBuildingReward]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.receive_village_building_reward(request)
        await stream.send_message(response)

    async def __rpc_start_village_trip(
        self, stream: "grpclib.server.Stream[ReqStartVillageTrip, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.start_village_trip(request)
        await stream.send_message(response)

    async def __rpc_receive_village_trip_reward(
        self,
        stream: "grpclib.server.Stream[ReqReceiveVillageTripReward, ResReceiveVillageTripReward]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.receive_village_trip_reward(request)
        await stream.send_message(response)

    async def __rpc_complete_village_task(
        self,
        stream: "grpclib.server.Stream[ReqCompleteVillageTask, ResCompleteVillageTask]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.complete_village_task(request)
        await stream.send_message(response)

    async def __rpc_get_friend_village_data(
        self,
        stream: "grpclib.server.Stream[ReqGetFriendVillageData, ResGetFriendVillageData]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_friend_village_data(request)
        await stream.send_message(response)

    async def __rpc_set_village_worker(
        self, stream: "grpclib.server.Stream[ReqSetVillageWorker, ResSetVillageWorker]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_village_worker(request)
        await stream.send_message(response)

    async def __rpc_next_round_village(
        self, stream: "grpclib.server.Stream[ReqNextRoundVillage, ResNextRoundVillage]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.next_round_village(request)
        await stream.send_message(response)

    async def __rpc_resolve_festival_activity_proposal(
        self,
        stream: "grpclib.server.Stream[ReqResolveFestivalActivityProposal, ResResolveFestivalActivityProposal]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.resolve_festival_activity_proposal(request)
        await stream.send_message(response)

    async def __rpc_resolve_festival_activity_event(
        self,
        stream: "grpclib.server.Stream[ReqResolveFestivalActivityEvent, ResResolveFestivalActivityEvent]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.resolve_festival_activity_event(request)
        await stream.send_message(response)

    async def __rpc_buy_festival_proposal(
        self,
        stream: "grpclib.server.Stream[ReqBuyFestivalProposal, ResBuyFestivalProposal]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.buy_festival_proposal(request)
        await stream.send_message(response)

    async def __rpc_island_activity_move(
        self, stream: "grpclib.server.Stream[ReqIslandActivityMove, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.island_activity_move(request)
        await stream.send_message(response)

    async def __rpc_island_activity_buy(
        self, stream: "grpclib.server.Stream[ReqIslandActivityBuy, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.island_activity_buy(request)
        await stream.send_message(response)

    async def __rpc_island_activity_sell(
        self, stream: "grpclib.server.Stream[ReqIslandActivitySell, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.island_activity_sell(request)
        await stream.send_message(response)

    async def __rpc_island_activity_tidy_bag(
        self, stream: "grpclib.server.Stream[ReqIslandActivityTidyBag, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.island_activity_tidy_bag(request)
        await stream.send_message(response)

    async def __rpc_island_activity_unlock_bag_grid(
        self, stream: "grpclib.server.Stream[ReqIslandActivityUnlockBagGrid, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.island_activity_unlock_bag_grid(request)
        await stream.send_message(response)

    async def __rpc_create_customized_contest(
        self,
        stream: "grpclib.server.Stream[ReqCreateCustomizedContest, ResCreateCustomizedContest]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_customized_contest(request)
        await stream.send_message(response)

    async def __rpc_fetch_manager_customized_contest_list(
        self,
        stream: "grpclib.server.Stream[ReqFetchmanagerCustomizedContestList, ResFetchManagerCustomizedContestList]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_manager_customized_contest_list(request)
        await stream.send_message(response)

    async def __rpc_fetch_manager_customized_contest(
        self,
        stream: "grpclib.server.Stream[ReqFetchManagerCustomizedContest, ResFetchManagerCustomizedContest]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_manager_customized_contest(request)
        await stream.send_message(response)

    async def __rpc_update_manager_customized_contest(
        self,
        stream: "grpclib.server.Stream[ReqUpdateManagerCustomizedContest, ResCommon]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_manager_customized_contest(request)
        await stream.send_message(response)

    async def __rpc_fetch_contest_player_rank(
        self,
        stream: "grpclib.server.Stream[ReqFetchContestPlayerRank, ResFetchContestPlayerRank]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_contest_player_rank(request)
        await stream.send_message(response)

    async def __rpc_fetch_ready_player_list(
        self,
        stream: "grpclib.server.Stream[ReqFetchReadyPlayerList, ResFetchReadyPlayerList]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_ready_player_list(request)
        await stream.send_message(response)

    async def __rpc_create_game_plan(
        self, stream: "grpclib.server.Stream[ReqCreateGamePlan, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_game_plan(request)
        await stream.send_message(response)

    async def __rpc_generate_contest_manager_login_code(
        self,
        stream: "grpclib.server.Stream[ReqCommon, ResGenerateContestManagerLoginCode]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.generate_contest_manager_login_code(request)
        await stream.send_message(response)

    async def __rpc_amulet_activity_start_game(
        self,
        stream: "grpclib.server.Stream[ReqAmuletActivityStartGame, ResAmuletActivityStartGame]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.amulet_activity_start_game(request)
        await stream.send_message(response)

    async def __rpc_amulet_activity_operate(
        self,
        stream: "grpclib.server.Stream[ReqAmuletActivityOperate, ResAmuletActivityOperate]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.amulet_activity_operate(request)
        await stream.send_message(response)

    async def __rpc_amulet_activity_change_hands(
        self,
        stream: "grpclib.server.Stream[ReqAmuletActivityChangeHands, ResAmuletActivityChangeHands]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.amulet_activity_change_hands(request)
        await stream.send_message(response)

    async def __rpc_amulet_activity_upgrade(
        self,
        stream: "grpclib.server.Stream[ReqAmuletActivityUpgrade, ResAmuletActivityUpgrade]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.amulet_activity_upgrade(request)
        await stream.send_message(response)

    async def __rpc_amulet_activity_buy(
        self,
        stream: "grpclib.server.Stream[ReqAmuletActivityBuy, ResAmuletActivityBuy]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.amulet_activity_buy(request)
        await stream.send_message(response)

    async def __rpc_amulet_activity_select_pack(
        self,
        stream: "grpclib.server.Stream[ReqAmuletActivitySelectPack, ResAmuletActivitySelectPack]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.amulet_activity_select_pack(request)
        await stream.send_message(response)

    async def __rpc_amulet_activity_sell_effect(
        self,
        stream: "grpclib.server.Stream[ReqAmuletActivitySellEffect, ResAmuletActivitySellEffect]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.amulet_activity_sell_effect(request)
        await stream.send_message(response)

    async def __rpc_amulet_activity_effect_sort(
        self, stream: "grpclib.server.Stream[ReqAmuletActivityEffectSort, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.amulet_activity_effect_sort(request)
        await stream.send_message(response)

    async def __rpc_amulet_activity_giveup(
        self, stream: "grpclib.server.Stream[ReqAmuletActivityGiveup, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.amulet_activity_giveup(request)
        await stream.send_message(response)

    async def __rpc_amulet_activity_refresh_shop(
        self,
        stream: "grpclib.server.Stream[ReqAmuletActivityRefreshShop, ResAmuletActivityRefreshShop]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.amulet_activity_refresh_shop(request)
        await stream.send_message(response)

    async def __rpc_amulet_activity_select_free_effect(
        self,
        stream: "grpclib.server.Stream[ReqAmuletActivitySelectFreeEffect, ResAmuletActivitySelectFreeEffect]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.amulet_activity_select_free_effect(request)
        await stream.send_message(response)

    async def __rpc_amulet_activity_upgrade_shop_buff(
        self,
        stream: "grpclib.server.Stream[ReqAmuletActivityUpgradeShopBuff, ResAmuletActivityUpgradeShopBuff]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.amulet_activity_upgrade_shop_buff(request)
        await stream.send_message(response)

    async def __rpc_amulet_activity_end_shopping(
        self,
        stream: "grpclib.server.Stream[ReqAmuletActivityEndShopping, ResAmuletActivityEndShopping]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.amulet_activity_end_shopping(request)
        await stream.send_message(response)

    async def __rpc_amulet_activity_set_skill_level(
        self, stream: "grpclib.server.Stream[ReqAmuletActivitySetSkillLevel, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.amulet_activity_set_skill_level(request)
        await stream.send_message(response)

    async def __rpc_amulet_activity_maintain_info(
        self, stream: "grpclib.server.Stream[ReqCommon, ResAmuletActivityMaintainInfo]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.amulet_activity_maintain_info(request)
        await stream.send_message(response)

    async def __rpc_story_activity_unlock(
        self, stream: "grpclib.server.Stream[ReqStoryActivityUnlock, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.story_activity_unlock(request)
        await stream.send_message(response)

    async def __rpc_story_activity_unlock_ending(
        self, stream: "grpclib.server.Stream[ReqStoryActivityUnlockEnding, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.story_activity_unlock_ending(request)
        await stream.send_message(response)

    async def __rpc_story_activity_receive_ending_reward(
        self,
        stream: "grpclib.server.Stream[ReqStoryActivityReceiveEndingReward, ResStoryReward]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.story_activity_receive_ending_reward(request)
        await stream.send_message(response)

    async def __rpc_story_activity_receive_finish_reward(
        self,
        stream: "grpclib.server.Stream[ReqStoryActivityReceiveFinishReward, ResStoryReward]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.story_activity_receive_finish_reward(request)
        await stream.send_message(response)

    async def __rpc_story_activity_receive_all_finish_reward(
        self,
        stream: "grpclib.server.Stream[ReqStoryActivityReceiveAllFinishReward, ResStoryReward]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.story_activity_receive_all_finish_reward(request)
        await stream.send_message(response)

    async def __rpc_story_activity_unlock_ending_and_receive(
        self,
        stream: "grpclib.server.Stream[ReqStoryActivityUnlockEndingAndReceive, ResStoryActivityUnlockEndingAndReceive]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.story_activity_unlock_ending_and_receive(request)
        await stream.send_message(response)

    async def __rpc_fetch_activity_rank(
        self,
        stream: "grpclib.server.Stream[ReqFetchActivityRank, ResFetchActivityRank]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_activity_rank(request)
        await stream.send_message(response)

    async def __rpc_set_verified_hidden(
        self, stream: "grpclib.server.Stream[ReqSetVerifiedHidden, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_verified_hidden(request)
        await stream.send_message(response)

    async def __rpc_fetch_questionnaire_list(
        self,
        stream: "grpclib.server.Stream[ReqFetchQuestionnaireList, ResFetchQuestionnaireList]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_questionnaire_list(request)
        await stream.send_message(response)

    async def __rpc_fetch_questionnaire_detail(
        self,
        stream: "grpclib.server.Stream[ReqFetchQuestionnaireDetail, ResFetchQuestionnaireDetail]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_questionnaire_detail(request)
        await stream.send_message(response)

    async def __rpc_submit_questionnaire(
        self, stream: "grpclib.server.Stream[ReqSubmitQuestionnaire, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.submit_questionnaire(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/lq.Lobby/fetchConnectionInfo": grpclib.const.Handler(
                self.__rpc_fetch_connection_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResConnectionInfo,
            ),
            "/lq.Lobby/fetchQueueInfo": grpclib.const.Handler(
                self.__rpc_fetch_queue_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResFetchQueueInfo,
            ),
            "/lq.Lobby/cancelQueue": grpclib.const.Handler(
                self.__rpc_cancel_queue,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.Lobby/openidCheck": grpclib.const.Handler(
                self.__rpc_openid_check,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqOpenidCheck,
                ResOauth2Check,
            ),
            "/lq.Lobby/signup": grpclib.const.Handler(
                self.__rpc_signup,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSignupAccount,
                ResSignupAccount,
            ),
            "/lq.Lobby/login": grpclib.const.Handler(
                self.__rpc_login,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqLogin,
                ResLogin,
            ),
            "/lq.Lobby/fetchInfo": grpclib.const.Handler(
                self.__rpc_fetch_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResFetchInfo,
            ),
            "/lq.Lobby/loginSuccess": grpclib.const.Handler(
                self.__rpc_login_success,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.Lobby/emailLogin": grpclib.const.Handler(
                self.__rpc_email_login,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqEmailLogin,
                ResLogin,
            ),
            "/lq.Lobby/oauth2Auth": grpclib.const.Handler(
                self.__rpc_oauth2_auth,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqOauth2Auth,
                ResOauth2Auth,
            ),
            "/lq.Lobby/oauth2Check": grpclib.const.Handler(
                self.__rpc_oauth2_check,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqOauth2Check,
                ResOauth2Check,
            ),
            "/lq.Lobby/oauth2Signup": grpclib.const.Handler(
                self.__rpc_oauth2_signup,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqOauth2Signup,
                ResOauth2Signup,
            ),
            "/lq.Lobby/oauth2Login": grpclib.const.Handler(
                self.__rpc_oauth2_login,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqOauth2Login,
                ResLogin,
            ),
            "/lq.Lobby/dmmPreLogin": grpclib.const.Handler(
                self.__rpc_dmm_pre_login,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqDmmPreLogin,
                ResDmmPreLogin,
            ),
            "/lq.Lobby/createPhoneVerifyCode": grpclib.const.Handler(
                self.__rpc_create_phone_verify_code,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreatePhoneVerifyCode,
                ResCommon,
            ),
            "/lq.Lobby/createEmailVerifyCode": grpclib.const.Handler(
                self.__rpc_create_email_verify_code,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateEmailVerifyCode,
                ResCommon,
            ),
            "/lq.Lobby/verfifyCodeForSecure": grpclib.const.Handler(
                self.__rpc_verfify_code_for_secure,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqVerifyCodeForSecure,
                ResVerfiyCodeForSecure,
            ),
            "/lq.Lobby/bindPhoneNumber": grpclib.const.Handler(
                self.__rpc_bind_phone_number,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqBindPhoneNumber,
                ResCommon,
            ),
            "/lq.Lobby/unbindPhoneNumber": grpclib.const.Handler(
                self.__rpc_unbind_phone_number,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUnbindPhoneNumber,
                ResCommon,
            ),
            "/lq.Lobby/fetchPhoneLoginBind": grpclib.const.Handler(
                self.__rpc_fetch_phone_login_bind,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResFetchPhoneLoginBind,
            ),
            "/lq.Lobby/createPhoneLoginBind": grpclib.const.Handler(
                self.__rpc_create_phone_login_bind,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreatePhoneLoginBind,
                ResCommon,
            ),
            "/lq.Lobby/bindEmail": grpclib.const.Handler(
                self.__rpc_bind_email,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqBindEmail,
                ResCommon,
            ),
            "/lq.Lobby/modifyPassword": grpclib.const.Handler(
                self.__rpc_modify_password,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqModifyPassword,
                ResCommon,
            ),
            "/lq.Lobby/bindAccount": grpclib.const.Handler(
                self.__rpc_bind_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqBindAccount,
                ResCommon,
            ),
            "/lq.Lobby/logout": grpclib.const.Handler(
                self.__rpc_logout,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqLogout,
                ResLogout,
            ),
            "/lq.Lobby/heatbeat": grpclib.const.Handler(
                self.__rpc_heatbeat,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqHeatBeat,
                ResCommon,
            ),
            "/lq.Lobby/loginBeat": grpclib.const.Handler(
                self.__rpc_login_beat,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqLoginBeat,
                ResCommon,
            ),
            "/lq.Lobby/createNickname": grpclib.const.Handler(
                self.__rpc_create_nickname,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateNickname,
                ResCommon,
            ),
            "/lq.Lobby/modifyNickname": grpclib.const.Handler(
                self.__rpc_modify_nickname,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqModifyNickname,
                ResCommon,
            ),
            "/lq.Lobby/modifyBirthday": grpclib.const.Handler(
                self.__rpc_modify_birthday,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqModifyBirthday,
                ResCommon,
            ),
            "/lq.Lobby/fetchRoom": grpclib.const.Handler(
                self.__rpc_fetch_room,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResSelfRoom,
            ),
            "/lq.Lobby/fetchGamingInfo": grpclib.const.Handler(
                self.__rpc_fetch_gaming_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResFetchGamingInfo,
            ),
            "/lq.Lobby/createRoom": grpclib.const.Handler(
                self.__rpc_create_room,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateRoom,
                ResCreateRoom,
            ),
            "/lq.Lobby/joinRoom": grpclib.const.Handler(
                self.__rpc_join_room,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqJoinRoom,
                ResJoinRoom,
            ),
            "/lq.Lobby/leaveRoom": grpclib.const.Handler(
                self.__rpc_leave_room,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.Lobby/readyPlay": grpclib.const.Handler(
                self.__rpc_ready_play,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqRoomReady,
                ResCommon,
            ),
            "/lq.Lobby/dressingStatus": grpclib.const.Handler(
                self.__rpc_dressing_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqRoomDressing,
                ResCommon,
            ),
            "/lq.Lobby/startRoom": grpclib.const.Handler(
                self.__rpc_start_room,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqRoomStart,
                ResCommon,
            ),
            "/lq.Lobby/kickPlayer": grpclib.const.Handler(
                self.__rpc_kick_player,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqRoomKick,
                ResCommon,
            ),
            "/lq.Lobby/modifyRoom": grpclib.const.Handler(
                self.__rpc_modify_room,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqModifyRoom,
                ResCommon,
            ),
            "/lq.Lobby/matchGame": grpclib.const.Handler(
                self.__rpc_match_game,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqJoinMatchQueue,
                ResCommon,
            ),
            "/lq.Lobby/cancelMatch": grpclib.const.Handler(
                self.__rpc_cancel_match,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCancelMatchQueue,
                ResCommon,
            ),
            "/lq.Lobby/fetchAccountInfo": grpclib.const.Handler(
                self.__rpc_fetch_account_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAccountInfo,
                ResAccountInfo,
            ),
            "/lq.Lobby/changeAvatar": grpclib.const.Handler(
                self.__rpc_change_avatar,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqChangeAvatar,
                ResCommon,
            ),
            "/lq.Lobby/receiveVersionReward": grpclib.const.Handler(
                self.__rpc_receive_version_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.Lobby/fetchAccountStatisticInfo": grpclib.const.Handler(
                self.__rpc_fetch_account_statistic_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAccountStatisticInfo,
                ResAccountStatisticInfo,
            ),
            "/lq.Lobby/fetchAccountChallengeRankInfo": grpclib.const.Handler(
                self.__rpc_fetch_account_challenge_rank_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAccountInfo,
                ResAccountChallengeRankInfo,
            ),
            "/lq.Lobby/fetchAccountCharacterInfo": grpclib.const.Handler(
                self.__rpc_fetch_account_character_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResAccountCharacterInfo,
            ),
            "/lq.Lobby/shopPurchase": grpclib.const.Handler(
                self.__rpc_shop_purchase,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqShopPurchase,
                ResShopPurchase,
            ),
            "/lq.Lobby/fetchGameRecord": grpclib.const.Handler(
                self.__rpc_fetch_game_record,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGameRecord,
                ResGameRecord,
            ),
            "/lq.Lobby/readGameRecord": grpclib.const.Handler(
                self.__rpc_read_game_record,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGameRecord,
                ResCommon,
            ),
            "/lq.Lobby/fetchGameRecordList": grpclib.const.Handler(
                self.__rpc_fetch_game_record_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGameRecordList,
                ResGameRecordList,
            ),
            "/lq.Lobby/fetchGameRecordListV2": grpclib.const.Handler(
                self.__rpc_fetch_game_record_list_v2,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGameRecordListV2,
                ResGameRecordListV2,
            ),
            "/lq.Lobby/fetchNextGameRecordList": grpclib.const.Handler(
                self.__rpc_fetch_next_game_record_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqNextGameRecordList,
                ResNextGameRecordList,
            ),
            "/lq.Lobby/fetchCollectedGameRecordList": grpclib.const.Handler(
                self.__rpc_fetch_collected_game_record_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCollectedGameRecordList,
            ),
            "/lq.Lobby/fetchGameRecordsDetail": grpclib.const.Handler(
                self.__rpc_fetch_game_records_detail,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGameRecordsDetail,
                ResGameRecordsDetail,
            ),
            "/lq.Lobby/fetchGameRecordsDetailV2": grpclib.const.Handler(
                self.__rpc_fetch_game_records_detail_v2,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGameRecordsDetailV2,
                ResGameRecordsDetailV2,
            ),
            "/lq.Lobby/addCollectedGameRecord": grpclib.const.Handler(
                self.__rpc_add_collected_game_record,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAddCollectedGameRecord,
                ResAddCollectedGameRecord,
            ),
            "/lq.Lobby/removeCollectedGameRecord": grpclib.const.Handler(
                self.__rpc_remove_collected_game_record,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqRemoveCollectedGameRecord,
                ResRemoveCollectedGameRecord,
            ),
            "/lq.Lobby/changeCollectedGameRecordRemarks": grpclib.const.Handler(
                self.__rpc_change_collected_game_record_remarks,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqChangeCollectedGameRecordRemarks,
                ResChangeCollectedGameRecordRemarks,
            ),
            "/lq.Lobby/fetchLevelLeaderboard": grpclib.const.Handler(
                self.__rpc_fetch_level_leaderboard,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqLevelLeaderboard,
                ResLevelLeaderboard,
            ),
            "/lq.Lobby/fetchChallengeLeaderboard": grpclib.const.Handler(
                self.__rpc_fetch_challenge_leaderboard,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqChallangeLeaderboard,
                ResChallengeLeaderboard,
            ),
            "/lq.Lobby/fetchMutiChallengeLevel": grpclib.const.Handler(
                self.__rpc_fetch_muti_challenge_level,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqMutiChallengeLevel,
                ResMutiChallengeLevel,
            ),
            "/lq.Lobby/fetchMultiAccountBrief": grpclib.const.Handler(
                self.__rpc_fetch_multi_account_brief,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqMultiAccountId,
                ResMultiAccountBrief,
            ),
            "/lq.Lobby/fetchFriendList": grpclib.const.Handler(
                self.__rpc_fetch_friend_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResFriendList,
            ),
            "/lq.Lobby/fetchFriendApplyList": grpclib.const.Handler(
                self.__rpc_fetch_friend_apply_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResFriendApplyList,
            ),
            "/lq.Lobby/applyFriend": grpclib.const.Handler(
                self.__rpc_apply_friend,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqApplyFriend,
                ResCommon,
            ),
            "/lq.Lobby/handleFriendApply": grpclib.const.Handler(
                self.__rpc_handle_friend_apply,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqHandleFriendApply,
                ResCommon,
            ),
            "/lq.Lobby/removeFriend": grpclib.const.Handler(
                self.__rpc_remove_friend,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqRemoveFriend,
                ResCommon,
            ),
            "/lq.Lobby/searchAccountById": grpclib.const.Handler(
                self.__rpc_search_account_by_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSearchAccountById,
                ResSearchAccountById,
            ),
            "/lq.Lobby/searchAccountByPattern": grpclib.const.Handler(
                self.__rpc_search_account_by_pattern,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSearchAccountByPattern,
                ResSearchAccountByPattern,
            ),
            "/lq.Lobby/fetchAccountState": grpclib.const.Handler(
                self.__rpc_fetch_account_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAccountList,
                ResAccountStates,
            ),
            "/lq.Lobby/fetchBagInfo": grpclib.const.Handler(
                self.__rpc_fetch_bag_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResBagInfo,
            ),
            "/lq.Lobby/useBagItem": grpclib.const.Handler(
                self.__rpc_use_bag_item,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUseBagItem,
                ResCommon,
            ),
            "/lq.Lobby/openManualItem": grpclib.const.Handler(
                self.__rpc_open_manual_item,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqOpenManualItem,
                ResCommon,
            ),
            "/lq.Lobby/openRandomRewardItem": grpclib.const.Handler(
                self.__rpc_open_random_reward_item,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqOpenRandomRewardItem,
                ResOpenRandomRewardItem,
            ),
            "/lq.Lobby/openAllRewardItem": grpclib.const.Handler(
                self.__rpc_open_all_reward_item,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqOpenAllRewardItem,
                ResOpenAllRewardItem,
            ),
            "/lq.Lobby/composeShard": grpclib.const.Handler(
                self.__rpc_compose_shard,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqComposeShard,
                ResCommon,
            ),
            "/lq.Lobby/fetchAnnouncement": grpclib.const.Handler(
                self.__rpc_fetch_announcement,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchAnnouncement,
                ResAnnouncement,
            ),
            "/lq.Lobby/readAnnouncement": grpclib.const.Handler(
                self.__rpc_read_announcement,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReadAnnouncement,
                ResCommon,
            ),
            "/lq.Lobby/fetchMailInfo": grpclib.const.Handler(
                self.__rpc_fetch_mail_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResMailInfo,
            ),
            "/lq.Lobby/readMail": grpclib.const.Handler(
                self.__rpc_read_mail,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReadMail,
                ResCommon,
            ),
            "/lq.Lobby/deleteMail": grpclib.const.Handler(
                self.__rpc_delete_mail,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqDeleteMail,
                ResCommon,
            ),
            "/lq.Lobby/takeAttachmentFromMail": grpclib.const.Handler(
                self.__rpc_take_attachment_from_mail,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqTakeAttachment,
                ResCommon,
            ),
            "/lq.Lobby/receiveAchievementReward": grpclib.const.Handler(
                self.__rpc_receive_achievement_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReceiveAchievementReward,
                ResReceiveAchievementReward,
            ),
            "/lq.Lobby/receiveAchievementGroupReward": grpclib.const.Handler(
                self.__rpc_receive_achievement_group_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReceiveAchievementGroupReward,
                ResReceiveAchievementGroupReward,
            ),
            "/lq.Lobby/fetchAchievementRate": grpclib.const.Handler(
                self.__rpc_fetch_achievement_rate,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResFetchAchievementRate,
            ),
            "/lq.Lobby/fetchAchievement": grpclib.const.Handler(
                self.__rpc_fetch_achievement,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResAchievement,
            ),
            "/lq.Lobby/buyShiLian": grpclib.const.Handler(
                self.__rpc_buy_shi_lian,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqBuyShiLian,
                ResCommon,
            ),
            "/lq.Lobby/matchShiLian": grpclib.const.Handler(
                self.__rpc_match_shi_lian,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.Lobby/goNextShiLian": grpclib.const.Handler(
                self.__rpc_go_next_shi_lian,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.Lobby/updateClientValue": grpclib.const.Handler(
                self.__rpc_update_client_value,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUpdateClientValue,
                ResCommon,
            ),
            "/lq.Lobby/fetchClientValue": grpclib.const.Handler(
                self.__rpc_fetch_client_value,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResClientValue,
            ),
            "/lq.Lobby/clientMessage": grpclib.const.Handler(
                self.__rpc_client_message,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqClientMessage,
                ResCommon,
            ),
            "/lq.Lobby/fetchCurrentMatchInfo": grpclib.const.Handler(
                self.__rpc_fetch_current_match_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCurrentMatchInfo,
                ResCurrentMatchInfo,
            ),
            "/lq.Lobby/userComplain": grpclib.const.Handler(
                self.__rpc_user_complain,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUserComplain,
                ResCommon,
            ),
            "/lq.Lobby/fetchReviveCoinInfo": grpclib.const.Handler(
                self.__rpc_fetch_revive_coin_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResReviveCoinInfo,
            ),
            "/lq.Lobby/gainReviveCoin": grpclib.const.Handler(
                self.__rpc_gain_revive_coin,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.Lobby/fetchDailyTask": grpclib.const.Handler(
                self.__rpc_fetch_daily_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResDailyTask,
            ),
            "/lq.Lobby/refreshDailyTask": grpclib.const.Handler(
                self.__rpc_refresh_daily_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqRefreshDailyTask,
                ResRefreshDailyTask,
            ),
            "/lq.Lobby/useGiftCode": grpclib.const.Handler(
                self.__rpc_use_gift_code,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUseGiftCode,
                ResUseGiftCode,
            ),
            "/lq.Lobby/useSpecialGiftCode": grpclib.const.Handler(
                self.__rpc_use_special_gift_code,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUseGiftCode,
                ResUseSpecialGiftCode,
            ),
            "/lq.Lobby/fetchTitleList": grpclib.const.Handler(
                self.__rpc_fetch_title_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResTitleList,
            ),
            "/lq.Lobby/useTitle": grpclib.const.Handler(
                self.__rpc_use_title,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUseTitle,
                ResCommon,
            ),
            "/lq.Lobby/sendClientMessage": grpclib.const.Handler(
                self.__rpc_send_client_message,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSendClientMessage,
                ResCommon,
            ),
            "/lq.Lobby/fetchGameLiveInfo": grpclib.const.Handler(
                self.__rpc_fetch_game_live_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGameLiveInfo,
                ResGameLiveInfo,
            ),
            "/lq.Lobby/fetchGameLiveLeftSegment": grpclib.const.Handler(
                self.__rpc_fetch_game_live_left_segment,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGameLiveLeftSegment,
                ResGameLiveLeftSegment,
            ),
            "/lq.Lobby/fetchGameLiveList": grpclib.const.Handler(
                self.__rpc_fetch_game_live_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGameLiveList,
                ResGameLiveList,
            ),
            "/lq.Lobby/fetchCommentSetting": grpclib.const.Handler(
                self.__rpc_fetch_comment_setting,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommentSetting,
            ),
            "/lq.Lobby/updateCommentSetting": grpclib.const.Handler(
                self.__rpc_update_comment_setting,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUpdateCommentSetting,
                ResCommon,
            ),
            "/lq.Lobby/fetchCommentList": grpclib.const.Handler(
                self.__rpc_fetch_comment_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchCommentList,
                ResFetchCommentList,
            ),
            "/lq.Lobby/fetchCommentContent": grpclib.const.Handler(
                self.__rpc_fetch_comment_content,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchCommentContent,
                ResFetchCommentContent,
            ),
            "/lq.Lobby/leaveComment": grpclib.const.Handler(
                self.__rpc_leave_comment,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqLeaveComment,
                ResCommon,
            ),
            "/lq.Lobby/deleteComment": grpclib.const.Handler(
                self.__rpc_delete_comment,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqDeleteComment,
                ResCommon,
            ),
            "/lq.Lobby/updateReadComment": grpclib.const.Handler(
                self.__rpc_update_read_comment,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUpdateReadComment,
                ResCommon,
            ),
            "/lq.Lobby/fetchRollingNotice": grpclib.const.Handler(
                self.__rpc_fetch_rolling_notice,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchRollingNotice,
                ResFetchRollingNotice,
            ),
            "/lq.Lobby/fetchMaintainNotice": grpclib.const.Handler(
                self.__rpc_fetch_maintain_notice,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResFetchMaintainNotice,
            ),
            "/lq.Lobby/fetchServerTime": grpclib.const.Handler(
                self.__rpc_fetch_server_time,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResServerTime,
            ),
            "/lq.Lobby/fetchPlatformProducts": grpclib.const.Handler(
                self.__rpc_fetch_platform_products,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqPlatformBillingProducts,
                ResPlatformBillingProducts,
            ),
            "/lq.Lobby/cancelGooglePlayOrder": grpclib.const.Handler(
                self.__rpc_cancel_google_play_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCancelGooglePlayOrder,
                ResCommon,
            ),
            "/lq.Lobby/openChest": grpclib.const.Handler(
                self.__rpc_open_chest,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqOpenChest,
                ResOpenChest,
            ),
            "/lq.Lobby/buyFromChestShop": grpclib.const.Handler(
                self.__rpc_buy_from_chest_shop,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqBuyFromChestShop,
                ResBuyFromChestShop,
            ),
            "/lq.Lobby/fetchDailySignInInfo": grpclib.const.Handler(
                self.__rpc_fetch_daily_sign_in_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResDailySignInInfo,
            ),
            "/lq.Lobby/doDailySignIn": grpclib.const.Handler(
                self.__rpc_do_daily_sign_in,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.Lobby/doActivitySignIn": grpclib.const.Handler(
                self.__rpc_do_activity_sign_in,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqDoActivitySignIn,
                ResDoActivitySignIn,
            ),
            "/lq.Lobby/fetchCharacterInfo": grpclib.const.Handler(
                self.__rpc_fetch_character_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCharacterInfo,
            ),
            "/lq.Lobby/updateCharacterSort": grpclib.const.Handler(
                self.__rpc_update_character_sort,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUpdateCharacterSort,
                ResCommon,
            ),
            "/lq.Lobby/changeMainCharacter": grpclib.const.Handler(
                self.__rpc_change_main_character,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqChangeMainCharacter,
                ResCommon,
            ),
            "/lq.Lobby/changeCharacterSkin": grpclib.const.Handler(
                self.__rpc_change_character_skin,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqChangeCharacterSkin,
                ResCommon,
            ),
            "/lq.Lobby/changeCharacterView": grpclib.const.Handler(
                self.__rpc_change_character_view,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqChangeCharacterView,
                ResCommon,
            ),
            "/lq.Lobby/setHiddenCharacter": grpclib.const.Handler(
                self.__rpc_set_hidden_character,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSetHiddenCharacter,
                ResSetHiddenCharacter,
            ),
            "/lq.Lobby/sendGiftToCharacter": grpclib.const.Handler(
                self.__rpc_send_gift_to_character,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSendGiftToCharacter,
                ResSendGiftToCharacter,
            ),
            "/lq.Lobby/sellItem": grpclib.const.Handler(
                self.__rpc_sell_item,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSellItem,
                ResCommon,
            ),
            "/lq.Lobby/fetchCommonView": grpclib.const.Handler(
                self.__rpc_fetch_common_view,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommonView,
            ),
            "/lq.Lobby/changeCommonView": grpclib.const.Handler(
                self.__rpc_change_common_view,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqChangeCommonView,
                ResCommon,
            ),
            "/lq.Lobby/saveCommonViews": grpclib.const.Handler(
                self.__rpc_save_common_views,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSaveCommonViews,
                ResCommon,
            ),
            "/lq.Lobby/fetchCommonViews": grpclib.const.Handler(
                self.__rpc_fetch_common_views,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommonViews,
                ResCommonViews,
            ),
            "/lq.Lobby/fetchAllCommonViews": grpclib.const.Handler(
                self.__rpc_fetch_all_common_views,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResAllcommonViews,
            ),
            "/lq.Lobby/useCommonView": grpclib.const.Handler(
                self.__rpc_use_common_view,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUseCommonView,
                ResCommon,
            ),
            "/lq.Lobby/upgradeCharacter": grpclib.const.Handler(
                self.__rpc_upgrade_character,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUpgradeCharacter,
                ResUpgradeCharacter,
            ),
            "/lq.Lobby/addFinishedEnding": grpclib.const.Handler(
                self.__rpc_add_finished_ending,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFinishedEnding,
                ResCommon,
            ),
            "/lq.Lobby/receiveEndingReward": grpclib.const.Handler(
                self.__rpc_receive_ending_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFinishedEnding,
                ResCommon,
            ),
            "/lq.Lobby/gameMasterCommand": grpclib.const.Handler(
                self.__rpc_game_master_command,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGmCommand,
                ResCommon,
            ),
            "/lq.Lobby/fetchShopInfo": grpclib.const.Handler(
                self.__rpc_fetch_shop_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResShopInfo,
            ),
            "/lq.Lobby/buyFromShop": grpclib.const.Handler(
                self.__rpc_buy_from_shop,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqBuyFromShop,
                ResBuyFromShop,
            ),
            "/lq.Lobby/buyFromZHP": grpclib.const.Handler(
                self.__rpc_buy_from_zhp,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqBuyFromZhp,
                ResCommon,
            ),
            "/lq.Lobby/refreshZHPShop": grpclib.const.Handler(
                self.__rpc_refresh_zhp_shop,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReshZhpShop,
                ResRefreshZhpShop,
            ),
            "/lq.Lobby/fetchMonthTicketInfo": grpclib.const.Handler(
                self.__rpc_fetch_month_ticket_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResMonthTicketInfo,
            ),
            "/lq.Lobby/payMonthTicket": grpclib.const.Handler(
                self.__rpc_pay_month_ticket,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResPayMonthTicket,
            ),
            "/lq.Lobby/exchangeCurrency": grpclib.const.Handler(
                self.__rpc_exchange_currency,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqExchangeCurrency,
                ResCommon,
            ),
            "/lq.Lobby/exchangeChestStone": grpclib.const.Handler(
                self.__rpc_exchange_chest_stone,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqExchangeCurrency,
                ResCommon,
            ),
            "/lq.Lobby/exchangeDiamond": grpclib.const.Handler(
                self.__rpc_exchange_diamond,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqExchangeCurrency,
                ResCommon,
            ),
            "/lq.Lobby/fetchServerSettings": grpclib.const.Handler(
                self.__rpc_fetch_server_settings,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResServerSettings,
            ),
            "/lq.Lobby/fetchAccountSettings": grpclib.const.Handler(
                self.__rpc_fetch_account_settings,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResAccountSettings,
            ),
            "/lq.Lobby/updateAccountSettings": grpclib.const.Handler(
                self.__rpc_update_account_settings,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUpdateAccountSettings,
                ResCommon,
            ),
            "/lq.Lobby/fetchModNicknameTime": grpclib.const.Handler(
                self.__rpc_fetch_mod_nickname_time,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResModNicknameTime,
            ),
            "/lq.Lobby/createWechatNativeOrder": grpclib.const.Handler(
                self.__rpc_create_wechat_native_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateWechatNativeOrder,
                ResCreateWechatNativeOrder,
            ),
            "/lq.Lobby/createWechatAppOrder": grpclib.const.Handler(
                self.__rpc_create_wechat_app_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateWechatAppOrder,
                ResCreateWechatAppOrder,
            ),
            "/lq.Lobby/createAlipayOrder": grpclib.const.Handler(
                self.__rpc_create_alipay_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateAlipayOrder,
                ResCreateAlipayOrder,
            ),
            "/lq.Lobby/createAlipayScanOrder": grpclib.const.Handler(
                self.__rpc_create_alipay_scan_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateAlipayScanOrder,
                ResCreateAlipayScanOrder,
            ),
            "/lq.Lobby/createAlipayAppOrder": grpclib.const.Handler(
                self.__rpc_create_alipay_app_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateAlipayAppOrder,
                ResCreateAlipayAppOrder,
            ),
            "/lq.Lobby/createJPCreditCardOrder": grpclib.const.Handler(
                self.__rpc_create_jp_credit_card_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateJpCreditCardOrder,
                ResCreateJpCreditCardOrder,
            ),
            "/lq.Lobby/createJPPaypalOrder": grpclib.const.Handler(
                self.__rpc_create_jp_paypal_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateJpPaypalOrder,
                ResCreateJpPaypalOrder,
            ),
            "/lq.Lobby/createJPAuOrder": grpclib.const.Handler(
                self.__rpc_create_jp_au_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateJpAuOrder,
                ResCreateJpAuOrder,
            ),
            "/lq.Lobby/createJPDocomoOrder": grpclib.const.Handler(
                self.__rpc_create_jp_docomo_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateJpDocomoOrder,
                ResCreateJpDocomoOrder,
            ),
            "/lq.Lobby/createJPWebMoneyOrder": grpclib.const.Handler(
                self.__rpc_create_jp_web_money_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateJpWebMoneyOrder,
                ResCreateJpWebMoneyOrder,
            ),
            "/lq.Lobby/createJPSoftbankOrder": grpclib.const.Handler(
                self.__rpc_create_jp_softbank_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateJpSoftbankOrder,
                ResCreateJpSoftbankOrder,
            ),
            "/lq.Lobby/createJPPayPayOrder": grpclib.const.Handler(
                self.__rpc_create_jp_pay_pay_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateJpPayPayOrder,
                ResCreateJpPayPayOrder,
            ),
            "/lq.Lobby/fetchJPCommonCreditCardOrder": grpclib.const.Handler(
                self.__rpc_fetch_jp_common_credit_card_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchJpCommonCreditCardOrder,
                ResFetchJpCommonCreditCardOrder,
            ),
            "/lq.Lobby/createJPGMOOrder": grpclib.const.Handler(
                self.__rpc_create_jpgmo_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateJpgmoOrder,
                ResCreateJpgmoOrder,
            ),
            "/lq.Lobby/createENPaypalOrder": grpclib.const.Handler(
                self.__rpc_create_en_paypal_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateEnPaypalOrder,
                ResCreateEnPaypalOrder,
            ),
            "/lq.Lobby/createENMasterCardOrder": grpclib.const.Handler(
                self.__rpc_create_en_master_card_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateEnMasterCardOrder,
                ResCreateEnMasterCardOrder,
            ),
            "/lq.Lobby/createENVisaOrder": grpclib.const.Handler(
                self.__rpc_create_en_visa_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateEnVisaOrder,
                ResCreateEnVisaOrder,
            ),
            "/lq.Lobby/createENJCBOrder": grpclib.const.Handler(
                self.__rpc_create_enjcb_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateEnjcbOrder,
                ResCreateEnjcbOrder,
            ),
            "/lq.Lobby/createENAlipayOrder": grpclib.const.Handler(
                self.__rpc_create_en_alipay_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateEnAlipayOrder,
                ResCreateEnAlipayOrder,
            ),
            "/lq.Lobby/createKRPaypalOrder": grpclib.const.Handler(
                self.__rpc_create_kr_paypal_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateKrPaypalOrder,
                ResCreateKrPaypalOrder,
            ),
            "/lq.Lobby/createKRMasterCardOrder": grpclib.const.Handler(
                self.__rpc_create_kr_master_card_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateKrMasterCardOrder,
                ResCreateKrMasterCardOrder,
            ),
            "/lq.Lobby/createKRVisaOrder": grpclib.const.Handler(
                self.__rpc_create_kr_visa_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateKrVisaOrder,
                ResCreateKrVisaOrder,
            ),
            "/lq.Lobby/createKRJCBOrder": grpclib.const.Handler(
                self.__rpc_create_krjcb_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateKrjcbOrder,
                ResCreateKrjcbOrder,
            ),
            "/lq.Lobby/createKRAlipayOrder": grpclib.const.Handler(
                self.__rpc_create_kr_alipay_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateKrAlipayOrder,
                ResCreateKrAlipayOrder,
            ),
            "/lq.Lobby/createDMMOrder": grpclib.const.Handler(
                self.__rpc_create_dmm_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateDmmOrder,
                ResCreateDmmOrder,
            ),
            "/lq.Lobby/createIAPOrder": grpclib.const.Handler(
                self.__rpc_create_iap_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateIapOrder,
                ResCreateIapOrder,
            ),
            "/lq.Lobby/createSteamOrder": grpclib.const.Handler(
                self.__rpc_create_steam_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateSteamOrder,
                ResCreateSteamOrder,
            ),
            "/lq.Lobby/verifySteamOrder": grpclib.const.Handler(
                self.__rpc_verify_steam_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqVerifySteamOrder,
                ResCommon,
            ),
            "/lq.Lobby/createMyCardAndroidOrder": grpclib.const.Handler(
                self.__rpc_create_my_card_android_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateMyCardOrder,
                ResCreateMyCardOrder,
            ),
            "/lq.Lobby/createMyCardWebOrder": grpclib.const.Handler(
                self.__rpc_create_my_card_web_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateMyCardOrder,
                ResCreateMyCardOrder,
            ),
            "/lq.Lobby/createPaypalOrder": grpclib.const.Handler(
                self.__rpc_create_paypal_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreatePaypalOrder,
                ResCreatePaypalOrder,
            ),
            "/lq.Lobby/createXsollaOrder": grpclib.const.Handler(
                self.__rpc_create_xsolla_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateXsollaOrder,
                ResCreateXsollaOrder,
            ),
            "/lq.Lobby/verifyMyCardOrder": grpclib.const.Handler(
                self.__rpc_verify_my_card_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqVerifyMyCardOrder,
                ResCommon,
            ),
            "/lq.Lobby/verificationIAPOrder": grpclib.const.Handler(
                self.__rpc_verification_iap_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqVerificationIapOrder,
                ResVerificationIapOrder,
            ),
            "/lq.Lobby/createYostarSDKOrder": grpclib.const.Handler(
                self.__rpc_create_yostar_sdk_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateYostarOrder,
                ResCreateYostarOrder,
            ),
            "/lq.Lobby/createBillingOrder": grpclib.const.Handler(
                self.__rpc_create_billing_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateBillingOrder,
                ResCreateBillingOrder,
            ),
            "/lq.Lobby/solveGooglePlayOrder": grpclib.const.Handler(
                self.__rpc_solve_google_play_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSolveGooglePlayOrder,
                ResCommon,
            ),
            "/lq.Lobby/solveGooglePayOrderV3": grpclib.const.Handler(
                self.__rpc_solve_google_pay_order_v3,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSolveGooglePlayOrderV3,
                ResCommon,
            ),
            "/lq.Lobby/deliverAA32Order": grpclib.const.Handler(
                self.__rpc_deliver_aa32_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqDeliverAa32Order,
                ResCommon,
            ),
            "/lq.Lobby/fetchMisc": grpclib.const.Handler(
                self.__rpc_fetch_misc,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResMisc,
            ),
            "/lq.Lobby/modifySignature": grpclib.const.Handler(
                self.__rpc_modify_signature,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqModifySignature,
                ResCommon,
            ),
            "/lq.Lobby/fetchIDCardInfo": grpclib.const.Handler(
                self.__rpc_fetch_id_card_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResIdCardInfo,
            ),
            "/lq.Lobby/updateIDCardInfo": grpclib.const.Handler(
                self.__rpc_update_id_card_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUpdateIdCardInfo,
                ResCommon,
            ),
            "/lq.Lobby/fetchVipReward": grpclib.const.Handler(
                self.__rpc_fetch_vip_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResVipReward,
            ),
            "/lq.Lobby/gainVipReward": grpclib.const.Handler(
                self.__rpc_gain_vip_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGainVipReward,
                ResCommon,
            ),
            "/lq.Lobby/fetchRefundOrder": grpclib.const.Handler(
                self.__rpc_fetch_refund_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResFetchRefundOrder,
            ),
            "/lq.Lobby/fetchCustomizedContestList": grpclib.const.Handler(
                self.__rpc_fetch_customized_contest_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchCustomizedContestList,
                ResFetchCustomizedContestList,
            ),
            "/lq.Lobby/fetchCustomizedContestAuthInfo": grpclib.const.Handler(
                self.__rpc_fetch_customized_contest_auth_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchCustomizedContestAuthInfo,
                ResFetchCustomizedContestAuthInfo,
            ),
            "/lq.Lobby/enterCustomizedContest": grpclib.const.Handler(
                self.__rpc_enter_customized_contest,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqEnterCustomizedContest,
                ResEnterCustomizedContest,
            ),
            "/lq.Lobby/leaveCustomizedContest": grpclib.const.Handler(
                self.__rpc_leave_customized_contest,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.Lobby/fetchCustomizedContestOnlineInfo": grpclib.const.Handler(
                self.__rpc_fetch_customized_contest_online_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchCustomizedContestOnlineInfo,
                ResFetchCustomizedContestOnlineInfo,
            ),
            "/lq.Lobby/fetchCustomizedContestByContestId": grpclib.const.Handler(
                self.__rpc_fetch_customized_contest_by_contest_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchCustomizedContestByContestId,
                ResFetchCustomizedContestByContestId,
            ),
            "/lq.Lobby/signupCustomizedContest": grpclib.const.Handler(
                self.__rpc_signup_customized_contest,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSignupCustomizedContest,
                ResSignupCustomizedContest,
            ),
            "/lq.Lobby/startCustomizedContest": grpclib.const.Handler(
                self.__rpc_start_customized_contest,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqStartCustomizedContest,
                ResCommon,
            ),
            "/lq.Lobby/stopCustomizedContest": grpclib.const.Handler(
                self.__rpc_stop_customized_contest,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqStopCustomizedContest,
                ResCommon,
            ),
            "/lq.Lobby/joinCustomizedContestChatRoom": grpclib.const.Handler(
                self.__rpc_join_customized_contest_chat_room,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqJoinCustomizedContestChatRoom,
                ResJoinCustomizedContestChatRoom,
            ),
            "/lq.Lobby/leaveCustomizedContestChatRoom": grpclib.const.Handler(
                self.__rpc_leave_customized_contest_chat_room,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.Lobby/sayChatMessage": grpclib.const.Handler(
                self.__rpc_say_chat_message,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSayChatMessage,
                ResCommon,
            ),
            "/lq.Lobby/fetchCustomizedContestGameRecords": grpclib.const.Handler(
                self.__rpc_fetch_customized_contest_game_records,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchCustomizedContestGameRecords,
                ResFetchCustomizedContestGameRecords,
            ),
            "/lq.Lobby/fetchCustomizedContestGameLiveList": grpclib.const.Handler(
                self.__rpc_fetch_customized_contest_game_live_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchCustomizedContestGameLiveList,
                ResFetchCustomizedContestGameLiveList,
            ),
            "/lq.Lobby/followCustomizedContest": grpclib.const.Handler(
                self.__rpc_follow_customized_contest,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqTargetCustomizedContest,
                ResCommon,
            ),
            "/lq.Lobby/unfollowCustomizedContest": grpclib.const.Handler(
                self.__rpc_unfollow_customized_contest,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqTargetCustomizedContest,
                ResCommon,
            ),
            "/lq.Lobby/fetchActivityList": grpclib.const.Handler(
                self.__rpc_fetch_activity_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResActivityList,
            ),
            "/lq.Lobby/fetchAccountActivityData": grpclib.const.Handler(
                self.__rpc_fetch_account_activity_data,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResAccountActivityData,
            ),
            "/lq.Lobby/exchangeActivityItem": grpclib.const.Handler(
                self.__rpc_exchange_activity_item,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqExchangeActivityItem,
                ResExchangeActivityItem,
            ),
            "/lq.Lobby/completeActivityTask": grpclib.const.Handler(
                self.__rpc_complete_activity_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCompleteActivityTask,
                ResCommon,
            ),
            "/lq.Lobby/completeActivityTaskBatch": grpclib.const.Handler(
                self.__rpc_complete_activity_task_batch,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCompleteActivityTaskBatch,
                ResCommon,
            ),
            "/lq.Lobby/completeActivityFlipTask": grpclib.const.Handler(
                self.__rpc_complete_activity_flip_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCompleteActivityTask,
                ResCommon,
            ),
            "/lq.Lobby/completePeriodActivityTask": grpclib.const.Handler(
                self.__rpc_complete_period_activity_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCompleteActivityTask,
                ResCommon,
            ),
            "/lq.Lobby/completePeriodActivityTaskBatch": grpclib.const.Handler(
                self.__rpc_complete_period_activity_task_batch,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCompletePeriodActivityTaskBatch,
                ResCommon,
            ),
            "/lq.Lobby/completeRandomActivityTask": grpclib.const.Handler(
                self.__rpc_complete_random_activity_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCompleteActivityTask,
                ResCommon,
            ),
            "/lq.Lobby/receiveActivityFlipTask": grpclib.const.Handler(
                self.__rpc_receive_activity_flip_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReceiveActivityFlipTask,
                ResReceiveActivityFlipTask,
            ),
            "/lq.Lobby/completeSegmentTaskReward": grpclib.const.Handler(
                self.__rpc_complete_segment_task_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCompleteSegmentTaskReward,
                ResCompleteSegmentTaskReward,
            ),
            "/lq.Lobby/fetchActivityFlipInfo": grpclib.const.Handler(
                self.__rpc_fetch_activity_flip_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchActivityFlipInfo,
                ResFetchActivityFlipInfo,
            ),
            "/lq.Lobby/gainAccumulatedPointActivityReward": grpclib.const.Handler(
                self.__rpc_gain_accumulated_point_activity_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGainAccumulatedPointActivityReward,
                ResCommon,
            ),
            "/lq.Lobby/gainMultiPointActivityReward": grpclib.const.Handler(
                self.__rpc_gain_multi_point_activity_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGainMultiPointActivityReward,
                ResCommon,
            ),
            "/lq.Lobby/fetchRankPointLeaderboard": grpclib.const.Handler(
                self.__rpc_fetch_rank_point_leaderboard,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchRankPointLeaderboard,
                ResFetchRankPointLeaderboard,
            ),
            "/lq.Lobby/gainRankPointReward": grpclib.const.Handler(
                self.__rpc_gain_rank_point_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGainRankPointReward,
                ResCommon,
            ),
            "/lq.Lobby/richmanActivityNextMove": grpclib.const.Handler(
                self.__rpc_richman_activity_next_move,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqRichmanNextMove,
                ResRichmanNextMove,
            ),
            "/lq.Lobby/richmanAcitivitySpecialMove": grpclib.const.Handler(
                self.__rpc_richman_acitivity_special_move,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqRichmanSpecialMove,
                ResRichmanNextMove,
            ),
            "/lq.Lobby/richmanActivityChestInfo": grpclib.const.Handler(
                self.__rpc_richman_activity_chest_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqRichmanChestInfo,
                ResRichmanChestInfo,
            ),
            "/lq.Lobby/createGameObserveAuth": grpclib.const.Handler(
                self.__rpc_create_game_observe_auth,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateGameObserveAuth,
                ResCreateGameObserveAuth,
            ),
            "/lq.Lobby/refreshGameObserveAuth": grpclib.const.Handler(
                self.__rpc_refresh_game_observe_auth,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqRefreshGameObserveAuth,
                ResRefreshGameObserveAuth,
            ),
            "/lq.Lobby/fetchActivityBuff": grpclib.const.Handler(
                self.__rpc_fetch_activity_buff,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResActivityBuff,
            ),
            "/lq.Lobby/upgradeActivityBuff": grpclib.const.Handler(
                self.__rpc_upgrade_activity_buff,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUpgradeActivityBuff,
                ResActivityBuff,
            ),
            "/lq.Lobby/upgradeActivityLevel": grpclib.const.Handler(
                self.__rpc_upgrade_activity_level,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUpgradeActivityLevel,
                ResUpgradeActivityLevel,
            ),
            "/lq.Lobby/receiveUpgradeActivityReward": grpclib.const.Handler(
                self.__rpc_receive_upgrade_activity_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReceiveUpgradeActivityReward,
                ResReceiveUpgradeActivityReward,
            ),
            "/lq.Lobby/upgradeChallenge": grpclib.const.Handler(
                self.__rpc_upgrade_challenge,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResUpgradeChallenge,
            ),
            "/lq.Lobby/refreshChallenge": grpclib.const.Handler(
                self.__rpc_refresh_challenge,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResRefreshChallenge,
            ),
            "/lq.Lobby/fetchChallengeInfo": grpclib.const.Handler(
                self.__rpc_fetch_challenge_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResFetchChallengeInfo,
            ),
            "/lq.Lobby/forceCompleteChallengeTask": grpclib.const.Handler(
                self.__rpc_force_complete_challenge_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqForceCompleteChallengeTask,
                ResCommon,
            ),
            "/lq.Lobby/fetchChallengeSeason": grpclib.const.Handler(
                self.__rpc_fetch_challenge_season,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResChallengeSeasonInfo,
            ),
            "/lq.Lobby/receiveChallengeRankReward": grpclib.const.Handler(
                self.__rpc_receive_challenge_rank_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReceiveChallengeRankReward,
                ResReceiveChallengeRankReward,
            ),
            "/lq.Lobby/fetchABMatchInfo": grpclib.const.Handler(
                self.__rpc_fetch_ab_match_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResFetchAbMatch,
            ),
            "/lq.Lobby/buyInABMatch": grpclib.const.Handler(
                self.__rpc_buy_in_ab_match,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqBuyInAbMatch,
                ResCommon,
            ),
            "/lq.Lobby/receiveABMatchReward": grpclib.const.Handler(
                self.__rpc_receive_ab_match_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.Lobby/quitABMatch": grpclib.const.Handler(
                self.__rpc_quit_ab_match,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.Lobby/startUnifiedMatch": grpclib.const.Handler(
                self.__rpc_start_unified_match,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqStartUnifiedMatch,
                ResCommon,
            ),
            "/lq.Lobby/cancelUnifiedMatch": grpclib.const.Handler(
                self.__rpc_cancel_unified_match,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCancelUnifiedMatch,
                ResCommon,
            ),
            "/lq.Lobby/fetchGamePointRank": grpclib.const.Handler(
                self.__rpc_fetch_game_point_rank,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGamePointRank,
                ResGamePointRank,
            ),
            "/lq.Lobby/fetchSelfGamePointRank": grpclib.const.Handler(
                self.__rpc_fetch_self_game_point_rank,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGamePointRank,
                ResFetchSelfGamePointRank,
            ),
            "/lq.Lobby/readSNS": grpclib.const.Handler(
                self.__rpc_read_sns,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReadSns,
                ResReadSns,
            ),
            "/lq.Lobby/replySNS": grpclib.const.Handler(
                self.__rpc_reply_sns,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReplySns,
                ResReplySns,
            ),
            "/lq.Lobby/likeSNS": grpclib.const.Handler(
                self.__rpc_like_sns,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqLikeSns,
                ResLikeSns,
            ),
            "/lq.Lobby/digMine": grpclib.const.Handler(
                self.__rpc_dig_mine,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqDigMine,
                ResDigMine,
            ),
            "/lq.Lobby/fetchLastPrivacy": grpclib.const.Handler(
                self.__rpc_fetch_last_privacy,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchLastPrivacy,
                ResFetchLastPrivacy,
            ),
            "/lq.Lobby/checkPrivacy": grpclib.const.Handler(
                self.__rpc_check_privacy,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCheckPrivacy,
                ResCommon,
            ),
            "/lq.Lobby/responseCaptcha": grpclib.const.Handler(
                self.__rpc_response_captcha,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqResponseCaptcha,
                ResCommon,
            ),
            "/lq.Lobby/fetchRPGBattleHistory": grpclib.const.Handler(
                self.__rpc_fetch_rpg_battle_history,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchRpgBattleHistory,
                ResFetchRpgBattleHistory,
            ),
            "/lq.Lobby/fetchRPGBattleHistoryV2": grpclib.const.Handler(
                self.__rpc_fetch_rpg_battle_history_v2,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchRpgBattleHistory,
                ResFetchRpgBattleHistoryV2,
            ),
            "/lq.Lobby/receiveRPGRewards": grpclib.const.Handler(
                self.__rpc_receive_rpg_rewards,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReceiveRpgRewards,
                ResReceiveRpgRewards,
            ),
            "/lq.Lobby/receiveRPGReward": grpclib.const.Handler(
                self.__rpc_receive_rpg_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReceiveRpgReward,
                ResReceiveRpgRewards,
            ),
            "/lq.Lobby/buyArenaTicket": grpclib.const.Handler(
                self.__rpc_buy_arena_ticket,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqBuyArenaTicket,
                ResCommon,
            ),
            "/lq.Lobby/enterArena": grpclib.const.Handler(
                self.__rpc_enter_arena,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqEnterArena,
                ResCommon,
            ),
            "/lq.Lobby/receiveArenaReward": grpclib.const.Handler(
                self.__rpc_receive_arena_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqArenaReward,
                ResArenaReward,
            ),
            "/lq.Lobby/fetchOBToken": grpclib.const.Handler(
                self.__rpc_fetch_ob_token,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchObToken,
                ResFetchObToken,
            ),
            "/lq.Lobby/receiveCharacterRewards": grpclib.const.Handler(
                self.__rpc_receive_character_rewards,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReceiveCharacterRewards,
                ResReceiveCharacterRewards,
            ),
            "/lq.Lobby/feedActivityFeed": grpclib.const.Handler(
                self.__rpc_feed_activity_feed,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFeedActivityFeed,
                ResFeedActivityFeed,
            ),
            "/lq.Lobby/sendActivityGiftToFriend": grpclib.const.Handler(
                self.__rpc_send_activity_gift_to_friend,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSendActivityGiftToFriend,
                ResSendActivityGiftToFriend,
            ),
            "/lq.Lobby/receiveActivityGift": grpclib.const.Handler(
                self.__rpc_receive_activity_gift,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReceiveActivityGift,
                ResCommon,
            ),
            "/lq.Lobby/receiveAllActivityGift": grpclib.const.Handler(
                self.__rpc_receive_all_activity_gift,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReceiveAllActivityGift,
                ResReceiveAllActivityGift,
            ),
            "/lq.Lobby/fetchFriendGiftActivityData": grpclib.const.Handler(
                self.__rpc_fetch_friend_gift_activity_data,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchFriendGiftActivityData,
                ResFetchFriendGiftActivityData,
            ),
            "/lq.Lobby/openPreChestItem": grpclib.const.Handler(
                self.__rpc_open_pre_chest_item,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqOpenPreChestItem,
                ResOpenPreChestItem,
            ),
            "/lq.Lobby/fetchVoteActivity": grpclib.const.Handler(
                self.__rpc_fetch_vote_activity,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchVoteActivity,
                ResFetchVoteActivity,
            ),
            "/lq.Lobby/voteActivity": grpclib.const.Handler(
                self.__rpc_vote_activity,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqVoteActivity,
                ResVoteActivity,
            ),
            "/lq.Lobby/unlockActivitySpot": grpclib.const.Handler(
                self.__rpc_unlock_activity_spot,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUnlockActivitySpot,
                ResCommon,
            ),
            "/lq.Lobby/unlockActivitySpotEnding": grpclib.const.Handler(
                self.__rpc_unlock_activity_spot_ending,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUnlockActivitySpotEnding,
                ResCommon,
            ),
            "/lq.Lobby/receiveActivitySpotReward": grpclib.const.Handler(
                self.__rpc_receive_activity_spot_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReceiveActivitySpotReward,
                ResReceiveActivitySpotReward,
            ),
            "/lq.Lobby/deleteAccount": grpclib.const.Handler(
                self.__rpc_delete_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResDeleteAccount,
            ),
            "/lq.Lobby/cancelDeleteAccount": grpclib.const.Handler(
                self.__rpc_cancel_delete_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.Lobby/logReport": grpclib.const.Handler(
                self.__rpc_log_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqLogReport,
                ResCommon,
            ),
            "/lq.Lobby/bindOauth2": grpclib.const.Handler(
                self.__rpc_bind_oauth2,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqBindOauth2,
                ResCommon,
            ),
            "/lq.Lobby/fetchOauth2Info": grpclib.const.Handler(
                self.__rpc_fetch_oauth2_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchOauth2,
                ResFetchOauth2,
            ),
            "/lq.Lobby/setLoadingImage": grpclib.const.Handler(
                self.__rpc_set_loading_image,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSetLoadingImage,
                ResCommon,
            ),
            "/lq.Lobby/fetchShopInterval": grpclib.const.Handler(
                self.__rpc_fetch_shop_interval,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResFetchShopInterval,
            ),
            "/lq.Lobby/fetchActivityInterval": grpclib.const.Handler(
                self.__rpc_fetch_activity_interval,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResFetchActivityInterval,
            ),
            "/lq.Lobby/fetchRecentFriend": grpclib.const.Handler(
                self.__rpc_fetch_recent_friend,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResFetchrecentFriend,
            ),
            "/lq.Lobby/openGacha": grpclib.const.Handler(
                self.__rpc_open_gacha,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqOpenGacha,
                ResOpenGacha,
            ),
            "/lq.Lobby/taskRequest": grpclib.const.Handler(
                self.__rpc_task_request,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqTaskRequest,
                ResCommon,
            ),
            "/lq.Lobby/simulationActivityTrain": grpclib.const.Handler(
                self.__rpc_simulation_activity_train,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSimulationActivityTrain,
                ResSimulationActivityTrain,
            ),
            "/lq.Lobby/fetchSimulationGameRecord": grpclib.const.Handler(
                self.__rpc_fetch_simulation_game_record,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchSimulationGameRecord,
                ResFetchSimulationGameRecord,
            ),
            "/lq.Lobby/startSimulationActivityGame": grpclib.const.Handler(
                self.__rpc_start_simulation_activity_game,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqStartSimulationActivityGame,
                ResStartSimulationActivityGame,
            ),
            "/lq.Lobby/fetchSimulationGameRank": grpclib.const.Handler(
                self.__rpc_fetch_simulation_game_rank,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchSimulationGameRank,
                ResFetchSimulationGameRank,
            ),
            "/lq.Lobby/generateCombiningCraft": grpclib.const.Handler(
                self.__rpc_generate_combining_craft,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGenerateCombiningCraft,
                ResGenerateCombiningCraft,
            ),
            "/lq.Lobby/moveCombiningCraft": grpclib.const.Handler(
                self.__rpc_move_combining_craft,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqMoveCombiningCraft,
                ResMoveCombiningCraft,
            ),
            "/lq.Lobby/combiningRecycleCraft": grpclib.const.Handler(
                self.__rpc_combining_recycle_craft,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCombiningRecycleCraft,
                ResCombiningRecycleCraft,
            ),
            "/lq.Lobby/recoverCombiningRecycle": grpclib.const.Handler(
                self.__rpc_recover_combining_recycle,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqRecoverCombiningRecycle,
                ResRecoverCombiningRecycle,
            ),
            "/lq.Lobby/finishCombiningOrder": grpclib.const.Handler(
                self.__rpc_finish_combining_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFinishCombiningOrder,
                ResFinishCombiningOrder,
            ),
            "/lq.Lobby/upgradeVillageBuilding": grpclib.const.Handler(
                self.__rpc_upgrade_village_building,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUpgradeVillageBuilding,
                ResCommon,
            ),
            "/lq.Lobby/receiveVillageBuildingReward": grpclib.const.Handler(
                self.__rpc_receive_village_building_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReceiveVillageBuildingReward,
                ResReceiveVillageBuildingReward,
            ),
            "/lq.Lobby/startVillageTrip": grpclib.const.Handler(
                self.__rpc_start_village_trip,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqStartVillageTrip,
                ResCommon,
            ),
            "/lq.Lobby/receiveVillageTripReward": grpclib.const.Handler(
                self.__rpc_receive_village_trip_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqReceiveVillageTripReward,
                ResReceiveVillageTripReward,
            ),
            "/lq.Lobby/completeVillageTask": grpclib.const.Handler(
                self.__rpc_complete_village_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCompleteVillageTask,
                ResCompleteVillageTask,
            ),
            "/lq.Lobby/getFriendVillageData": grpclib.const.Handler(
                self.__rpc_get_friend_village_data,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGetFriendVillageData,
                ResGetFriendVillageData,
            ),
            "/lq.Lobby/setVillageWorker": grpclib.const.Handler(
                self.__rpc_set_village_worker,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSetVillageWorker,
                ResSetVillageWorker,
            ),
            "/lq.Lobby/nextRoundVillage": grpclib.const.Handler(
                self.__rpc_next_round_village,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqNextRoundVillage,
                ResNextRoundVillage,
            ),
            "/lq.Lobby/resolveFestivalActivityProposal": grpclib.const.Handler(
                self.__rpc_resolve_festival_activity_proposal,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqResolveFestivalActivityProposal,
                ResResolveFestivalActivityProposal,
            ),
            "/lq.Lobby/resolveFestivalActivityEvent": grpclib.const.Handler(
                self.__rpc_resolve_festival_activity_event,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqResolveFestivalActivityEvent,
                ResResolveFestivalActivityEvent,
            ),
            "/lq.Lobby/buyFestivalProposal": grpclib.const.Handler(
                self.__rpc_buy_festival_proposal,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqBuyFestivalProposal,
                ResBuyFestivalProposal,
            ),
            "/lq.Lobby/islandActivityMove": grpclib.const.Handler(
                self.__rpc_island_activity_move,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqIslandActivityMove,
                ResCommon,
            ),
            "/lq.Lobby/islandActivityBuy": grpclib.const.Handler(
                self.__rpc_island_activity_buy,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqIslandActivityBuy,
                ResCommon,
            ),
            "/lq.Lobby/islandActivitySell": grpclib.const.Handler(
                self.__rpc_island_activity_sell,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqIslandActivitySell,
                ResCommon,
            ),
            "/lq.Lobby/islandActivityTidyBag": grpclib.const.Handler(
                self.__rpc_island_activity_tidy_bag,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqIslandActivityTidyBag,
                ResCommon,
            ),
            "/lq.Lobby/islandActivityUnlockBagGrid": grpclib.const.Handler(
                self.__rpc_island_activity_unlock_bag_grid,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqIslandActivityUnlockBagGrid,
                ResCommon,
            ),
            "/lq.Lobby/createCustomizedContest": grpclib.const.Handler(
                self.__rpc_create_customized_contest,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateCustomizedContest,
                ResCreateCustomizedContest,
            ),
            "/lq.Lobby/fetchManagerCustomizedContestList": grpclib.const.Handler(
                self.__rpc_fetch_manager_customized_contest_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchmanagerCustomizedContestList,
                ResFetchManagerCustomizedContestList,
            ),
            "/lq.Lobby/fetchManagerCustomizedContest": grpclib.const.Handler(
                self.__rpc_fetch_manager_customized_contest,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchManagerCustomizedContest,
                ResFetchManagerCustomizedContest,
            ),
            "/lq.Lobby/updateManagerCustomizedContest": grpclib.const.Handler(
                self.__rpc_update_manager_customized_contest,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqUpdateManagerCustomizedContest,
                ResCommon,
            ),
            "/lq.Lobby/fetchContestPlayerRank": grpclib.const.Handler(
                self.__rpc_fetch_contest_player_rank,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchContestPlayerRank,
                ResFetchContestPlayerRank,
            ),
            "/lq.Lobby/fetchReadyPlayerList": grpclib.const.Handler(
                self.__rpc_fetch_ready_player_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchReadyPlayerList,
                ResFetchReadyPlayerList,
            ),
            "/lq.Lobby/createGamePlan": grpclib.const.Handler(
                self.__rpc_create_game_plan,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCreateGamePlan,
                ResCommon,
            ),
            "/lq.Lobby/generateContestManagerLoginCode": grpclib.const.Handler(
                self.__rpc_generate_contest_manager_login_code,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResGenerateContestManagerLoginCode,
            ),
            "/lq.Lobby/amuletActivityStartGame": grpclib.const.Handler(
                self.__rpc_amulet_activity_start_game,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAmuletActivityStartGame,
                ResAmuletActivityStartGame,
            ),
            "/lq.Lobby/amuletActivityOperate": grpclib.const.Handler(
                self.__rpc_amulet_activity_operate,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAmuletActivityOperate,
                ResAmuletActivityOperate,
            ),
            "/lq.Lobby/amuletActivityChangeHands": grpclib.const.Handler(
                self.__rpc_amulet_activity_change_hands,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAmuletActivityChangeHands,
                ResAmuletActivityChangeHands,
            ),
            "/lq.Lobby/amuletActivityUpgrade": grpclib.const.Handler(
                self.__rpc_amulet_activity_upgrade,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAmuletActivityUpgrade,
                ResAmuletActivityUpgrade,
            ),
            "/lq.Lobby/amuletActivityBuy": grpclib.const.Handler(
                self.__rpc_amulet_activity_buy,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAmuletActivityBuy,
                ResAmuletActivityBuy,
            ),
            "/lq.Lobby/amuletActivitySelectPack": grpclib.const.Handler(
                self.__rpc_amulet_activity_select_pack,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAmuletActivitySelectPack,
                ResAmuletActivitySelectPack,
            ),
            "/lq.Lobby/amuletActivitySellEffect": grpclib.const.Handler(
                self.__rpc_amulet_activity_sell_effect,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAmuletActivitySellEffect,
                ResAmuletActivitySellEffect,
            ),
            "/lq.Lobby/amuletActivityEffectSort": grpclib.const.Handler(
                self.__rpc_amulet_activity_effect_sort,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAmuletActivityEffectSort,
                ResCommon,
            ),
            "/lq.Lobby/amuletActivityGiveup": grpclib.const.Handler(
                self.__rpc_amulet_activity_giveup,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAmuletActivityGiveup,
                ResCommon,
            ),
            "/lq.Lobby/amuletActivityRefreshShop": grpclib.const.Handler(
                self.__rpc_amulet_activity_refresh_shop,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAmuletActivityRefreshShop,
                ResAmuletActivityRefreshShop,
            ),
            "/lq.Lobby/amuletActivitySelectFreeEffect": grpclib.const.Handler(
                self.__rpc_amulet_activity_select_free_effect,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAmuletActivitySelectFreeEffect,
                ResAmuletActivitySelectFreeEffect,
            ),
            "/lq.Lobby/amuletActivityUpgradeShopBuff": grpclib.const.Handler(
                self.__rpc_amulet_activity_upgrade_shop_buff,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAmuletActivityUpgradeShopBuff,
                ResAmuletActivityUpgradeShopBuff,
            ),
            "/lq.Lobby/amuletActivityEndShopping": grpclib.const.Handler(
                self.__rpc_amulet_activity_end_shopping,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAmuletActivityEndShopping,
                ResAmuletActivityEndShopping,
            ),
            "/lq.Lobby/amuletActivitySetSkillLevel": grpclib.const.Handler(
                self.__rpc_amulet_activity_set_skill_level,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAmuletActivitySetSkillLevel,
                ResCommon,
            ),
            "/lq.Lobby/amuletActivityMaintainInfo": grpclib.const.Handler(
                self.__rpc_amulet_activity_maintain_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResAmuletActivityMaintainInfo,
            ),
            "/lq.Lobby/storyActivityUnlock": grpclib.const.Handler(
                self.__rpc_story_activity_unlock,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqStoryActivityUnlock,
                ResCommon,
            ),
            "/lq.Lobby/storyActivityUnlockEnding": grpclib.const.Handler(
                self.__rpc_story_activity_unlock_ending,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqStoryActivityUnlockEnding,
                ResCommon,
            ),
            "/lq.Lobby/storyActivityReceiveEndingReward": grpclib.const.Handler(
                self.__rpc_story_activity_receive_ending_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqStoryActivityReceiveEndingReward,
                ResStoryReward,
            ),
            "/lq.Lobby/storyActivityReceiveFinishReward": grpclib.const.Handler(
                self.__rpc_story_activity_receive_finish_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqStoryActivityReceiveFinishReward,
                ResStoryReward,
            ),
            "/lq.Lobby/storyActivityReceiveAllFinishReward": grpclib.const.Handler(
                self.__rpc_story_activity_receive_all_finish_reward,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqStoryActivityReceiveAllFinishReward,
                ResStoryReward,
            ),
            "/lq.Lobby/storyActivityUnlockEndingAndReceive": grpclib.const.Handler(
                self.__rpc_story_activity_unlock_ending_and_receive,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqStoryActivityUnlockEndingAndReceive,
                ResStoryActivityUnlockEndingAndReceive,
            ),
            "/lq.Lobby/fetchActivityRank": grpclib.const.Handler(
                self.__rpc_fetch_activity_rank,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchActivityRank,
                ResFetchActivityRank,
            ),
            "/lq.Lobby/setVerifiedHidden": grpclib.const.Handler(
                self.__rpc_set_verified_hidden,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSetVerifiedHidden,
                ResCommon,
            ),
            "/lq.Lobby/fetchQuestionnaireList": grpclib.const.Handler(
                self.__rpc_fetch_questionnaire_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchQuestionnaireList,
                ResFetchQuestionnaireList,
            ),
            "/lq.Lobby/fetchQuestionnaireDetail": grpclib.const.Handler(
                self.__rpc_fetch_questionnaire_detail,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqFetchQuestionnaireDetail,
                ResFetchQuestionnaireDetail,
            ),
            "/lq.Lobby/submitQuestionnaire": grpclib.const.Handler(
                self.__rpc_submit_questionnaire,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSubmitQuestionnaire,
                ResCommon,
            ),
        }


class FastTestBase(ServiceBase):
    async def auth_game(self, req_auth_game: "ReqAuthGame") -> "ResAuthGame":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def enter_game(self, req_common: "ReqCommon") -> "ResEnterGame":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def sync_game(self, req_sync_game: "ReqSyncGame") -> "ResSyncGame":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def finish_sync_game(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def terminate_game(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def input_operation(
        self, req_self_operation: "ReqSelfOperation"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def input_chi_peng_gang(
        self, req_chi_peng_gang: "ReqChiPengGang"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def confirm_new_round(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def broadcast_in_game(
        self, req_broadcast_in_game: "ReqBroadcastInGame"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def input_game_gm_command(
        self, req_gm_command_in_gaming: "ReqGmCommandInGaming"
    ) -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_game_player_state(
        self, req_common: "ReqCommon"
    ) -> "ResGamePlayerState":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def check_network_delay(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def clear_leaving(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def vote_game_end(
        self, req_vote_game_end: "ReqVoteGameEnd"
    ) -> "ResGameEndVote":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def auth_observe(self, req_auth_observe: "ReqAuthObserve") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def start_observe(self, req_common: "ReqCommon") -> "ResStartObserve":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def stop_observe(self, req_common: "ReqCommon") -> "ResCommon":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_auth_game(
        self, stream: "grpclib.server.Stream[ReqAuthGame, ResAuthGame]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.auth_game(request)
        await stream.send_message(response)

    async def __rpc_enter_game(
        self, stream: "grpclib.server.Stream[ReqCommon, ResEnterGame]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.enter_game(request)
        await stream.send_message(response)

    async def __rpc_sync_game(
        self, stream: "grpclib.server.Stream[ReqSyncGame, ResSyncGame]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.sync_game(request)
        await stream.send_message(response)

    async def __rpc_finish_sync_game(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.finish_sync_game(request)
        await stream.send_message(response)

    async def __rpc_terminate_game(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.terminate_game(request)
        await stream.send_message(response)

    async def __rpc_input_operation(
        self, stream: "grpclib.server.Stream[ReqSelfOperation, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.input_operation(request)
        await stream.send_message(response)

    async def __rpc_input_chi_peng_gang(
        self, stream: "grpclib.server.Stream[ReqChiPengGang, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.input_chi_peng_gang(request)
        await stream.send_message(response)

    async def __rpc_confirm_new_round(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.confirm_new_round(request)
        await stream.send_message(response)

    async def __rpc_broadcast_in_game(
        self, stream: "grpclib.server.Stream[ReqBroadcastInGame, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.broadcast_in_game(request)
        await stream.send_message(response)

    async def __rpc_input_game_gm_command(
        self, stream: "grpclib.server.Stream[ReqGmCommandInGaming, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.input_game_gm_command(request)
        await stream.send_message(response)

    async def __rpc_fetch_game_player_state(
        self, stream: "grpclib.server.Stream[ReqCommon, ResGamePlayerState]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fetch_game_player_state(request)
        await stream.send_message(response)

    async def __rpc_check_network_delay(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.check_network_delay(request)
        await stream.send_message(response)

    async def __rpc_clear_leaving(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.clear_leaving(request)
        await stream.send_message(response)

    async def __rpc_vote_game_end(
        self, stream: "grpclib.server.Stream[ReqVoteGameEnd, ResGameEndVote]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.vote_game_end(request)
        await stream.send_message(response)

    async def __rpc_auth_observe(
        self, stream: "grpclib.server.Stream[ReqAuthObserve, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.auth_observe(request)
        await stream.send_message(response)

    async def __rpc_start_observe(
        self, stream: "grpclib.server.Stream[ReqCommon, ResStartObserve]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.start_observe(request)
        await stream.send_message(response)

    async def __rpc_stop_observe(
        self, stream: "grpclib.server.Stream[ReqCommon, ResCommon]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.stop_observe(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/lq.FastTest/authGame": grpclib.const.Handler(
                self.__rpc_auth_game,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAuthGame,
                ResAuthGame,
            ),
            "/lq.FastTest/enterGame": grpclib.const.Handler(
                self.__rpc_enter_game,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResEnterGame,
            ),
            "/lq.FastTest/syncGame": grpclib.const.Handler(
                self.__rpc_sync_game,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSyncGame,
                ResSyncGame,
            ),
            "/lq.FastTest/finishSyncGame": grpclib.const.Handler(
                self.__rpc_finish_sync_game,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.FastTest/terminateGame": grpclib.const.Handler(
                self.__rpc_terminate_game,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.FastTest/inputOperation": grpclib.const.Handler(
                self.__rpc_input_operation,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqSelfOperation,
                ResCommon,
            ),
            "/lq.FastTest/inputChiPengGang": grpclib.const.Handler(
                self.__rpc_input_chi_peng_gang,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqChiPengGang,
                ResCommon,
            ),
            "/lq.FastTest/confirmNewRound": grpclib.const.Handler(
                self.__rpc_confirm_new_round,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.FastTest/broadcastInGame": grpclib.const.Handler(
                self.__rpc_broadcast_in_game,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqBroadcastInGame,
                ResCommon,
            ),
            "/lq.FastTest/inputGameGMCommand": grpclib.const.Handler(
                self.__rpc_input_game_gm_command,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqGmCommandInGaming,
                ResCommon,
            ),
            "/lq.FastTest/fetchGamePlayerState": grpclib.const.Handler(
                self.__rpc_fetch_game_player_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResGamePlayerState,
            ),
            "/lq.FastTest/checkNetworkDelay": grpclib.const.Handler(
                self.__rpc_check_network_delay,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.FastTest/clearLeaving": grpclib.const.Handler(
                self.__rpc_clear_leaving,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
            "/lq.FastTest/voteGameEnd": grpclib.const.Handler(
                self.__rpc_vote_game_end,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqVoteGameEnd,
                ResGameEndVote,
            ),
            "/lq.FastTest/authObserve": grpclib.const.Handler(
                self.__rpc_auth_observe,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqAuthObserve,
                ResCommon,
            ),
            "/lq.FastTest/startObserve": grpclib.const.Handler(
                self.__rpc_start_observe,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResStartObserve,
            ),
            "/lq.FastTest/stopObserve": grpclib.const.Handler(
                self.__rpc_stop_observe,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReqCommon,
                ResCommon,
            ),
        }
